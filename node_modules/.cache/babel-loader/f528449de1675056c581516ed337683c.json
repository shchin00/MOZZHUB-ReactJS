{"ast":null,"code":"import _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\test.js\";\nimport React, { useState } from 'react';\nimport { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Fix for default marker icon issue\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n}); // Haversine distance function to calculate distance between two coordinates\n\nvar haversineDistance = function haversineDistance(coords1, coords2) {\n  var toRad = function toRad(x) {\n    return x * Math.PI / 180;\n  };\n\n  var R = 6371e3; // Earth radius in meters\n\n  var lat1 = coords1[0];\n  var lon1 = coords1[1];\n  var lat2 = coords2[0];\n  var lon2 = coords2[1];\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}; // Function to check if a patient's location is within a cluster's radius\n\n\nvar isWithinCluster = function isWithinCluster(patientCoords, clusterCenter, clusterRadius) {\n  var distance = haversineDistance(patientCoords, clusterCenter);\n  return distance <= clusterRadius;\n};\n\nvar TestFunc = function TestFunc() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDot = _useState2[0],\n      setSelectedDot = _useState2[1];\n\n  var lat = 1.3521;\n  var lng = 103.8198; // Example data structure\n\n  var patientData = [{\n    id: 1,\n    position: [1.3521, 103.8198],\n    visits: [[1.3621, 103.8198], [1.3721, 103.8198]]\n  }, {\n    id: 2,\n    position: [1.3621, 103.8298],\n    visits: [[1.3521, 103.8198], [1.3821, 103.8198]]\n  }];\n  var hotspots = [{\n    id: 1,\n    center: [1.3521, 103.8198],\n    radius: 400\n  }, {\n    id: 2,\n    center: [1.3621, 103.8298],\n    radius: 400\n  }]; // Function to handle marker click\n\n  var handleMarkerClick = function handleMarkerClick(id) {\n    setSelectedDot(id);\n  }; // Function to handle hotspot click\n\n\n  var handleHotspotClick = function handleHotspotClick(id) {\n    setSelectedDot(null);\n  }; // Logging data for debugging\n\n\n  console.log(\"Patient Data:\", patientData);\n  console.log(\"Hotspots:\", hotspots);\n  return React.createElement(Map, {\n    center: [lat, lng],\n    zoom: 13,\n    style: {\n      width: '100%',\n      height: '600px',\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), patientData.map(function (patient) {\n    return React.createElement(Marker, {\n      key: patient.id,\n      position: patient.position,\n      eventHandlers: {\n        click: function click() {\n          return handleMarkerClick(patient.id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, console.log(\"Marker position for patient:\", patient.position), selectedDot === patient.id && patient.visits.map(function (visit, index) {\n      return React.createElement(Polyline, {\n        key: index,\n        positions: [patient.position, visit],\n        color: \"black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }));\n  }), hotspots.map(function (hotspot) {\n    return React.createElement(Circle, {\n      key: hotspot.id,\n      center: hotspot.center,\n      radius: hotspot.radius,\n      color: \"red\",\n      fillColor: \"red\",\n      fillOpacity: 0.3,\n      eventHandlers: {\n        click: function click() {\n          return handleHotspotClick(hotspot.id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  }), hotspots.map(function (hotspot) {\n    return patientData.map(function (patient) {\n      return isWithinCluster(patient.position, hotspot.center, hotspot.radius) && React.createElement(Polyline, {\n        key: \"connection-\".concat(patient.id, \"-\").concat(hotspot.id),\n        positions: [patient.position, hotspot.center],\n        color: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    });\n  }));\n};\n\nexport default TestFunc;","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\test.js"],"names":["React","useState","Map","TileLayer","Marker","Circle","Polyline","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","haversineDistance","coords1","coords2","toRad","x","Math","PI","R","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","c","atan2","sqrt","isWithinCluster","patientCoords","clusterCenter","clusterRadius","distance","TestFunc","selectedDot","setSelectedDot","lat","lng","patientData","id","position","visits","hotspots","center","radius","handleMarkerClick","handleHotspotClick","console","log","width","height","margin","map","patient","click","visit","index","hotspot"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix for default marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Haversine distance function to calculate distance between two coordinates\r\nconst haversineDistance = (coords1, coords2) => {\r\n    const toRad = (x) => x * Math.PI / 180;\r\n    const R = 6371e3; // Earth radius in meters\r\n\r\n    const lat1 = coords1[0];\r\n    const lon1 = coords1[1];\r\n    const lat2 = coords2[0];\r\n    const lon2 = coords2[1];\r\n\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return R * c;\r\n};\r\n\r\n// Function to check if a patient's location is within a cluster's radius\r\nconst isWithinCluster = (patientCoords, clusterCenter, clusterRadius) => {\r\n    const distance = haversineDistance(patientCoords, clusterCenter);\r\n    return distance <= clusterRadius;\r\n};\r\n\r\nconst TestFunc = () => {\r\n    const [selectedDot, setSelectedDot] = useState(null);\r\n    const lat = 1.3521;\r\n    const lng = 103.8198;\r\n\r\n    // Example data structure\r\n    const patientData = [\r\n        { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\r\n        { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] }\r\n    ];\r\n\r\n    const hotspots = [\r\n        { id: 1, center: [1.3521, 103.8198], radius: 400 },\r\n        { id: 2, center: [1.3621, 103.8298], radius: 400 }\r\n    ];\r\n\r\n    // Function to handle marker click\r\n    const handleMarkerClick = (id) => {\r\n        setSelectedDot(id);\r\n    };\r\n\r\n    // Function to handle hotspot click\r\n    const handleHotspotClick = (id) => {\r\n        setSelectedDot(null);\r\n    };\r\n\r\n    // Logging data for debugging\r\n    console.log(\"Patient Data:\", patientData);\r\n    console.log(\"Hotspots:\", hotspots);\r\n\r\n    return (\r\n        <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n\r\n            {patientData.map(patient => (\r\n                <Marker key={patient.id} position={patient.position} eventHandlers={{ click: () => handleMarkerClick(patient.id) }}>\r\n                    {console.log(\"Marker position for patient:\", patient.position)}\r\n                    {selectedDot === patient.id && patient.visits.map((visit, index) => (\r\n                        <Polyline key={index} positions={[patient.position, visit]} color='black' />\r\n                    ))}\r\n                </Marker>\r\n            ))}\r\n\r\n            {hotspots.map(hotspot => (\r\n                <Circle\r\n                    key={hotspot.id}\r\n                    center={hotspot.center}\r\n                    radius={hotspot.radius}\r\n                    color=\"red\"\r\n                    fillColor=\"red\"\r\n                    fillOpacity={0.3}\r\n                    eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\r\n                />\r\n            ))}\r\n\r\n            {hotspots.map(hotspot => (\r\n                patientData.map(patient => (\r\n                    isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \r\n                    <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\r\n                ))\r\n            ))}\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default TestFunc;\r\n"]},"metadata":{},"sourceType":"module"}