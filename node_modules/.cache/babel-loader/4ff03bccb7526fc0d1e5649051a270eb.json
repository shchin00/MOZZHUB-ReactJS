{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { useCompoundItem } from '../useCompound';\n\nfunction tabPanelValueGenerator(otherTabPanelValues) {\n  return otherTabPanelValues.size;\n}\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabPanel API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab-panel)\n */\n\n\nfunction useTabPanel(parameters) {\n  var valueParam = parameters.value,\n      idParam = parameters.id,\n      externalRef = parameters.rootRef;\n  var context = useTabsContext();\n\n  if (context === null) {\n    throw new Error('No TabContext provided');\n  }\n\n  var selectedTabValue = context.value,\n      getTabId = context.getTabId;\n  var id = useId(idParam);\n  var ref = React.useRef(null);\n  var handleRef = useForkRef(ref, externalRef);\n  var metadata = React.useMemo(function () {\n    return {\n      id: id,\n      ref: ref\n    };\n  }, [id]);\n\n  var _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata),\n      value = _useCompoundItem.id;\n\n  var hidden = value !== selectedTabValue;\n  var correspondingTabId = value !== undefined ? getTabId(value) : undefined;\n\n  var getRootProps = function getRootProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({\n      'aria-labelledby': correspondingTabId != null ? correspondingTabId : undefined,\n      hidden: hidden,\n      id: id != null ? id : undefined\n    }, externalProps, {\n      ref: handleRef\n    });\n  };\n\n  return {\n    hidden: hidden,\n    getRootProps: getRootProps,\n    rootRef: handleRef\n  };\n}\n\nexport { useTabPanel };","map":null,"metadata":{},"sourceType":"module"}