{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\interactiveMap.js\";\n// import React, {useState} from 'react';\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\n// import { Button } from 'semantic-ui-react';\n// const dummyRanking = [\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\n// ];\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\n// // async function fetchData() {\n// //     try {\n// //         const response = await fetch(url);\n// //         if (!response.ok) {\n// //             throw new Error('Network response was not ok ' + response.statusText);\n// //         }\n// //         const data = await response.json();\n// //         data.forEach(item => {\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\n// //         });\n// //     } catch (error) {\n// //         console.error('There was a problem with the fetch operation:', error);\n// //     }\n// // }\n// // fetchData();\n// const interactiveMap = () => {\n//     const lat = 1.462251; // Initial map center latitude\n//     const lng = 110.413307; // Initial map center longitude\n//     const[hideLine, setHideLine] = useState(false)\n//     const handleClick = ()=>{\n//         setHideLine(!hideLine);\n//     }\n//     const controlPoints = []; // Array to store control points for curves\n//     // Calculate control points\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\n//         const controlPoint = [\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\n//         ];\n//         controlPoints.push(controlPoint);\n//     }\n//     return (\n//         <div>\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\n//             <TileLayer\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 maxZoom={16}\n//                 minZoom={2}\n//             />\n//             {dummyRanking.map((elem, i) => {\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\n//                 var a = dummyRanking[i].ranking * 0.9;\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\n//                 return (\n//                     <Circle\n//                         key={i}\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\n//                         color='red' \n//                         fillColor={rgb}\n//                         fillOpacity={a}\n//                         radius={50}\n//                         onClick={handleClick}\n//                         >\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\n//                     </Circle>\n//                 )\n//             })}\n//             {/* Render curved lines between circles */}\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\n//                 <Polyline\n//                     key={i}\n//                     positions={[\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\n//                         controlPoint, // Control point\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\n//                     ]}\n//                     color=\"blue\"\n//                 />\n//             ))}\n//         </Map>\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\n//             </div>\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\n//         </div>\n//             </div>\n//         </div>\n//     )\n// }\n// export default interactiveMap;\nimport React, { useState, useEffect } from 'react';\nimport MenuBar from './MenuBar';\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\nimport { Button } from 'semantic-ui-react';\nimport { withRouter } from 'react-router-dom';\n\nvar InteractiveMap = function InteractiveMap(props) {\n  var initialLat = 1.462251; // Fallback latitude\n\n  var initialLng = 110.413307; // Fallback longitude\n  // State to control visibility of lines and store fetched data\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hideLine = _useState2[0],\n      setHideLine = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState([initialLat, initialLng]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mapCenter = _useState6[0],\n      setMapCenter = _useState6[1]; // State to control map center\n  // Extracting case_id from props passed via routing\n\n\n  var _ref = props.location && props.location.state || {},\n      case_id = _ref.case_id;\n\n  useEffect(function () {\n    // URL to fetch data based on case_id\n    var url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/\".concat(case_id);\n\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, _data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error('Network response was not ok ' + response.statusText);\n\n              case 6:\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                _data = _context.sent;\n                // Store fetched data in state\n                setData(_data);\n\n                if (_data.length > 0) {\n                  // Update map center to the first data point's location\n                  setMapCenter([_data[0].lat, _data[0].lng]);\n                }\n\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                console.error('There was a problem with the fetch operation:', _context.t0);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 13]]);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, [case_id]); // Dependency array includes case_id to re-fetch if it changes\n\n  console.log(case_id, \"AAAAAA\");\n  console.log(data.lat, \"API Fetch\"); // Toggle function to hide/show lines\n\n  var handleClick = function handleClick() {\n    setHideLine(!hideLine);\n  }; // Function to handle Close button click\n\n\n  var handleCloseButton = function handleCloseButton() {\n    props.history.push('/record'); // Navigate to '/record' route\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      backgroundColor: '',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(MenuBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Map, {\n    center: mapCenter,\n    zoom: 15,\n    style: {\n      width: '100%',\n      height: '580px',\n      zIndex: '0'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    maxZoom: 16,\n    minZoom: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), data.map(function (elem, i) {\n    // var l = (0.9 - data[i].ranking * 0.9) * 255;\n    // var h = (0.9 - data[i].ranking * 0.9) * 240;\n    // var a = data[i].ranking * 0.9;\n    // var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\n    return React.createElement(Circle, {\n      key: i,\n      center: {\n        lat: data[i].lat,\n        lng: data[i].lng\n      },\n      color: \"red\",\n      fillColor: \"red\",\n      fillOpacity: \"1.0\",\n      radius: 20,\n      onClick: handleClick // Toggle lines on circle click\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      style: {\n        maxWidth: \"150px\",\n        wordWrap: \"break-word\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Case ID: \", data[i].Case_id), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Location: \", data[i].Location)));\n  }), !hideLine && data.length > 1 && data.slice(1).map(function (elem, i) {\n    return React.createElement(Polyline, {\n      key: i,\n      positions: [[data[0].lat, data[0].lng], // Residential location\n      [data[i + 1].lat, data[i + 1].lng]],\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginLeft: '0px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      margin: \"2px\",\n      border: \"2px solid black\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      margin: \"2px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"Case ID: \", case_id), React.createElement(\"p\", {\n    style: {\n      margin: \"2px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Location: \")), React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      right: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      marginTop: \"10px\"\n    },\n    onClick: handleCloseButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Close\")))));\n};\n\nexport default withRouter(InteractiveMap);","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\interactiveMap.js"],"names":["React","useState","useEffect","MenuBar","Map","TileLayer","Tooltip","Circle","Polyline","Button","withRouter","InteractiveMap","props","initialLat","initialLng","hideLine","setHideLine","data","setData","mapCenter","setMapCenter","location","state","case_id","url","fetchData","fetch","response","ok","Error","statusText","json","length","lat","lng","console","error","log","handleClick","handleCloseButton","history","push","backgroundColor","width","height","zIndex","map","elem","i","maxWidth","wordWrap","Case_id","Location","slice","display","flexDirection","marginLeft","margin","border","position","right","marginTop"],"mappings":"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","sourcesContent":["// import React, {useState} from 'react';\r\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\n// import { Button } from 'semantic-ui-react';\r\n\r\n// const dummyRanking = [\r\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\r\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\r\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\r\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\r\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\r\n// ];\r\n\r\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\r\n\r\n// // async function fetchData() {\r\n// //     try {\r\n// //         const response = await fetch(url);\r\n// //         if (!response.ok) {\r\n// //             throw new Error('Network response was not ok ' + response.statusText);\r\n// //         }\r\n// //         const data = await response.json();\r\n\r\n// //         data.forEach(item => {\r\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\r\n// //         });\r\n// //     } catch (error) {\r\n// //         console.error('There was a problem with the fetch operation:', error);\r\n// //     }\r\n// // }\r\n\r\n// // fetchData();\r\n\r\n\r\n// const interactiveMap = () => {\r\n//     const lat = 1.462251; // Initial map center latitude\r\n//     const lng = 110.413307; // Initial map center longitude\r\n\r\n//     const[hideLine, setHideLine] = useState(false)\r\n\r\n//     const handleClick = ()=>{\r\n//         setHideLine(!hideLine);\r\n//     }\r\n\r\n//     const controlPoints = []; // Array to store control points for curves\r\n\r\n//     // Calculate control points\r\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\r\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\r\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\r\n\r\n//         const controlPoint = [\r\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\r\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\r\n//         ];\r\n\r\n//         controlPoints.push(controlPoint);\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\r\n//             <TileLayer\r\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 maxZoom={16}\r\n//                 minZoom={2}\r\n//             />\r\n//             {dummyRanking.map((elem, i) => {\r\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\r\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\r\n//                 var a = dummyRanking[i].ranking * 0.9;\r\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\r\n//                 return (\r\n//                     <Circle\r\n//                         key={i}\r\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\r\n//                         color='red' \r\n//                         fillColor={rgb}\r\n//                         fillOpacity={a}\r\n//                         radius={50}\r\n//                         onClick={handleClick}\r\n//                         >\r\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\r\n//                     </Circle>\r\n//                 )\r\n//             })}\r\n//             {/* Render curved lines between circles */}\r\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\r\n//                 <Polyline\r\n//                     key={i}\r\n//                     positions={[\r\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\r\n//                         controlPoint, // Control point\r\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\r\n//                     ]}\r\n//                     color=\"blue\"\r\n//                 />\r\n//             ))}\r\n//         </Map>\r\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\r\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\r\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\r\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\r\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\r\n//             </div>\r\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\r\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\r\n//         </div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default interactiveMap;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport MenuBar from './MenuBar';\r\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst InteractiveMap = (props) => {\r\n    const initialLat = 1.462251; // Fallback latitude\r\n    const initialLng = 110.413307; // Fallback longitude\r\n\r\n    // State to control visibility of lines and store fetched data\r\n    const [hideLine, setHideLine] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState([initialLat, initialLng]); // State to control map center\r\n\r\n    // Extracting case_id from props passed via routing\r\n    const { case_id } = (props.location && props.location.state) || {};\r\n\r\n    useEffect(() => {\r\n        // URL to fetch data based on case_id\r\n        const url = `http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/${case_id}`;\r\n\r\n        async function fetchData() {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok ' + response.statusText);\r\n                }\r\n                const data = await response.json();\r\n                // Store fetched data in state\r\n                setData(data);\r\n                if (data.length > 0) {\r\n                    // Update map center to the first data point's location\r\n                    setMapCenter([data[0].lat, data[0].lng]);\r\n                }\r\n            } catch (error) {\r\n                console.error('There was a problem with the fetch operation:', error);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [case_id]); // Dependency array includes case_id to re-fetch if it changes\r\n\r\n    console.log(case_id, \"AAAAAA\")\r\n    console.log(data.lat, \"API Fetch\")\r\n\r\n    // Toggle function to hide/show lines\r\n    const handleClick = () => {\r\n        setHideLine(!hideLine);\r\n    }\r\n\r\n    // Function to handle Close button click\r\n    const handleCloseButton = () => {\r\n        props.history.push('/record'); // Navigate to '/record' route\r\n    }\r\n\r\n    return (\r\n        <div style={{ backgroundColor: '', width: '100%' }}>\r\n            <MenuBar />\r\n            <div>\r\n                <Map center={mapCenter} zoom={15} style={{ width: '100%', height: '580px', zIndex: '0' }}>\r\n                    <TileLayer\r\n                        attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        maxZoom={16}\r\n                        minZoom={2}\r\n                    />\r\n                    {data.map((elem, i) => {\r\n                        // var l = (0.9 - data[i].ranking * 0.9) * 255;\r\n                        // var h = (0.9 - data[i].ranking * 0.9) * 240;\r\n                        // var a = data[i].ranking * 0.9;\r\n                        // var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\r\n                        return (\r\n                            <Circle\r\n                                key={i}\r\n                                center={{ lat: data[i].lat, lng: data[i].lng }}\r\n                                color='red'\r\n                                fillColor='red'\r\n                                fillOpacity='1.0'\r\n                                radius={20}\r\n                                onClick={handleClick} // Toggle lines on circle click\r\n                            >\r\n                                <Tooltip style={{ maxWidth: \"150px\", wordWrap: \"break-word\" }}>\r\n                                    <h3>Case ID: {data[i].Case_id}</h3>\r\n                                    <p>Location: {data[i].Location}</p>\r\n                                </Tooltip>\r\n                            </Circle>\r\n                        )\r\n                    })}\r\n                    {/* Render curved lines from the first location to all visited locations */}\r\n                    {!hideLine && data.length > 1 && data.slice(1).map((elem, i) => (\r\n                        <Polyline\r\n                            key={i}\r\n                            positions={[\r\n                                [data[0].lat, data[0].lng], // Residential location\r\n                                [data[i + 1].lat, data[i + 1].lng], // Visited location\r\n                            ]}\r\n                            color=\"blue\"\r\n                        />\r\n                    ))}\r\n                </Map>\r\n                <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '0px' }}>\r\n                    <div style={{ margin: \"2px\", border: \"2px solid black\" }}>\r\n                        <p style={{ margin: \"2px\" }}>Case ID: {case_id}</p>\r\n                        <p style={{ margin: \"2px\" }}>Location: </p>\r\n                    </div>\r\n                    <div style={{ position: \"absolute\", right: \"10px\" }}>\r\n                        <Button style={{ marginTop: \"10px\" }} onClick={handleCloseButton}>Close</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(InteractiveMap);\r\n\r\n"]},"metadata":{},"sourceType":"module"}