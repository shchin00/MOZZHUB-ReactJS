{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"backIconButtonProps\", \"count\", \"disabled\", \"getItemAriaLabel\", \"nextIconButtonProps\", \"onPageChange\", \"page\", \"rowsPerPage\", \"showFirstButton\", \"showLastButton\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport IconButton from '../IconButton';\nimport LastPageIconDefault from '../internal/svg-icons/LastPage';\nimport FirstPageIconDefault from '../internal/svg-icons/FirstPage';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TablePaginationActions =\n/*#__PURE__*/\nReact.forwardRef(function TablePaginationActions(props, ref) {\n  var _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$previousButton, _slots$firstButtonIco, _slots$lastButtonIcon, _slots$nextButtonIcon, _slots$previousButton2;\n\n  var backIconButtonProps = props.backIconButtonProps,\n      count = props.count,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      getItemAriaLabel = props.getItemAriaLabel,\n      nextIconButtonProps = props.nextIconButtonProps,\n      onPageChange = props.onPageChange,\n      page = props.page,\n      rowsPerPage = props.rowsPerPage,\n      showFirstButton = props.showFirstButton,\n      showLastButton = props.showLastButton,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var isRtl = useRtl();\n\n  var handleFirstPageButtonClick = function handleFirstPageButtonClick(event) {\n    onPageChange(event, 0);\n  };\n\n  var handleBackButtonClick = function handleBackButtonClick(event) {\n    onPageChange(event, page - 1);\n  };\n\n  var handleNextButtonClick = function handleNextButtonClick(event) {\n    onPageChange(event, page + 1);\n  };\n\n  var handleLastPageButtonClick = function handleLastPageButtonClick(event) {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  var FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : IconButton;\n  var LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : IconButton;\n  var NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : IconButton;\n  var PreviousButton = (_slots$previousButton = slots.previousButton) != null ? _slots$previousButton : IconButton;\n  var FirstButtonIcon = (_slots$firstButtonIco = slots.firstButtonIcon) != null ? _slots$firstButtonIco : FirstPageIconDefault;\n  var LastButtonIcon = (_slots$lastButtonIcon = slots.lastButtonIcon) != null ? _slots$lastButtonIcon : LastPageIconDefault;\n  var NextButtonIcon = (_slots$nextButtonIcon = slots.nextButtonIcon) != null ? _slots$nextButtonIcon : KeyboardArrowRight;\n  var PreviousButtonIcon = (_slots$previousButton2 = slots.previousButtonIcon) != null ? _slots$previousButton2 : KeyboardArrowLeft;\n  var FirstButtonSlot = isRtl ? LastButton : FirstButton;\n  var PreviousButtonSlot = isRtl ? NextButton : PreviousButton;\n  var NextButtonSlot = isRtl ? PreviousButton : NextButton;\n  var LastButtonSlot = isRtl ? FirstButton : LastButton;\n  var firstButtonSlotProps = isRtl ? slotProps.lastButton : slotProps.firstButton;\n  var previousButtonSlotProps = isRtl ? slotProps.nextButton : slotProps.previousButton;\n  var nextButtonSlotProps = isRtl ? slotProps.previousButton : slotProps.nextButton;\n  var lastButtonSlotProps = isRtl ? slotProps.firstButton : slotProps.lastButton;\n  return (\n    /*#__PURE__*/\n    _jsxs(\"div\", _extends({\n      ref: ref\n    }, other, {\n      children: [showFirstButton &&\n      /*#__PURE__*/\n      _jsx(FirstButtonSlot, _extends({\n        onClick: handleFirstPageButtonClick,\n        disabled: disabled || page === 0,\n        \"aria-label\": getItemAriaLabel('first', page),\n        title: getItemAriaLabel('first', page)\n      }, firstButtonSlotProps, {\n        children: isRtl ?\n        /*#__PURE__*/\n        _jsx(LastButtonIcon, _extends({}, slotProps.lastButtonIcon)) :\n        /*#__PURE__*/\n        _jsx(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon))\n      })),\n      /*#__PURE__*/\n      _jsx(PreviousButtonSlot, _extends({\n        onClick: handleBackButtonClick,\n        disabled: disabled || page === 0,\n        color: \"inherit\",\n        \"aria-label\": getItemAriaLabel('previous', page),\n        title: getItemAriaLabel('previous', page)\n      }, previousButtonSlotProps != null ? previousButtonSlotProps : backIconButtonProps, {\n        children: isRtl ?\n        /*#__PURE__*/\n        _jsx(NextButtonIcon, _extends({}, slotProps.nextButtonIcon)) :\n        /*#__PURE__*/\n        _jsx(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon))\n      })),\n      /*#__PURE__*/\n      _jsx(NextButtonSlot, _extends({\n        onClick: handleNextButtonClick,\n        disabled: disabled || (count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false),\n        color: \"inherit\",\n        \"aria-label\": getItemAriaLabel('next', page),\n        title: getItemAriaLabel('next', page)\n      }, nextButtonSlotProps != null ? nextButtonSlotProps : nextIconButtonProps, {\n        children: isRtl ?\n        /*#__PURE__*/\n        _jsx(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon)) :\n        /*#__PURE__*/\n        _jsx(NextButtonIcon, _extends({}, slotProps.nextButtonIcon))\n      })), showLastButton &&\n      /*#__PURE__*/\n      _jsx(LastButtonSlot, _extends({\n        onClick: handleLastPageButtonClick,\n        disabled: disabled || page >= Math.ceil(count / rowsPerPage) - 1,\n        \"aria-label\": getItemAriaLabel('last', page),\n        title: getItemAriaLabel('last', page)\n      }, lastButtonSlotProps, {\n        children: isRtl ?\n        /*#__PURE__*/\n        _jsx(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon)) :\n        /*#__PURE__*/\n        _jsx(LastButtonIcon, _extends({}, slotProps.lastButtonIcon))\n      }))]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePaginationActions.propTypes = {\n  /**\n   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   *\n   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.\n   * @param {number} page The page number to format.\n   * @returns {string}\n   */\n  getItemAriaLabel: PropTypes.func.isRequired,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: PropTypes.func.isRequired,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * If `true`, show the first-page button.\n   */\n  showFirstButton: PropTypes.bool.isRequired,\n\n  /**\n   * If `true`, show the last-page button.\n   */\n  showLastButton: PropTypes.bool.isRequired,\n\n  /**\n   * The props used for each slot inside the TablePaginationActions.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    firstButton: PropTypes.object,\n    firstButtonIcon: PropTypes.object,\n    lastButton: PropTypes.object,\n    lastButtonIcon: PropTypes.object,\n    nextButton: PropTypes.object,\n    nextButtonIcon: PropTypes.object,\n    previousButton: PropTypes.object,\n    previousButtonIcon: PropTypes.object\n  }),\n\n  /**\n   * The components used for each slot inside the TablePaginationActions.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    firstButton: PropTypes.elementType,\n    firstButtonIcon: PropTypes.elementType,\n    lastButton: PropTypes.elementType,\n    lastButtonIcon: PropTypes.elementType,\n    nextButton: PropTypes.elementType,\n    nextButtonIcon: PropTypes.elementType,\n    previousButton: PropTypes.elementType,\n    previousButtonIcon: PropTypes.elementType\n  })\n} : void 0;\nexport default TablePaginationActions;","map":null,"metadata":{},"sourceType":"module"}