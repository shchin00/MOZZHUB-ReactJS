{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { menuReducer } from './menuReducer';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { ListActionTypes, useList } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { useCompoundParent } from '../useCompound';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nvar FALLBACK_MENU_CONTEXT = {\n  dispatch: function dispatch() {},\n  popupId: '',\n  registerPopup: function registerPopup() {},\n  registerTrigger: function registerTrigger() {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\n\nexport function useMenu() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useId, _React$useContext;\n\n  var listboxRefProp = parameters.listboxRef,\n      onItemsChange = parameters.onItemsChange,\n      idParam = parameters.id,\n      _parameters$disabledI = parameters.disabledItemsFocusable,\n      disabledItemsFocusable = _parameters$disabledI === void 0 ? true : _parameters$disabledI,\n      _parameters$disableLi = parameters.disableListWrap,\n      disableListWrap = _parameters$disableLi === void 0 ? false : _parameters$disableLi,\n      _parameters$autoFocus = parameters.autoFocus,\n      autoFocus = _parameters$autoFocus === void 0 ? true : _parameters$autoFocus,\n      _parameters$component = parameters.componentName,\n      componentName = _parameters$component === void 0 ? 'useMenu' : _parameters$component;\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(rootRef, listboxRefProp);\n  var listboxId = (_useId = useId(idParam)) != null ? _useId : '';\n\n  var _ref = (_React$useContext = React.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT,\n      _ref$state = _ref.state,\n      open = _ref$state.open,\n      changeReason = _ref$state.changeReason,\n      menuDispatch = _ref.dispatch,\n      triggerElement = _ref.triggerElement,\n      registerPopup = _ref.registerPopup; // store the initial open state to prevent focus stealing\n  // (the first menu items gets focued only when the menu is opened by the user)\n\n\n  var isInitiallyOpen = React.useRef(open);\n\n  var _useCompoundParent = useCompoundParent(),\n      subitems = _useCompoundParent.subitems,\n      compoundComponentContextValue = _useCompoundParent.contextValue;\n\n  var subitemKeys = React.useMemo(function () {\n    return Array.from(subitems.keys());\n  }, [subitems]);\n  var getItemDomElement = React.useCallback(function (itemId) {\n    var _subitems$get$ref$cur, _subitems$get;\n\n    if (itemId == null) {\n      return null;\n    }\n\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  var isItemDisabled = React.useCallback(function (id) {\n    var _subitems$get2;\n\n    return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;\n  }, [subitems]);\n  var getItemAsString = React.useCallback(function (id) {\n    var _subitems$get3, _subitems$get4;\n\n    return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);\n  }, [subitems]);\n  var reducerActionContext = React.useMemo(function () {\n    return {\n      listboxRef: rootRef\n    };\n  }, [rootRef]);\n\n  var _useList = useList({\n    disabledItemsFocusable: disabledItemsFocusable,\n    disableListWrap: disableListWrap,\n    focusManagement: 'DOM',\n    getItemDomElement: getItemDomElement,\n    getInitialState: function getInitialState() {\n      return {\n        selectedValues: [],\n        highlightedValue: null\n      };\n    },\n    isItemDisabled: isItemDisabled,\n    items: subitemKeys,\n    getItemAsString: getItemAsString,\n    rootRef: handleRef,\n    onItemsChange: onItemsChange,\n    reducerActionContext: reducerActionContext,\n    selectionMode: 'none',\n    stateReducer: menuReducer,\n    componentName: componentName\n  }),\n      listDispatch = _useList.dispatch,\n      getListRootProps = _useList.getRootProps,\n      listContextValue = _useList.contextValue,\n      highlightedValue = _useList.state.highlightedValue,\n      mergedListRef = _useList.rootRef;\n\n  useEnhancedEffect(function () {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  useEnhancedEffect(function () {\n    if (open && (changeReason == null ? void 0 : changeReason.type) === 'keydown' && changeReason.key === 'ArrowUp') {\n      listDispatch({\n        type: ListActionTypes.highlightLast,\n        event: changeReason\n      });\n    }\n  }, [open, changeReason, listDispatch]);\n  React.useEffect(function () {\n    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {\n      var _subitems$get5;\n\n      (_subitems$get5 = subitems.get(highlightedValue)) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();\n    }\n  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(function () {\n    var _rootRef$current; // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n\n\n    if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {\n      var _subitems$get6;\n\n      subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();\n    }\n  }, [highlightedValue, subitems]);\n\n  var createHandleBlur = function createHandleBlur(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onBlur, _rootRef$current2;\n\n      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n        return;\n      }\n\n      menuDispatch({\n        type: DropdownActionTypes.blur,\n        event: event\n      });\n    };\n  };\n\n  var createHandleKeyDown = function createHandleKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if (event.key === 'Escape') {\n        menuDispatch({\n          type: DropdownActionTypes.escapeKeyDown,\n          event: event\n        });\n      }\n    };\n  };\n\n  var getOwnListboxHandlers = function getOwnListboxHandlers() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n\n  var getListboxProps = function getListboxProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n      id: listboxId,\n      role: 'menu'\n    });\n  };\n\n  React.useDebugValue({\n    subitems: subitems,\n    highlightedValue: highlightedValue\n  });\n  return {\n    contextValue: _extends({}, compoundComponentContextValue, listContextValue),\n    dispatch: listDispatch,\n    getListboxProps: getListboxProps,\n    highlightedValue: highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open: open,\n    triggerElement: triggerElement\n  };\n}","map":null,"metadata":{},"sourceType":"module"}