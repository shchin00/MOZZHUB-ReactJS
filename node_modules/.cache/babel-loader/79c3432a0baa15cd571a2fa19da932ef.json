{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider, useTheme as usePrivateTheme } from '@mui/private-theming';\nimport exactProp from '@mui/utils/exactProp';\nimport { ThemeContext as StyledEngineThemeContext } from '@mui/styled-engine';\nimport useThemeWithoutDefault from '../useThemeWithoutDefault';\nimport RtlProvider from '../RtlProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar EMPTY_THEME = {};\n\nfunction useThemeScoping(themeId, upperTheme, localTheme) {\n  var isPrivate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return React.useMemo(function () {\n    var resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n\n    if (typeof localTheme === 'function') {\n      var mergedTheme = localTheme(resolvedTheme);\n      var result = themeId ? _extends({}, upperTheme, _defineProperty({}, themeId, mergedTheme)) : mergedTheme; // must return a function for the private theme to NOT merge with the upper theme.\n      // see the test case \"use provided theme from a callback\" in ThemeProvider.test.js\n\n      if (isPrivate) {\n        return function () {\n          return result;\n        };\n      }\n\n      return result;\n    }\n\n    return themeId ? _extends({}, upperTheme, _defineProperty({}, themeId, localTheme)) : _extends({}, upperTheme, localTheme);\n  }, [themeId, upperTheme, localTheme, isPrivate]);\n}\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n *\n * <ThemeProvider theme={theme}> // existing use case\n * <ThemeProvider theme={{ id: theme }}> // theme scoping\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme,\n      themeId = props.themeId;\n  var upperTheme = useThemeWithoutDefault(EMPTY_THEME);\n  var upperPrivateTheme = usePrivateTheme() || EMPTY_THEME;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (upperTheme === null && typeof localTheme === 'function' || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var engineTheme = useThemeScoping(themeId, upperTheme, localTheme);\n  var privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);\n  var rtlValue = engineTheme.direction === 'rtl';\n  return (\n    /*#__PURE__*/\n    _jsx(MuiThemeProvider, {\n      theme: privateTheme,\n      children:\n      /*#__PURE__*/\n      _jsx(StyledEngineThemeContext.Provider, {\n        value: engineTheme,\n        children:\n        /*#__PURE__*/\n        _jsx(RtlProvider, {\n          value: rtlValue,\n          children: children\n        })\n      })\n    })\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n   */\n  themeId: PropTypes.string\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":null,"metadata":{},"sourceType":"module"}