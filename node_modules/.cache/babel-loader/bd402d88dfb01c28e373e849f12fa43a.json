{"ast":null,"code":"import _toConsumableArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"ownerState\"],\n    _excluded2 = [\"variants\"],\n    _excluded3 = [\"name\", \"slot\", \"skipVariantsResolver\", \"skipSx\", \"overridesResolver\"];\n/* eslint-disable no-underscore-dangle */\n\nimport styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';\nimport { isPlainObject } from '@mui/utils/deepmerge';\nimport capitalize from '@mui/utils/capitalize';\nimport getDisplayName from '@mui/utils/getDisplayName';\nimport createTheme from './createTheme';\nimport styleFunctionSx from './styleFunctionSx';\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n} // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40\n\n\nfunction isStringTag(tag) {\n  return typeof tag === 'string' && // 96 is one less than the char code\n  // for \"a\" so this is checking that\n  // it's a lowercase character\n  tag.charCodeAt(0) > 96;\n} // Update /system/styled/#api in case if this changes\n\n\nexport function shouldForwardProp(prop) {\n  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';\n}\nexport var systemDefaultTheme = createTheme();\n\nvar lowercaseFirstLetter = function lowercaseFirstLetter(string) {\n  if (!string) {\n    return string;\n  }\n\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nfunction resolveTheme(_ref2) {\n  var defaultTheme = _ref2.defaultTheme,\n      theme = _ref2.theme,\n      themeId = _ref2.themeId;\n  return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;\n}\n\nfunction defaultOverridesResolver(slot) {\n  if (!slot) {\n    return null;\n  }\n\n  return function (props, styles) {\n    return styles[slot];\n  };\n}\n\nfunction processStyleArg(callableStyle, _ref) {\n  var ownerState = _ref.ownerState,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var resolvedStylesArg = typeof callableStyle === 'function' ? callableStyle(_extends({\n    ownerState: ownerState\n  }, props)) : callableStyle;\n\n  if (Array.isArray(resolvedStylesArg)) {\n    return resolvedStylesArg.flatMap(function (resolvedStyle) {\n      return processStyleArg(resolvedStyle, _extends({\n        ownerState: ownerState\n      }, props));\n    });\n  }\n\n  if (!!resolvedStylesArg && typeof resolvedStylesArg === 'object' && Array.isArray(resolvedStylesArg.variants)) {\n    var _resolvedStylesArg$va = resolvedStylesArg.variants,\n        variants = _resolvedStylesArg$va === void 0 ? [] : _resolvedStylesArg$va,\n        otherStyles = _objectWithoutPropertiesLoose(resolvedStylesArg, _excluded2);\n\n    var result = otherStyles;\n    variants.forEach(function (variant) {\n      var isMatch = true;\n\n      if (typeof variant.props === 'function') {\n        isMatch = variant.props(_extends({\n          ownerState: ownerState\n        }, props, ownerState));\n      } else {\n        Object.keys(variant.props).forEach(function (key) {\n          if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {\n            isMatch = false;\n          }\n        });\n      }\n\n      if (isMatch) {\n        if (!Array.isArray(result)) {\n          result = [result];\n        }\n\n        result.push(typeof variant.style === 'function' ? variant.style(_extends({\n          ownerState: ownerState\n        }, props, ownerState)) : variant.style);\n      }\n    });\n    return result;\n  }\n\n  return resolvedStylesArg;\n}\n\nexport default function createStyled() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var themeId = input.themeId,\n      _input$defaultTheme = input.defaultTheme,\n      defaultTheme = _input$defaultTheme === void 0 ? systemDefaultTheme : _input$defaultTheme,\n      _input$rootShouldForw = input.rootShouldForwardProp,\n      rootShouldForwardProp = _input$rootShouldForw === void 0 ? shouldForwardProp : _input$rootShouldForw,\n      _input$slotShouldForw = input.slotShouldForwardProp,\n      slotShouldForwardProp = _input$slotShouldForw === void 0 ? shouldForwardProp : _input$slotShouldForw;\n\n  var systemSx = function systemSx(props) {\n    return styleFunctionSx(_extends({}, props, {\n      theme: resolveTheme(_extends({}, props, {\n        defaultTheme: defaultTheme,\n        themeId: themeId\n      }))\n    }));\n  };\n\n  systemSx.__mui_systemSx = true;\n  return function (tag) {\n    var inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.\n    processStyles(tag, function (styles) {\n      return styles.filter(function (style) {\n        return !(style != null && style.__mui_systemSx);\n      });\n    });\n\n    var componentName = inputOptions.name,\n        componentSlot = inputOptions.slot,\n        inputSkipVariantsResolver = inputOptions.skipVariantsResolver,\n        inputSkipSx = inputOptions.skipSx,\n        _inputOptions$overrid = inputOptions.overridesResolver,\n        overridesResolver = _inputOptions$overrid === void 0 ? defaultOverridesResolver(lowercaseFirstLetter(componentSlot)) : _inputOptions$overrid,\n        options = _objectWithoutPropertiesLoose(inputOptions, _excluded3); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.\n\n\n    var skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : // TODO v6: remove `Root` in the next major release\n    // For more details: https://github.com/mui/material-ui/pull/37908\n    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;\n    var skipSx = inputSkipSx || false;\n    var label;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (componentName) {\n        // TODO v6: remove `lowercaseFirstLetter()` in the next major release\n        // For more details: https://github.com/mui/material-ui/pull/37908\n        label = \"\".concat(componentName, \"-\").concat(lowercaseFirstLetter(componentSlot || 'Root'));\n      }\n    }\n\n    var shouldForwardPropOption = shouldForwardProp; // TODO v6: remove `Root` in the next major release\n    // For more details: https://github.com/mui/material-ui/pull/37908\n\n    if (componentSlot === 'Root' || componentSlot === 'root') {\n      shouldForwardPropOption = rootShouldForwardProp;\n    } else if (componentSlot) {\n      // any other slot specified\n      shouldForwardPropOption = slotShouldForwardProp;\n    } else if (isStringTag(tag)) {\n      // for string (html) tag, preserve the behavior in emotion & styled-components.\n      shouldForwardPropOption = undefined;\n    }\n\n    var defaultStyledResolver = styledEngineStyled(tag, _extends({\n      shouldForwardProp: shouldForwardPropOption,\n      label: label\n    }, options));\n\n    var transformStyleArg = function transformStyleArg(stylesArg) {\n      // On the server Emotion doesn't use React.forwardRef for creating components, so the created\n      // component stays as a function. This condition makes sure that we do not interpolate functions\n      // which are basically components used as a selectors.\n      if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg || isPlainObject(stylesArg)) {\n        return function (props) {\n          return processStyleArg(stylesArg, _extends({}, props, {\n            theme: resolveTheme({\n              theme: props.theme,\n              defaultTheme: defaultTheme,\n              themeId: themeId\n            })\n          }));\n        };\n      }\n\n      return stylesArg;\n    };\n\n    var muiStyledResolver = function muiStyledResolver(styleArg) {\n      var transformedStyleArg = transformStyleArg(styleArg);\n\n      for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        expressions[_key - 1] = arguments[_key];\n      }\n\n      var expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];\n\n      if (componentName && overridesResolver) {\n        expressionsWithDefaultTheme.push(function (props) {\n          var theme = resolveTheme(_extends({}, props, {\n            defaultTheme: defaultTheme,\n            themeId: themeId\n          }));\n\n          if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {\n            return null;\n          }\n\n          var styleOverrides = theme.components[componentName].styleOverrides;\n          var resolvedStyleOverrides = {}; // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly\n\n          Object.entries(styleOverrides).forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                slotKey = _ref4[0],\n                slotStyle = _ref4[1];\n\n            resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, _extends({}, props, {\n              theme: theme\n            }));\n          });\n          return overridesResolver(props, resolvedStyleOverrides);\n        });\n      }\n\n      if (componentName && !skipVariantsResolver) {\n        expressionsWithDefaultTheme.push(function (props) {\n          var _theme$components;\n\n          var theme = resolveTheme(_extends({}, props, {\n            defaultTheme: defaultTheme,\n            themeId: themeId\n          }));\n          var themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;\n          return processStyleArg({\n            variants: themeVariants\n          }, _extends({}, props, {\n            theme: theme\n          }));\n        });\n      }\n\n      if (!skipSx) {\n        expressionsWithDefaultTheme.push(systemSx);\n      }\n\n      var numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n\n      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n        var placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.\n\n        transformedStyleArg = _toConsumableArray(styleArg).concat(_toConsumableArray(placeholders));\n        transformedStyleArg.raw = _toConsumableArray(styleArg.raw).concat(_toConsumableArray(placeholders));\n      }\n\n      var Component = defaultStyledResolver.apply(void 0, [transformedStyleArg].concat(_toConsumableArray(expressionsWithDefaultTheme)));\n\n      if (process.env.NODE_ENV !== 'production') {\n        var displayName;\n\n        if (componentName) {\n          displayName = \"\".concat(componentName).concat(capitalize(componentSlot || ''));\n        }\n\n        if (displayName === undefined) {\n          displayName = \"Styled(\".concat(getDisplayName(tag), \")\");\n        }\n\n        Component.displayName = displayName;\n      }\n\n      if (tag.muiName) {\n        Component.muiName = tag.muiName;\n      }\n\n      return Component;\n    };\n\n    if (defaultStyledResolver.withConfig) {\n      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;\n    }\n\n    return muiStyledResolver;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}