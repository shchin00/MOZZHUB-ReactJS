{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"actions\", \"anchor\", \"children\", \"onItemsChange\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { HTMLElementType, refType } from '@mui/utils';\nimport { getMenuUtilityClass } from './menuClasses';\nimport { useMenu } from '../useMenu';\nimport { MenuProvider } from '../useMenu/MenuProvider';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { Unstable_Popup as Popup } from '../Unstable_Popup';\nimport { useSlotProps } from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { ListActionTypes } from '../useList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  var open = ownerState.open;\n  var slots = {\n    root: ['root', open && 'expanded'],\n    listbox: ['listbox', open && 'expanded']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuUtilityClass));\n}\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [Menu API](https://mui.com/base-ui/react-menu/components-api/#menu)\n */\n\n\nvar Menu =\n/*#__PURE__*/\nReact.forwardRef(function Menu(props, forwardedRef) {\n  var _slots$root, _slots$listbox;\n\n  var actions = props.actions,\n      anchorProp = props.anchor,\n      children = props.children,\n      onItemsChange = props.onItemsChange,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useMenu = useMenu({\n    onItemsChange: onItemsChange,\n    componentName: 'Menu'\n  }),\n      contextValue = _useMenu.contextValue,\n      getListboxProps = _useMenu.getListboxProps,\n      dispatch = _useMenu.dispatch,\n      open = _useMenu.open,\n      triggerElement = _useMenu.triggerElement;\n\n  var anchor = anchorProp != null ? anchorProp : triggerElement;\n  React.useImperativeHandle(actions, function () {\n    return {\n      dispatch: dispatch,\n      resetHighlight: function resetHighlight() {\n        return dispatch({\n          type: ListActionTypes.resetHighlight,\n          event: null\n        });\n      }\n    };\n  }, [dispatch]);\n\n  var ownerState = _extends({}, props, {\n    open: open\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var Root = (_slots$root = slots.root) != null ? _slots$root : 'div';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef,\n      role: undefined\n    },\n    className: classes.root,\n    ownerState: ownerState\n  });\n  var Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';\n  var listboxProps = useSlotProps({\n    elementType: Listbox,\n    getSlotProps: getListboxProps,\n    externalSlotProps: slotProps.listbox,\n    className: classes.listbox,\n    ownerState: ownerState\n  });\n\n  if (open === true && anchor == null) {\n    return (\n      /*#__PURE__*/\n      _jsx(Root, _extends({}, rootProps, {\n        children:\n        /*#__PURE__*/\n        _jsx(Listbox, _extends({}, listboxProps, {\n          children:\n          /*#__PURE__*/\n          _jsx(MenuProvider, {\n            value: contextValue,\n            children: children\n          })\n        }))\n      }))\n    );\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsx(Popup, _extends({\n      keepMounted: true\n    }, rootProps, {\n      open: open,\n      anchor: anchor,\n      slots: {\n        root: Root\n      },\n      children:\n      /*#__PURE__*/\n      _jsx(Listbox, _extends({}, listboxProps, {\n        children:\n        /*#__PURE__*/\n        _jsx(MenuProvider, {\n          value: contextValue,\n          children: children\n        })\n      }))\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * A ref with imperative actions that can be performed on the menu.\n   */\n  actions: refType,\n\n  /**\n   * The element based on which the menu is positioned.\n   */\n  anchor: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Function called when the items displayed in the menu change.\n   */\n  onItemsChange: PropTypes.func,\n\n  /**\n   * The props used for each slot inside the Menu.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Menu.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Menu };","map":null,"metadata":{},"sourceType":"module"}