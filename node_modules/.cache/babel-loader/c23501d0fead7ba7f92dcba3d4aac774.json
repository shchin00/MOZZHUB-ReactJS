{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\n\nexport function useRootElementName(parameters) {\n  var _parameters$rootEleme = parameters.rootElementName,\n      rootElementNameProp = _parameters$rootEleme === void 0 ? '' : _parameters$rootEleme,\n      componentName = parameters.componentName;\n\n  var _React$useState = React.useState(rootElementNameProp.toUpperCase()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rootElementName = _React$useState2[0],\n      setRootElementName = _React$useState2[1];\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {\n        console.error(\"useRootElementName: the `rootElementName` prop of \".concat(componentName ? \"the \".concat(componentName, \" component\") : 'a component', \" expected the '\").concat(rootElementNameProp, \"' element, but a '\").concat(rootElementName.toLowerCase(), \"' was rendered instead\"), 'This may cause hydration issues in an SSR context, for example in a Next.js app');\n      }\n    }, [rootElementNameProp, rootElementName, componentName]);\n  }\n\n  var updateRootElementName = React.useCallback(function (instance) {\n    var _instance$tagName;\n\n    setRootElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');\n  }, []);\n  return [rootElementName, updateRootElementName];\n}","map":null,"metadata":{},"sourceType":"module"}