{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\interactiveMap.js\";\n// import React, {useState} from 'react';\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\n// import { Button } from 'semantic-ui-react';\n// const dummyRanking = [\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\n// ];\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\n// // async function fetchData() {\n// //     try {\n// //         const response = await fetch(url);\n// //         if (!response.ok) {\n// //             throw new Error('Network response was not ok ' + response.statusText);\n// //         }\n// //         const data = await response.json();\n// //         data.forEach(item => {\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\n// //         });\n// //     } catch (error) {\n// //         console.error('There was a problem with the fetch operation:', error);\n// //     }\n// // }\n// // fetchData();\n// const interactiveMap = () => {\n//     const lat = 1.462251; // Initial map center latitude\n//     const lng = 110.413307; // Initial map center longitude\n//     const[hideLine, setHideLine] = useState(false)\n//     const handleClick = ()=>{\n//         setHideLine(!hideLine);\n//     }\n//     const controlPoints = []; // Array to store control points for curves\n//     // Calculate control points\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\n//         const controlPoint = [\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\n//         ];\n//         controlPoints.push(controlPoint);\n//     }\n//     return (\n//         <div>\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\n//             <TileLayer\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 maxZoom={16}\n//                 minZoom={2}\n//             />\n//             {dummyRanking.map((elem, i) => {\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\n//                 var a = dummyRanking[i].ranking * 0.9;\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\n//                 return (\n//                     <Circle\n//                         key={i}\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\n//                         color='red' \n//                         fillColor={rgb}\n//                         fillOpacity={a}\n//                         radius={50}\n//                         onClick={handleClick}\n//                         >\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\n//                     </Circle>\n//                 )\n//             })}\n//             {/* Render curved lines between circles */}\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\n//                 <Polyline\n//                     key={i}\n//                     positions={[\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\n//                         controlPoint, // Control point\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\n//                     ]}\n//                     color=\"blue\"\n//                 />\n//             ))}\n//         </Map>\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\n//             </div>\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\n//         </div>\n//             </div>\n//         </div>\n//     )\n// }\n// export default interactiveMap;\nimport React, { useState, useEffect } from 'react';\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\nimport { Button } from 'semantic-ui-react';\n\nvar interactiveMap = function interactiveMap() {\n  var lat = 1.462251; // Initial map center latitude\n\n  var lng = 110.413307; // Initial map center longitude\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hideLine = _useState2[0],\n      setHideLine = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    var url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\n\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, _data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error('Network response was not ok ' + response.statusText);\n\n              case 6:\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                _data = _context.sent;\n                setData(_data); // Store the fetched data in state\n\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.error('There was a problem with the fetch operation:', _context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []); // Empty dependency array to run the effect only once\n\n  var handleClick = function handleClick() {\n    setHideLine(!hideLine);\n  };\n\n  var controlPoints = []; // Array to store control points for curves\n  // Calculate control points\n\n  for (var _i = 0; _i < data.length - 1; _i++) {\n    var p1 = [data[_i].lat, data[_i].lng];\n    var p2 = [data[_i + 1].lat, data[_i + 1].lng];\n    var controlPoint = [(p1[0] + p2[0]) / 2, // Midpoint of latitudes\n    (p1[1] + p2[1]) / 2];\n    controlPoints.push(controlPoint);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Map, {\n    center: [lat, lng],\n    zoom: 13,\n    style: {\n      width: '100%',\n      height: '620px',\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    maxZoom: 16,\n    minZoom: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), data.map(function (elem, i) {\n    var l = (0.9 - data[i].ranking * 0.9) * 255;\n    var h = (0.9 - data[i].ranking * 0.9) * 240;\n    var a = data[i].ranking * 0.9;\n    var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\n    return React.createElement(Circle, {\n      key: i,\n      center: {\n        lat: data[i].lat,\n        lng: data[i].lng\n      },\n      color: \"red\",\n      fillColor: rgb,\n      fillOpacity: a,\n      radius: 50,\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Ranking:#\", i + 1), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Case ID: \")));\n  }), !hideLine && data.length > 1 && controlPoints.map(function (controlPoint, i) {\n    return React.createElement(Polyline, {\n      key: i,\n      positions: [[data[i].lat, data[i].lng], // Start point\n      controlPoint, // Control point\n      [data[i + 1].lat, data[i + 1].lng]],\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginLeft: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      margin: \"2px\",\n      border: \"2px solid black\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      margin: \"2px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Map Legend:\"), React.createElement(\"p\", {\n    style: {\n      margin: \"2px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, \"Circle: Data points\"), React.createElement(\"p\", {\n    style: {\n      margin: \"2px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Case ID: \", data[i].Case_id)), React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      right: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Close\"))));\n};\n\nexport default interactiveMap;","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\interactiveMap.js"],"names":["React","useState","useEffect","Map","TileLayer","Tooltip","Circle","Polyline","Button","interactiveMap","lat","lng","hideLine","setHideLine","data","setData","url","fetchData","fetch","response","ok","Error","statusText","json","console","error","handleClick","controlPoints","i","length","p1","p2","controlPoint","push","width","height","margin","map","elem","l","ranking","h","a","rgb","display","flexDirection","marginLeft","border","Case_id","position","right","marginTop"],"mappings":"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","sourcesContent":["// import React, {useState} from 'react';\r\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\n// import { Button } from 'semantic-ui-react';\r\n\r\n// const dummyRanking = [\r\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\r\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\r\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\r\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\r\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\r\n// ];\r\n\r\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\r\n\r\n// // async function fetchData() {\r\n// //     try {\r\n// //         const response = await fetch(url);\r\n// //         if (!response.ok) {\r\n// //             throw new Error('Network response was not ok ' + response.statusText);\r\n// //         }\r\n// //         const data = await response.json();\r\n\r\n// //         data.forEach(item => {\r\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\r\n// //         });\r\n// //     } catch (error) {\r\n// //         console.error('There was a problem with the fetch operation:', error);\r\n// //     }\r\n// // }\r\n\r\n// // fetchData();\r\n\r\n\r\n// const interactiveMap = () => {\r\n//     const lat = 1.462251; // Initial map center latitude\r\n//     const lng = 110.413307; // Initial map center longitude\r\n\r\n//     const[hideLine, setHideLine] = useState(false)\r\n\r\n//     const handleClick = ()=>{\r\n//         setHideLine(!hideLine);\r\n//     }\r\n\r\n//     const controlPoints = []; // Array to store control points for curves\r\n\r\n//     // Calculate control points\r\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\r\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\r\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\r\n\r\n//         const controlPoint = [\r\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\r\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\r\n//         ];\r\n\r\n//         controlPoints.push(controlPoint);\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\r\n//             <TileLayer\r\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 maxZoom={16}\r\n//                 minZoom={2}\r\n//             />\r\n//             {dummyRanking.map((elem, i) => {\r\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\r\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\r\n//                 var a = dummyRanking[i].ranking * 0.9;\r\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\r\n//                 return (\r\n//                     <Circle\r\n//                         key={i}\r\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\r\n//                         color='red' \r\n//                         fillColor={rgb}\r\n//                         fillOpacity={a}\r\n//                         radius={50}\r\n//                         onClick={handleClick}\r\n//                         >\r\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\r\n//                     </Circle>\r\n//                 )\r\n//             })}\r\n//             {/* Render curved lines between circles */}\r\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\r\n//                 <Polyline\r\n//                     key={i}\r\n//                     positions={[\r\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\r\n//                         controlPoint, // Control point\r\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\r\n//                     ]}\r\n//                     color=\"blue\"\r\n//                 />\r\n//             ))}\r\n//         </Map>\r\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\r\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\r\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\r\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\r\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\r\n//             </div>\r\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\r\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\r\n//         </div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default interactiveMap;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst interactiveMap = () => {\r\n    const lat = 1.462251; // Initial map center latitude\r\n    const lng = 110.413307; // Initial map center longitude\r\n\r\n    const [hideLine, setHideLine] = useState(false);\r\n    const [data, setData] = useState([]);\r\n\r\n    \r\nuseEffect(() => {\r\n    const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\r\n\r\n    async function fetchData() {\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok ' + response.statusText);\r\n            }\r\n            const data = await response.json();\r\n            setData(data); // Store the fetched data in state\r\n        } catch (error) {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n        }\r\n    }\r\n\r\n    fetchData();\r\n}, []); // Empty dependency array to run the effect only once\r\n\r\n\r\n    const handleClick = () => {\r\n        setHideLine(!hideLine);\r\n    }\r\n\r\n    const controlPoints = []; // Array to store control points for curves\r\n\r\n    // Calculate control points\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n        const p1 = [data[i].lat, data[i].lng];\r\n        const p2 = [data[i + 1].lat, data[i + 1].lng];\r\n\r\n        const controlPoint = [\r\n            (p1[0] + p2[0]) / 2, // Midpoint of latitudes\r\n            (p1[1] + p2[1]) / 2, // Midpoint of longitudes\r\n        ];\r\n\r\n        controlPoints.push(controlPoint);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\r\n                <TileLayer\r\n                    attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    maxZoom={16}\r\n                    minZoom={2}\r\n                />\r\n                {data.map((elem, i) => {\r\n                    var l = (0.9 - data[i].ranking * 0.9) * 255;\r\n                    var h = (0.9 - data[i].ranking * 0.9) * 240;\r\n                    var a = data[i].ranking * 0.9;\r\n                    var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\r\n                    return (\r\n                        <Circle\r\n                            key={i}\r\n                            center={{ lat: data[i].lat, lng: data[i].lng }}\r\n                            color='red'\r\n                            fillColor={rgb}\r\n                            fillOpacity={a}\r\n                            radius={50}\r\n                            onClick={handleClick}\r\n                        >\r\n                            <Tooltip>\r\n                                <h3>Ranking:#{i + 1}</h3>\r\n                                <h3>Case ID: </h3>\r\n                            </Tooltip>\r\n                        </Circle>\r\n                    )\r\n                })}\r\n                {/* Render curved lines between circles */}\r\n                {!hideLine && data.length > 1 && controlPoints.map((controlPoint, i) => (\r\n                    <Polyline\r\n                        key={i}\r\n                        positions={[\r\n                            [data[i].lat, data[i].lng], // Start point\r\n                            controlPoint, // Control point\r\n                            [data[i + 1].lat, data[i + 1].lng], // End point\r\n                        ]}\r\n                        color=\"blue\"\r\n                    />\r\n                ))}\r\n            </Map>\r\n            <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\r\n                <div style={{ margin: \"2px\", border: \"2px solid black\" }}>\r\n                    <p style={{ margin: \"2px\" }}>Map Legend:</p>\r\n                    <p style={{ margin: \"2px\" }}>Circle: Data points</p>\r\n                    <p style={{ margin: \"2px\" }}>Case ID: {data[i].Case_id}</p>\r\n                </div>\r\n                <div style={{ position: \"absolute\", right: \"10px\" }}>\r\n                    <Button style={{ marginTop: \"10px\" }}>Close</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default interactiveMap;\r\n\r\n"]},"metadata":{},"sourceType":"module"}