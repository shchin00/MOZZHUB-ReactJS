{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"anchor\", \"children\", \"container\", \"disablePortal\", \"keepMounted\", \"middleware\", \"offset\", \"open\", \"placement\", \"slotProps\", \"slots\", \"strategy\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { autoUpdate, flip, offset, shift, useFloating } from '@floating-ui/react-dom';\nimport { HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { Portal } from '../Portal';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getPopupUtilityClass } from './popupClasses';\nimport { useTransitionTrigger, TransitionContext } from '../useTransition';\nimport { PopupContext } from './PopupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useUtilityClasses(ownerState) {\n  var open = ownerState.open;\n  var slots = {\n    root: ['root', open && 'open']\n  };\n  return composeClasses(slots, useClassNamesOverride(getPopupUtilityClass));\n}\n\nfunction resolveAnchor(anchor) {\n  return typeof anchor === 'function' ? anchor() : anchor;\n}\n/**\n *\n * Demos:\n *\n * - [Popup](https://mui.com/base-ui/react-popup/)\n *\n * API:\n *\n * - [Popup API](https://mui.com/base-ui/react-popup/components-api/#popup)\n */\n\n\nvar Popup =\n/*#__PURE__*/\nReact.forwardRef(function Popup(props, forwardedRef) {\n  var _slots$root;\n\n  var anchorProp = props.anchor,\n      children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      _props$keepMounted = props.keepMounted,\n      keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,\n      middleware = props.middleware,\n      _props$offset = props.offset,\n      offsetProp = _props$offset === void 0 ? 0 : _props$offset,\n      _props$open = props.open,\n      open = _props$open === void 0 ? false : _props$open,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottom' : _props$placement,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      _props$strategy = props.strategy,\n      strategy = _props$strategy === void 0 ? 'absolute' : _props$strategy,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useFloating = useFloating({\n    elements: {\n      reference: resolveAnchor(anchorProp)\n    },\n    open: open,\n    middleware: middleware != null ? middleware : [offset(offsetProp != null ? offsetProp : 0), flip(), shift()],\n    placement: placement,\n    strategy: strategy,\n    whileElementsMounted: !keepMounted ? autoUpdate : undefined\n  }),\n      refs = _useFloating.refs,\n      elements = _useFloating.elements,\n      floatingStyles = _useFloating.floatingStyles,\n      update = _useFloating.update,\n      finalPlacement = _useFloating.placement;\n\n  var handleRef = useForkRef(refs.setFloating, forwardedRef);\n  useEnhancedEffect(function () {\n    if (keepMounted && open && elements.reference && elements.floating) {\n      var cleanup = autoUpdate(elements.reference, elements.floating, update);\n      return cleanup;\n    }\n\n    return undefined;\n  }, [keepMounted, open, elements, update]);\n\n  var ownerState = _extends({}, props, {\n    disablePortal: disablePortal,\n    keepMounted: keepMounted,\n    offset: offset,\n    open: open,\n    placement: placement,\n    finalPlacement: finalPlacement,\n    strategy: strategy\n  });\n\n  var _useTransitionTrigger = useTransitionTrigger(open),\n      contextValue = _useTransitionTrigger.contextValue,\n      hasTransitionExited = _useTransitionTrigger.hasExited;\n\n  var visibility = keepMounted && hasTransitionExited ? 'hidden' : undefined;\n  var classes = useUtilityClasses(ownerState);\n  var Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : 'div';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    ownerState: ownerState,\n    className: classes.root,\n    additionalProps: {\n      ref: handleRef,\n      role: 'tooltip',\n      style: _extends({}, floatingStyles, {\n        visibility: visibility\n      })\n    }\n  });\n  var popupContextValue = React.useMemo(function () {\n    return {\n      placement: finalPlacement\n    };\n  }, [finalPlacement]);\n  var shouldRender = keepMounted || !hasTransitionExited;\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsx(Portal, {\n      disablePortal: disablePortal,\n      container: container,\n      children:\n      /*#__PURE__*/\n      _jsx(PopupContext.Provider, {\n        value: popupContextValue,\n        children:\n        /*#__PURE__*/\n        _jsx(TransitionContext.Provider, {\n          value: contextValue,\n          children:\n          /*#__PURE__*/\n          _jsx(Root, _extends({}, rootProps, {\n            children: children\n          }))\n        })\n      })\n    })\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Popup.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),\n   * or a function that returns either.\n   * It's used to set the position of the popup.\n   */\n  anchor: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.object, PropTypes.func]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * An HTML element or function that returns one. The container will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true`, the popup will be rendered where it is defined, without the use of portals.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will exist in the DOM even if it's closed.\n   * Its visibility will be controlled by the `visibility` CSS property.\n   *\n   * Otherwise, a closed popup will be removed from the DOM.\n   *\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * Collection of Floating UI middleware to use when positioning the popup.\n   * If not provided, the [`offset`](https://floating-ui.com/docs/offset)\n   * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.\n   *\n   * @see https://floating-ui.com/docs/computePosition#middleware\n   */\n  middleware: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.shape({\n    fn: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    options: PropTypes.any\n  })])),\n\n  /**\n   * Distance between a popup and the trigger element.\n   * This prop is ignored when custom `middleware` is provided.\n   *\n   * @default 0\n   * @see https://floating-ui.com/docs/offset\n   */\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.shape({\n    alignmentAxis: PropTypes.number,\n    crossAxis: PropTypes.number,\n    mainAxis: PropTypes.number\n  })]),\n\n  /**\n   * If `true`, the popup is visible.\n   *\n   * @default false\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Determines where to place the popup relative to the trigger element.\n   *\n   * @default 'bottom'\n   * @see https://floating-ui.com/docs/computePosition#placement\n   */\n  placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n\n  /**\n   * The props used for each slot inside the Popup.\n   *\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Popup.\n   * Either a string to use a HTML element or a component.\n   *\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The type of CSS position property to use (absolute or fixed).\n   *\n   * @default 'absolute'\n   * @see https://floating-ui.com/docs/computePosition#strategy\n   */\n  strategy: PropTypes.oneOf(['absolute', 'fixed'])\n} : void 0;\nexport { Popup };","map":null,"metadata":{},"sourceType":"module"}