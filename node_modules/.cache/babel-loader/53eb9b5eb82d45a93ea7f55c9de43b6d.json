{"ast":null,"code":"import _objectSpread from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\n/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\nvar sides = ['top', 'right', 'bottom', 'left'];\nvar alignments = ['start', 'end'];\nvar placements =\n/*#__PURE__*/\nsides.reduce(function (acc, side) {\n  return acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]);\n}, []);\nvar min = Math.min;\nvar max = Math.max;\nvar round = Math.round;\nvar floor = Math.floor;\n\nvar createCoords = function createCoords(v) {\n  return {\n    x: v,\n    y: v\n  };\n};\n\nvar oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nvar oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\n\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\n\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  var alignment = getAlignment(placement);\n  var alignmentAxis = getAlignmentAxis(placement);\n  var length = getAxisLength(alignmentAxis);\n  var mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\n\nfunction getExpandedPlacements(placement) {\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, function (alignment) {\n    return oppositeAlignmentMap[alignment];\n  });\n}\n\nfunction getSideList(side, isStart, rtl) {\n  var lr = ['left', 'right'];\n  var rl = ['right', 'left'];\n  var tb = ['top', 'bottom'];\n  var bt = ['bottom', 'top'];\n\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n\n    default:\n      return [];\n  }\n}\n\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  var alignment = getAlignment(placement);\n  var list = getSideList(getSide(placement), direction === 'start', rtl);\n\n  if (alignment) {\n    list = list.map(function (side) {\n      return side + \"-\" + alignment;\n    });\n\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n\n  return list;\n}\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (side) {\n    return oppositeSideMap[side];\n  });\n}\n\nfunction expandPaddingObject(padding) {\n  return _objectSpread({\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }, padding);\n}\n\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  var x = rect.x,\n      y = rect.y,\n      width = rect.width,\n      height = rect.height;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x: x,\n    y: y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };","map":null,"metadata":{},"sourceType":"module"}