{"ast":null,"code":"import _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\Dashboard.js\";\nimport React from 'react';\nimport MenuBar from './MenuBar';\nimport Heatmap from './Heatmap';\nimport BarChart from './BarChart';\nimport Footer from './Footer';\nimport { push } from 'react-router-redux';\nimport { connect } from 'react-redux';\nimport config from '../config';\nimport { Table, Grid, Divider, Segment, Statistic, List, Loader, Dimmer } from 'semantic-ui-react';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.handleDate = function (event, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n\n      if (_this.state.hasOwnProperty(name)) {\n        _this.setState(_defineProperty({}, name, value));\n      }\n    };\n\n    _this.state = {\n      wait: false,\n      dateGen: '',\n      ranking2: [],\n      center: '',\n      monthData: [],\n      barLabel: [],\n      barData: [],\n      sub_loc: '',\n      total_case: '',\n      update_date: '',\n      user: ''\n    };\n    _this.handleDate = _this.handleDate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var user = this.props.user; //console.log(user.area)\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          ranking = _this$props.ranking; //console.log(ranking)\n\n      var auth_token = sessionStorage.getItem('token');\n      var user = sessionStorage.getItem('user');\n      var area = sessionStorage.getItem('area');\n      var level = sessionStorage.getItem('level');\n\n      if (auth_token) {\n        if (level == 1) {\n          var url2 = \"\".concat(config.url, \"/monthData\");\n          var url3 = \"\".concat(config.url, \"/ranking/\") + area;\n\n          try {\n            fetch(url3).then(function (res) {\n              return res.json();\n            }) //.then(data => console.log(data))\n            .then(function (result) {\n              return _this2.setState({\n                wait: false,\n                ranking2: JSON.parse(result.data[0].ranking),\n                update_date: result.data[0].gen_Date.split(' ')[0],\n                sub_loc: result.sub_loc,\n                total_case: result.num_case\n              });\n            });\n          } catch (err) {\n            console.log(err);\n            this.setState({\n              wait: false\n            });\n          }\n\n          try {\n            fetch(url2).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return _this2.setState({\n                barLabel: data[0],\n                barData: data[1]\n              });\n            });\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      } else {\n        sessionStorage.setItem('lat', 3.14056039883967);\n        sessionStorage.setItem('lng', 101.59909644810003);\n        dispatch(push('/login'));\n      }\n    }\n  }, {\n    key: \"createList\",\n    value: function createList() {\n      var ranking = this.state.ranking2;\n      var sub_loc = this.state.sub_loc;\n      return ranking.map(function (el, i) {\n        return React.createElement(Table, {\n          inverted: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Table.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"#\", i + 1), React.createElement(List, {\n          bulleted: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, sub_loc[i].sub_loc_name.map(function (el, j) {\n          return React.createElement(List.Item, {\n            key: j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, sub_loc[i].sub_loc_name[j]);\n        }))))));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var divStyle = {\n        backgroundColor: 'red',\n        height: '100vh'\n      };\n      var area = sessionStorage.getItem('area');\n      var lat = sessionStorage.getItem('lat');\n      var lng = sessionStorage.getItem('lng');\n\n      if (lat == null && lng == null) {\n        lat = 3.14056039883967;\n        lng = 101.59909644810003;\n      }\n\n      return React.createElement(\"div\", {\n        style: divStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(MenuBar, {\n        activeItem: \"dashboard\",\n        name: this.props.user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        stackable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: this.state.wait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        active: this.state.wait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Preparing Data\")), React.createElement(Grid.Row, {\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        textAlign: \"left\",\n        width: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        style: {\n          height: 60,\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, area)), React.createElement(Segment, {\n        inverted: true,\n        style: {\n          overflow: 'auto',\n          maxHeight: 530\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \" Source of Infection \"), this.createList()), React.createElement(Segment, {\n        style: {\n          height: 100,\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Statistic, {\n        color: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, this.state.total_case), React.createElement(Statistic.Label, {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Total Cases\"))), React.createElement(Segment, {\n        style: {\n          height: 90,\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Statistic, {\n        color: \"green\",\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.state.update_date), React.createElement(Statistic.Label, {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Last Updated On\"))), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Heatmap, {\n        lat: lat,\n        lng: lng,\n        ranking: this.state.ranking2,\n        height: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nvar mapState = function mapState(state) {\n  return {\n    user: state.user\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    dispatch: dispatch,\n    getNodes: dispatch.nodes.getNodes()\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Dashboard);","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\Dashboard.js"],"names":["React","MenuBar","Heatmap","BarChart","Footer","push","connect","config","Table","Grid","Divider","Segment","Statistic","List","Loader","Dimmer","Dashboard","props","handleDate","event","name","value","state","hasOwnProperty","setState","wait","dateGen","ranking2","center","monthData","barLabel","barData","sub_loc","total_case","update_date","user","bind","dispatch","ranking","auth_token","sessionStorage","getItem","area","level","url2","url","url3","fetch","then","res","json","result","JSON","parse","data","gen_Date","split","num_case","err","console","log","setItem","map","el","i","sub_loc_name","j","divStyle","backgroundColor","height","lat","lng","textAlign","overflow","maxHeight","createList","color","Component","mapState","mapDispatch","getNodes","nodes"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MenuBar from './MenuBar'\r\nimport Heatmap from './Heatmap'\r\nimport BarChart from './BarChart'\r\nimport Footer from './Footer'\r\nimport { push } from 'react-router-redux'\r\nimport { connect } from 'react-redux'\r\nimport config from '../config'\r\nimport {Table,Grid,Divider, Segment,Statistic,List,Loader,Dimmer} from 'semantic-ui-react'\r\nclass Dashboard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            wait:false,\r\n            dateGen:'',\r\n            ranking2:[],\r\n            center:'',\r\n            monthData:[],\r\n            barLabel:[],\r\n            barData:[],\r\n            sub_loc:'',\r\n            total_case:'',\r\n            update_date:'',\r\n            user:''\r\n        };\r\n        this.handleDate = this.handleDate.bind(this)\r\n    }\r\n    componentWillMount(){\r\n        const {user} = this.props\r\n        //console.log(user.area)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { dispatch, ranking } = this.props\r\n        //console.log(ranking)\r\n        const auth_token = sessionStorage.getItem('token');\r\n        const user = sessionStorage.getItem('user');\r\n        const area = sessionStorage.getItem('area');\r\n        const level = sessionStorage.getItem('level');\r\n        if (auth_token) {\r\n            if(level==1){\r\n                let url2 = `${config.url}/monthData`\r\n                let url3 = `${config.url}/ranking/`+area\r\n                try{\r\n                    fetch(url3)\r\n                    .then(res=>res.json())\r\n                    //.then(data => console.log(data))\r\n                    .then(result => this.setState({\r\n                        wait:false,\r\n                        ranking2:JSON.parse(result.data[0].ranking),\r\n                        update_date:(result.data[0].gen_Date).split(' ')[0],\r\n                        sub_loc:result.sub_loc,\r\n                        total_case:result.num_case,\r\n                        })\r\n                    )\r\n                }\r\n                catch(err){\r\n                    console.log(err)\r\n                    this.setState({\r\n                        wait:false\r\n                    })\r\n                }\r\n                try{\r\n                    fetch(url2)\r\n                    .then(res => res.json())\r\n                    .then(data => this.setState({barLabel:data[0],barData:data[1]}))\r\n                }\r\n                catch(err){\r\n                    console.log(err)\r\n                }\r\n            }\r\n        } \r\n        else {\r\n            sessionStorage.setItem('lat',3.14056039883967)\r\n            sessionStorage.setItem('lng',101.59909644810003)\r\n            dispatch(push('/login'))\r\n        }\r\n\r\n    }\r\n\r\n    handleDate = (event, {name, value}) => {\r\n        if (this.state.hasOwnProperty(name)) {\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n\r\n    createList(){\r\n        var ranking =this.state.ranking2\r\n        var sub_loc = this.state.sub_loc\r\n        return ranking.map((el,i) => (\r\n            <Table inverted>\r\n                <Table.Body>\r\n                    <Table.Row key={i}>\r\n                    <Table.Cell>\r\n                        <h3>#{i+1}</h3>\r\n                        <List bulleted>\r\n                                { sub_loc[i].sub_loc_name.map((el,j)=>\r\n                                    <List.Item key ={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\r\n                        </List>\r\n                    </Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n        ))}\r\n\r\n    render(){\r\n        const divStyle ={\r\n            backgroundColor : 'red',\r\n            height: '100vh'\r\n        }\r\n        const area = sessionStorage.getItem('area');\r\n        var lat = sessionStorage.getItem('lat');\r\n        var lng = sessionStorage.getItem('lng');\r\n        if(lat==null&&lng==null){\r\n            lat = 3.14056039883967\r\n            lng = 101.59909644810003\r\n            \r\n        }\r\n        return(\r\n            <div style={divStyle}>\r\n                <MenuBar activeItem='dashboard' name={this.props.user.name}/>\r\n                <Grid stackable>\r\n                <Dimmer active={this.state.wait}>\r\n                                <Loader active={this.state.wait}>Preparing Data</Loader>\r\n                            </Dimmer>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column textAlign='left' width={3}>\r\n                            <Segment style={{height: 60,textAlign:'center' }} inverted><h1>{area}</h1></Segment>\r\n                            <Segment inverted style={{overflow: 'auto', maxHeight: 530 }}>\r\n                                <h2 style={{textAlign:'center' }}> Source of Infection </h2>\r\n                                {this.createList()}\r\n                            </Segment>\r\n                            <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n                                <Statistic color='orange'>\r\n                                    <Statistic.Value>{this.state.total_case}</Statistic.Value>\r\n                                    <Statistic.Label style={{color:'white'}}>Total Cases</Statistic.Label>\r\n                                </Statistic>\r\n                            </Segment>\r\n                            {/* <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n                                <Statistic color='orange'>\r\n                                    <Statistic.Value>10</Statistic.Value>\r\n                                    <Statistic.Label style={{color:'white'}}>Total Locations</Statistic.Label>\r\n                                </Statistic>\r\n                            </Segment> */}\r\n                            <Segment style={{height: 90,textAlign:'center' }} inverted>\r\n                                <Statistic color='green' size='small'>\r\n                                    <Statistic.Value>{this.state.update_date}</Statistic.Value>\r\n                                    <Statistic.Label style={{color:'white'}}>Last Updated On</Statistic.Label>\r\n                                </Statistic>\r\n                            </Segment>\r\n                            <Divider hidden/>\r\n                            <Grid.Row >\r\n                            </Grid.Row>\r\n                            \r\n                        </Grid.Column>\r\n                        <Grid.Column width={12}>\r\n                            <Grid.Row>\r\n                                {/* <h1>Dengue Source of Infection Heatmap</h1>\r\n                                <br/>\r\n                                    {<img\r\n                                    src={require('../img/indicator.png')}\r\n                                    alt='indicator of the heatmap color'\r\n                                    width={400}\r\n                                    />\r\n                                    } */}\r\n                                    <Heatmap lat = {lat} lng={lng} ranking={this.state.ranking2} height=''/>\r\n                            </Grid.Row>\r\n                            <Divider hidden/>\r\n                            <Grid.Row>\r\n                            {/* <Grid>\r\n                                <Grid.Row centered columns={2}>\r\n                                    <Grid.Column>\r\n                                        <Segment inverted color='black'>\r\n                                            <BarChart\r\n                                                data={this.state.barData}\r\n                                                labels={this.state.barLabel}\r\n                                                label='Case Number'\r\n                                            />\r\n                                        </Segment>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid> */}\r\n                            </Grid.Row>\r\n                            <Divider hidden />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapState = state => ({\r\n    user: state.user\r\n})\r\n\r\nconst mapDispatch = dispatch => ({\r\n    dispatch,\r\n    getNodes: dispatch.nodes.getNodes()\r\n\r\n})\r\nexport default connect(mapState,mapDispatch)(Dashboard)"]},"metadata":{},"sourceType":"module"}