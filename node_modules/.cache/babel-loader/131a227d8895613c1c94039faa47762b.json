{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\n\nexport function useTransitionTrigger(requestEnter) {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      exitTransitionFinished = _React$useState2[0],\n      setExitTransitionFinished = _React$useState2[1];\n\n  var hasPendingExitTransition = React.useRef(false);\n  var registeredTransitions = React.useRef(0);\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasTransition = _React$useState4[0],\n      setHasTransition = _React$useState4[1];\n\n  var previousRequestEnter = React.useRef(requestEnter);\n  React.useEffect(function () {\n    if (!requestEnter && // checking registeredTransitions.current instead of hasTransition to avoid this effect re-firing whenever hasTransition changes\n    registeredTransitions.current > 0 && // prevents waiting for a pending transition right after mounting\n    previousRequestEnter.current !== requestEnter) {\n      hasPendingExitTransition.current = true;\n      setExitTransitionFinished(false);\n    }\n\n    previousRequestEnter.current = requestEnter;\n  }, [requestEnter]);\n  var handleExited = React.useCallback(function () {\n    hasPendingExitTransition.current = false;\n    setExitTransitionFinished(true);\n  }, []);\n  var registerTransition = React.useCallback(function () {\n    registeredTransitions.current += 1;\n    setHasTransition(true);\n    return function () {\n      registeredTransitions.current -= 1;\n\n      if (registeredTransitions.current === 0) {\n        setHasTransition(false);\n      }\n    };\n  }, []);\n  var hasExited;\n\n  if (!hasTransition) {\n    // If there are no transitions registered, the `exited` state is opposite of `requestEnter` immediately.\n    hasExited = !requestEnter;\n  } else if (requestEnter) {\n    hasExited = false;\n  } else {\n    hasExited = !hasPendingExitTransition.current && exitTransitionFinished;\n  }\n\n  var contextValue = React.useMemo(function () {\n    return {\n      requestedEnter: requestEnter,\n      onExited: handleExited,\n      registerTransition: registerTransition,\n      hasExited: hasExited\n    };\n  }, [handleExited, requestEnter, registerTransition, hasExited]);\n  return {\n    contextValue: contextValue,\n    hasExited: hasExited\n  };\n}","map":null,"metadata":{},"sourceType":"module"}