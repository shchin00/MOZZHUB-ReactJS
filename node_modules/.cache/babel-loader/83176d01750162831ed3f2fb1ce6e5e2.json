{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { ListActionTypes } from './listActions.types';\nimport { ListContext } from './ListContext';\n/**\n * Contains the logic for an item of a list-like component (for example Select, Menu, etc.).\n * It handles the item's mouse events and tab index.\n *\n * @template ItemValue The type of the item's value. This should be consistent with the type of useList's `items` parameter.\n * @ignore - internal hook.\n */\n\nexport function useListItem(parameters) {\n  var _parameters$handlePoi = parameters.handlePointerOverEvents,\n      handlePointerOverEvents = _parameters$handlePoi === void 0 ? false : _parameters$handlePoi,\n      item = parameters.item;\n  var listContext = React.useContext(ListContext);\n\n  if (!listContext) {\n    throw new Error('useListItem must be used within a ListProvider');\n  }\n\n  var dispatch = listContext.dispatch,\n      getItemState = listContext.getItemState;\n\n  var _getItemState = getItemState(item),\n      highlighted = _getItemState.highlighted,\n      selected = _getItemState.selected,\n      focusable = _getItemState.focusable;\n\n  var createHandleClick = React.useCallback(function (externalHandlers) {\n    return function (event) {\n      var _externalHandlers$onC;\n\n      (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (item === undefined) {\n          throw new Error(['MUI: The `item` provided to useListItem() is undefined.', 'This should happen only during server-side rendering under React 17.'].join('\\n'));\n        }\n      }\n\n      dispatch({\n        type: ListActionTypes.itemClick,\n        item: item,\n        event: event\n      });\n    };\n  }, [dispatch, item]);\n  var createHandlePointerOver = React.useCallback(function (externalHandlers) {\n    return function (event) {\n      var _externalHandlers$onM;\n\n      (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (item === undefined) {\n          throw new Error(['MUI: The `item` provided to useListItem() is undefined.', 'This should happen only during server-side rendering under React 17.'].join('\\n'));\n        }\n      }\n\n      dispatch({\n        type: ListActionTypes.itemHover,\n        item: item,\n        event: event\n      });\n    };\n  }, [dispatch, item]);\n  var tabIndex;\n\n  if (focusable) {\n    tabIndex = highlighted ? 0 : -1;\n  }\n\n  var getRootProps = function getRootProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalProps, {\n      onClick: createHandleClick(externalEventHandlers),\n      onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : undefined,\n      tabIndex: tabIndex\n    });\n  };\n\n  return {\n    getRootProps: getRootProps,\n    highlighted: highlighted,\n    selected: selected\n  };\n}","map":null,"metadata":{},"sourceType":"module"}