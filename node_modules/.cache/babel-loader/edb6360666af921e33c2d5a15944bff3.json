{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport sliderClasses from './sliderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar useValueLabelClasses = function useValueLabelClasses(props) {\n  var open = props.open;\n  var utilityClasses = {\n    offset: clsx(open && sliderClasses.valueLabelOpen),\n    circle: sliderClasses.valueLabelCircle,\n    label: sliderClasses.valueLabelLabel\n  };\n  return utilityClasses;\n};\n/**\n * @ignore - internal component.\n */\n\n\nexport default function SliderValueLabel(props) {\n  var children = props.children,\n      className = props.className,\n      value = props.value;\n  var classes = useValueLabelClasses(props);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React.cloneElement(children, {\n      className: clsx(children.props.className)\n    },\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [children.props.children,\n      /*#__PURE__*/\n      _jsx(\"span\", {\n        className: clsx(classes.offset, className),\n        \"aria-hidden\": true,\n        children:\n        /*#__PURE__*/\n        _jsx(\"span\", {\n          className: classes.circle,\n          children:\n          /*#__PURE__*/\n          _jsx(\"span\", {\n            className: classes.label,\n            children: value\n          })\n        })\n      })]\n    }))\n  );\n}\nprocess.env.NODE_ENV !== \"production\" ? SliderValueLabel.propTypes = {\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  value: PropTypes.node\n} : void 0;","map":null,"metadata":{},"sourceType":"module"}