{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"anchorOrigin\", \"className\", \"classes\", \"component\", \"components\", \"componentsProps\", \"children\", \"overlap\", \"color\", \"invisible\", \"max\", \"badgeContent\", \"slots\", \"slotProps\", \"showZero\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport usePreviousProps from '@mui/utils/usePreviousProps';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useBadge } from '@mui/base/useBadge';\nimport { useSlotProps } from '@mui/base/utils';\nimport { styled, createUseThemeProps } from '../zero-styled';\nimport capitalize from '../utils/capitalize';\nimport badgeClasses, { getBadgeUtilityClass } from './badgeClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RADIUS_STANDARD = 10;\nvar RADIUS_DOT = 4;\nvar useThemeProps = createUseThemeProps('MuiBadge');\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n      anchorOrigin = ownerState.anchorOrigin,\n      invisible = ownerState.invisible,\n      overlap = ownerState.overlap,\n      variant = ownerState.variant,\n      _ownerState$classes = ownerState.classes,\n      classes = _ownerState$classes === void 0 ? {} : _ownerState$classes;\n  var slots = {\n    root: ['root'],\n    badge: ['badge', variant, invisible && 'invisible', \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)), \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap)), \"overlap\".concat(capitalize(overlap)), color !== 'default' && \"color\".concat(capitalize(color))]\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nvar BadgeRoot = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  position: 'relative',\n  display: 'inline-flex',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  flexShrink: 0\n});\nvar BadgeBadge = styled('span', {\n  name: 'MuiBadge',\n  slot: 'Badge',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.badge, styles[ownerState.variant], styles[\"anchorOrigin\".concat(capitalize(ownerState.anchorOrigin.vertical)).concat(capitalize(ownerState.anchorOrigin.horizontal)).concat(capitalize(ownerState.overlap))], ownerState.color !== 'default' && styles[\"color\".concat(capitalize(ownerState.color))], ownerState.invisible && styles.invisible];\n  }\n})(function (_ref3) {\n  var theme = _ref3.theme;\n\n  var _theme$vars;\n\n  return {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS_STANDARD * 2,\n    lineHeight: 1,\n    padding: '0 6px',\n    height: RADIUS_STANDARD * 2,\n    borderRadius: RADIUS_STANDARD,\n    zIndex: 1,\n    // Render the badge on top of potential ripples.\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    variants: _toConsumableArray(Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter(function (key) {\n      var _theme$vars2, _theme$vars3;\n\n      return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;\n    }).map(function (color) {\n      return {\n        props: {\n          color: color\n        },\n        style: {\n          backgroundColor: (theme.vars || theme).palette[color].main,\n          color: (theme.vars || theme).palette[color].contrastText\n        }\n      };\n    })).concat([{\n      props: {\n        variant: 'dot'\n      },\n      style: {\n        borderRadius: RADIUS_DOT,\n        height: RADIUS_DOT * 2,\n        minWidth: RADIUS_DOT * 2,\n        padding: 0\n      }\n    }, {\n      props: function props(_ref4) {\n        var ownerState = _ref4.ownerState;\n        return ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular';\n      },\n      style: _defineProperty({\n        top: 0,\n        right: 0,\n        transform: 'scale(1) translate(50%, -50%)',\n        transformOrigin: '100% 0%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(50%, -50%)'\n      })\n    }, {\n      props: function props(_ref5) {\n        var ownerState = _ref5.ownerState;\n        return ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular';\n      },\n      style: _defineProperty({\n        bottom: 0,\n        right: 0,\n        transform: 'scale(1) translate(50%, 50%)',\n        transformOrigin: '100% 100%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(50%, 50%)'\n      })\n    }, {\n      props: function props(_ref6) {\n        var ownerState = _ref6.ownerState;\n        return ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular';\n      },\n      style: _defineProperty({\n        top: 0,\n        left: 0,\n        transform: 'scale(1) translate(-50%, -50%)',\n        transformOrigin: '0% 0%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(-50%, -50%)'\n      })\n    }, {\n      props: function props(_ref7) {\n        var ownerState = _ref7.ownerState;\n        return ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular';\n      },\n      style: _defineProperty({\n        bottom: 0,\n        left: 0,\n        transform: 'scale(1) translate(-50%, 50%)',\n        transformOrigin: '0% 100%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(-50%, 50%)'\n      })\n    }, {\n      props: function props(_ref8) {\n        var ownerState = _ref8.ownerState;\n        return ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular';\n      },\n      style: _defineProperty({\n        top: '14%',\n        right: '14%',\n        transform: 'scale(1) translate(50%, -50%)',\n        transformOrigin: '100% 0%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(50%, -50%)'\n      })\n    }, {\n      props: function props(_ref9) {\n        var ownerState = _ref9.ownerState;\n        return ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular';\n      },\n      style: _defineProperty({\n        bottom: '14%',\n        right: '14%',\n        transform: 'scale(1) translate(50%, 50%)',\n        transformOrigin: '100% 100%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(50%, 50%)'\n      })\n    }, {\n      props: function props(_ref10) {\n        var ownerState = _ref10.ownerState;\n        return ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular';\n      },\n      style: _defineProperty({\n        top: '14%',\n        left: '14%',\n        transform: 'scale(1) translate(-50%, -50%)',\n        transformOrigin: '0% 0%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(-50%, -50%)'\n      })\n    }, {\n      props: function props(_ref11) {\n        var ownerState = _ref11.ownerState;\n        return ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular';\n      },\n      style: _defineProperty({\n        bottom: '14%',\n        left: '14%',\n        transform: 'scale(1) translate(-50%, 50%)',\n        transformOrigin: '0% 100%'\n      }, \"&.\".concat(badgeClasses.invisible), {\n        transform: 'scale(0) translate(-50%, 50%)'\n      })\n    }, {\n      props: {\n        invisible: true\n      },\n      style: {\n        transition: theme.transitions.create('transform', {\n          easing: theme.transitions.easing.easeInOut,\n          duration: theme.transitions.duration.leavingScreen\n        })\n      }\n    }])\n  };\n});\nvar Badge =\n/*#__PURE__*/\nReact.forwardRef(function Badge(inProps, ref) {\n  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;\n\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiBadge'\n  });\n\n  var _props$anchorOrigin = props.anchorOrigin,\n      anchorOriginProp = _props$anchorOrigin === void 0 ? {\n    vertical: 'top',\n    horizontal: 'right'\n  } : _props$anchorOrigin,\n      className = props.className,\n      component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      children = props.children,\n      _props$overlap = props.overlap,\n      overlapProp = _props$overlap === void 0 ? 'rectangular' : _props$overlap,\n      _props$color = props.color,\n      colorProp = _props$color === void 0 ? 'default' : _props$color,\n      _props$invisible = props.invisible,\n      invisibleProp = _props$invisible === void 0 ? false : _props$invisible,\n      _props$max = props.max,\n      maxProp = _props$max === void 0 ? 99 : _props$max,\n      badgeContentProp = props.badgeContent,\n      slots = props.slots,\n      slotProps = props.slotProps,\n      _props$showZero = props.showZero,\n      showZero = _props$showZero === void 0 ? false : _props$showZero,\n      _props$variant = props.variant,\n      variantProp = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useBadge = useBadge({\n    max: maxProp,\n    invisible: invisibleProp,\n    badgeContent: badgeContentProp,\n    showZero: showZero\n  }),\n      badgeContent = _useBadge.badgeContent,\n      invisibleFromHook = _useBadge.invisible,\n      max = _useBadge.max,\n      displayValueFromHook = _useBadge.displayValue;\n\n  var prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    color: colorProp,\n    overlap: overlapProp,\n    variant: variantProp,\n    badgeContent: badgeContentProp\n  });\n  var invisible = invisibleFromHook || badgeContent == null && variantProp !== 'dot';\n\n  var _ref12 = invisible ? prevProps : props,\n      _ref12$color = _ref12.color,\n      color = _ref12$color === void 0 ? colorProp : _ref12$color,\n      _ref12$overlap = _ref12.overlap,\n      overlap = _ref12$overlap === void 0 ? overlapProp : _ref12$overlap,\n      _ref12$anchorOrigin = _ref12.anchorOrigin,\n      anchorOrigin = _ref12$anchorOrigin === void 0 ? anchorOriginProp : _ref12$anchorOrigin,\n      _ref12$variant = _ref12.variant,\n      variant = _ref12$variant === void 0 ? variantProp : _ref12$variant;\n\n  var displayValue = variant !== 'dot' ? displayValueFromHook : undefined;\n\n  var ownerState = _extends({}, props, {\n    badgeContent: badgeContent,\n    invisible: invisible,\n    max: max,\n    displayValue: displayValue,\n    showZero: showZero,\n    anchorOrigin: anchorOrigin,\n    color: color,\n    overlap: overlap,\n    variant: variant\n  });\n\n  var classes = useUtilityClasses(ownerState); // support both `slots` and `components` for backward compatibility\n\n  var RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;\n  var BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;\n  var rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;\n  var badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;\n  var rootProps = useSlotProps({\n    elementType: RootSlot,\n    externalSlotProps: rootSlotProps,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: ref,\n      as: component\n    },\n    ownerState: ownerState,\n    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)\n  });\n  var badgeProps = useSlotProps({\n    elementType: BadgeSlot,\n    externalSlotProps: badgeSlotProps,\n    ownerState: ownerState,\n    className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)\n  });\n  return (\n    /*#__PURE__*/\n    _jsxs(RootSlot, _extends({}, rootProps, {\n      children: [children,\n      /*#__PURE__*/\n      _jsx(BadgeSlot, _extends({}, badgeProps, {\n        children: displayValue\n      }))]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['dot', 'standard']), PropTypes.string])\n} : void 0;\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}