{"ast":null,"code":"// import React from 'react'\n// import MenuBar from './MenuBar'\n// import Heatmap from './Heatmap'\n// import BarChart from './BarChart'\n// import Footer from './Footer'\n// import { push } from 'react-router-redux'\n// import { connect } from 'react-redux'\n// import config from '../config'\n// import {Table,Grid,Divider, Segment,Statistic,List,Loader,Dimmer} from 'semantic-ui-react'\n// class Dashboard extends React.Component{\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             wait:false,\n//             dateGen:'',\n//             ranking2:[],\n//             center:'',\n//             monthData:[],\n//             barLabel:[],\n//             barData:[],\n//             sub_loc:'',\n//             total_case:'',\n//             update_date:'',\n//             user:''\n//         };\n//         this.handleDate = this.handleDate.bind(this)\n//     }\n//     componentWillMount(){\n//         const {user} = this.props\n//         //console.log(user.area)\n//     }\n//     componentDidMount() {\n//         const { dispatch, ranking } = this.props\n//         //console.log(ranking)\n//         const auth_token = sessionStorage.getItem('token');\n//         const user = sessionStorage.getItem('user');\n//         const area = sessionStorage.getItem('area');\n//         const level = sessionStorage.getItem('level');\n//         if (auth_token) {\n//             if(level==1){\n//                 let url2 = `${config.url}/monthData`\n//                 let url3 = `${config.url}/ranking/`+area\n//                 try{\n//                     fetch(url3)\n//                     .then(res=>res.json())\n//                     //.then(data => console.log(data))\n//                     .then(result => this.setState({\n//                         wait:false,\n//                         ranking2:JSON.parse(result.data[0].ranking),\n//                         update_date:(result.data[0].gen_Date).split(' ')[0],\n//                         sub_loc:result.sub_loc,\n//                         total_case:result.num_case,\n//                         })\n//                     )\n//                 }\n//                 catch(err){\n//                     console.log(err)\n//                     this.setState({\n//                         wait:false\n//                     })\n//                 }\n//                 try{\n//                     fetch(url2)\n//                     .then(res => res.json())\n//                     .then(data => this.setState({barLabel:data[0],barData:data[1]}))\n//                 }\n//                 catch(err){\n//                     console.log(err)\n//                 }\n//             }\n//         } \n//         else {\n//             sessionStorage.setItem('lat',3.14056039883967)\n//             sessionStorage.setItem('lng',101.59909644810003)\n//             dispatch(push('/login'))\n//         }\n//     }\n//     handleDate = (event, {name, value}) => {\n//         if (this.state.hasOwnProperty(name)) {\n//             this.setState({ [name]: value });\n//         }\n//     }\n//     createList(){\n//         var ranking =this.state.ranking2\n//         var sub_loc = this.state.sub_loc\n//         return ranking.map((el,i) => (\n//             <Table inverted>\n//                 <Table.Body>\n//                     <Table.Row key={i}>\n//                     <Table.Cell>\n//                         <h3>#{i+1}</h3>\n//                         <List bulleted>\n//                                 { sub_loc[i].sub_loc_name.map((el,j)=>\n//                                     <List.Item key ={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\n//                         </List>\n//                     </Table.Cell>\n//                     </Table.Row>\n//                 </Table.Body>\n//             </Table>\n//         ))}\n//     render(){\n//         const divStyle ={\n//             backgroundColor : 'black'\n//         }\n//         const area = sessionStorage.getItem('area');\n//         var lat = sessionStorage.getItem('lat');\n//         var lng = sessionStorage.getItem('lng');\n//         if(lat==null&&lng==null){\n//             lat = 3.14056039883967\n//             lng = 101.59909644810003\n//         }\n//         return(\n//             <div style={divStyle}>\n//                 <MenuBar activeItem='dashboard' name={this.props.user.name}/>\n//                 <Grid stackable>\n//                 <Dimmer active={this.state.wait}>\n//                                 <Loader active={this.state.wait}>Preparing Data</Loader>\n//                             </Dimmer>\n//                     <Grid.Row columns={2}>\n//                         <Grid.Column textAlign='left' width={3}>\n//                             <Segment style={{height: 60,textAlign:'center' }} inverted><h1>{area}</h1></Segment>\n//                             <Segment inverted style={{overflow: 'auto', maxHeight: 530 }}>\n//                                 <h2 style={{textAlign:'center' }}> Source of Infection </h2>\n//                                 {this.createList()}\n//                             </Segment>\n//                             <Segment style={{height: 100,textAlign:'center' }} inverted>\n//                                 <Statistic color='orange'>\n//                                     <Statistic.Value>{this.state.total_case}</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Total Cases</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment>\n//                             {/* <Segment style={{height: 100,textAlign:'center' }} inverted>\n//                                 <Statistic color='orange'>\n//                                     <Statistic.Value>10</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Total Locations</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment> */}\n//                             <Segment style={{height: 90,textAlign:'center' }} inverted>\n//                                 <Statistic color='green' size='small'>\n//                                     <Statistic.Value>{this.state.update_date}</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Last Updated On</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment>\n//                             <Divider hidden/>\n//                             <Grid.Row >\n//                             </Grid.Row>\n//                         </Grid.Column>\n//                         <Grid.Column width={12}>\n//                             <Grid.Row>\n//                                 {/* <h1>Dengue Source of Infection Heatmap</h1>\n//                                 <br/>\n//                                     {<img\n//                                     src={require('../img/indicator.png')}\n//                                     alt='indicator of the heatmap color'\n//                                     width={400}\n//                                     />\n//                                     } */}\n//                                     <Heatmap lat = {lat} lng={lng} ranking={this.state.ranking2}/>\n//                             </Grid.Row>\n//                             <Divider hidden/>\n//                             <Grid.Row>\n//                             {/* <Grid>\n//                                 <Grid.Row centered columns={2}>\n//                                     <Grid.Column>\n//                                         <Segment inverted color='black'>\n//                                             <BarChart\n//                                                 data={this.state.barData}\n//                                                 labels={this.state.barLabel}\n//                                                 label='Case Number'\n//                                             />\n//                                         </Segment>\n//                                     </Grid.Column>\n//                                 </Grid.Row>\n//                             </Grid> */}\n//                             </Grid.Row>\n//                             <Divider hidden />\n//                         </Grid.Column>\n//                     </Grid.Row>\n//                 </Grid>\n//             <Footer/>\n//             </div>\n//         )\n//     }\n// }\n// const mapState = state => ({\n//     user: state.user\n// })\n// const mapDispatch = dispatch => ({\n//     dispatch,\n//     getNodes: dispatch.nodes.getNodes()\n// })\n// export default connect(mapState,mapDispatch)(Dashboard)","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\Dashboard.js"],"names":[],"mappingssourcesContent":["// import React from 'react'\r\n// import MenuBar from './MenuBar'\r\n// import Heatmap from './Heatmap'\r\n// import BarChart from './BarChart'\r\n// import Footer from './Footer'\r\n// import { push } from 'react-router-redux'\r\n// import { connect } from 'react-redux'\r\n// import config from '../config'\r\n// import {Table,Grid,Divider, Segment,Statistic,List,Loader,Dimmer} from 'semantic-ui-react'\r\n// class Dashboard extends React.Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state={\r\n//             wait:false,\r\n//             dateGen:'',\r\n//             ranking2:[],\r\n//             center:'',\r\n//             monthData:[],\r\n//             barLabel:[],\r\n//             barData:[],\r\n//             sub_loc:'',\r\n//             total_case:'',\r\n//             update_date:'',\r\n//             user:''\r\n//         };\r\n//         this.handleDate = this.handleDate.bind(this)\r\n//     }\r\n//     componentWillMount(){\r\n//         const {user} = this.props\r\n//         //console.log(user.area)\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         const { dispatch, ranking } = this.props\r\n//         //console.log(ranking)\r\n//         const auth_token = sessionStorage.getItem('token');\r\n//         const user = sessionStorage.getItem('user');\r\n//         const area = sessionStorage.getItem('area');\r\n//         const level = sessionStorage.getItem('level');\r\n//         if (auth_token) {\r\n//             if(level==1){\r\n//                 let url2 = `${config.url}/monthData`\r\n//                 let url3 = `${config.url}/ranking/`+area\r\n//                 try{\r\n//                     fetch(url3)\r\n//                     .then(res=>res.json())\r\n//                     //.then(data => console.log(data))\r\n//                     .then(result => this.setState({\r\n//                         wait:false,\r\n//                         ranking2:JSON.parse(result.data[0].ranking),\r\n//                         update_date:(result.data[0].gen_Date).split(' ')[0],\r\n//                         sub_loc:result.sub_loc,\r\n//                         total_case:result.num_case,\r\n//                         })\r\n//                     )\r\n//                 }\r\n//                 catch(err){\r\n//                     console.log(err)\r\n//                     this.setState({\r\n//                         wait:false\r\n//                     })\r\n//                 }\r\n//                 try{\r\n//                     fetch(url2)\r\n//                     .then(res => res.json())\r\n//                     .then(data => this.setState({barLabel:data[0],barData:data[1]}))\r\n//                 }\r\n//                 catch(err){\r\n//                     console.log(err)\r\n//                 }\r\n//             }\r\n//         } \r\n//         else {\r\n//             sessionStorage.setItem('lat',3.14056039883967)\r\n//             sessionStorage.setItem('lng',101.59909644810003)\r\n//             dispatch(push('/login'))\r\n//         }\r\n\r\n//     }\r\n\r\n//     handleDate = (event, {name, value}) => {\r\n//         if (this.state.hasOwnProperty(name)) {\r\n//             this.setState({ [name]: value });\r\n//         }\r\n//     }\r\n\r\n//     createList(){\r\n//         var ranking =this.state.ranking2\r\n//         var sub_loc = this.state.sub_loc\r\n//         return ranking.map((el,i) => (\r\n//             <Table inverted>\r\n//                 <Table.Body>\r\n//                     <Table.Row key={i}>\r\n//                     <Table.Cell>\r\n//                         <h3>#{i+1}</h3>\r\n//                         <List bulleted>\r\n//                                 { sub_loc[i].sub_loc_name.map((el,j)=>\r\n//                                     <List.Item key ={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\r\n//                         </List>\r\n//                     </Table.Cell>\r\n//                     </Table.Row>\r\n//                 </Table.Body>\r\n//             </Table>\r\n//         ))}\r\n\r\n//     render(){\r\n//         const divStyle ={\r\n//             backgroundColor : 'black'\r\n//         }\r\n//         const area = sessionStorage.getItem('area');\r\n//         var lat = sessionStorage.getItem('lat');\r\n//         var lng = sessionStorage.getItem('lng');\r\n//         if(lat==null&&lng==null){\r\n//             lat = 3.14056039883967\r\n//             lng = 101.59909644810003\r\n            \r\n//         }\r\n//         return(\r\n//             <div style={divStyle}>\r\n//                 <MenuBar activeItem='dashboard' name={this.props.user.name}/>\r\n//                 <Grid stackable>\r\n//                 <Dimmer active={this.state.wait}>\r\n//                                 <Loader active={this.state.wait}>Preparing Data</Loader>\r\n//                             </Dimmer>\r\n//                     <Grid.Row columns={2}>\r\n//                         <Grid.Column textAlign='left' width={3}>\r\n//                             <Segment style={{height: 60,textAlign:'center' }} inverted><h1>{area}</h1></Segment>\r\n//                             <Segment inverted style={{overflow: 'auto', maxHeight: 530 }}>\r\n//                                 <h2 style={{textAlign:'center' }}> Source of Infection </h2>\r\n//                                 {this.createList()}\r\n//                             </Segment>\r\n//                             <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='orange'>\r\n//                                     <Statistic.Value>{this.state.total_case}</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Total Cases</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment>\r\n//                             {/* <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='orange'>\r\n//                                     <Statistic.Value>10</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Total Locations</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment> */}\r\n//                             <Segment style={{height: 90,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='green' size='small'>\r\n//                                     <Statistic.Value>{this.state.update_date}</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Last Updated On</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment>\r\n//                             <Divider hidden/>\r\n//                             <Grid.Row >\r\n//                             </Grid.Row>\r\n                            \r\n//                         </Grid.Column>\r\n//                         <Grid.Column width={12}>\r\n//                             <Grid.Row>\r\n//                                 {/* <h1>Dengue Source of Infection Heatmap</h1>\r\n//                                 <br/>\r\n//                                     {<img\r\n//                                     src={require('../img/indicator.png')}\r\n//                                     alt='indicator of the heatmap color'\r\n//                                     width={400}\r\n//                                     />\r\n//                                     } */}\r\n//                                     <Heatmap lat = {lat} lng={lng} ranking={this.state.ranking2}/>\r\n//                             </Grid.Row>\r\n//                             <Divider hidden/>\r\n//                             <Grid.Row>\r\n//                             {/* <Grid>\r\n//                                 <Grid.Row centered columns={2}>\r\n//                                     <Grid.Column>\r\n//                                         <Segment inverted color='black'>\r\n//                                             <BarChart\r\n//                                                 data={this.state.barData}\r\n//                                                 labels={this.state.barLabel}\r\n//                                                 label='Case Number'\r\n//                                             />\r\n//                                         </Segment>\r\n//                                     </Grid.Column>\r\n//                                 </Grid.Row>\r\n//                             </Grid> */}\r\n//                             </Grid.Row>\r\n//                             <Divider hidden />\r\n//                         </Grid.Column>\r\n//                     </Grid.Row>\r\n//                 </Grid>\r\n//             <Footer/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// const mapState = state => ({\r\n//     user: state.user\r\n// })\r\n\r\n// const mapDispatch = dispatch => ({\r\n//     dispatch,\r\n//     getNodes: dispatch.nodes.getNodes()\r\n\r\n// })\r\n// export default connect(mapState,mapDispatch)(Dashboard)"]},"metadata":{},"sourceType":"module"}