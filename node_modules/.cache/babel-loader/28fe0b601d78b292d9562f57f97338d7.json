{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"components\", \"componentsProps\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"slotProps\", \"slots\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { darken, lighten } from '@mui/system/colorManipulator';\nimport { styled, createUseThemeProps } from '../zero-styled';\nimport useSlot from '../utils/useSlot';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useThemeProps = createUseThemeProps('MuiAlert');\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var variant = ownerState.variant,\n      color = ownerState.color,\n      severity = ownerState.severity,\n      classes = ownerState.classes;\n  var slots = {\n    root: ['root', \"color\".concat(capitalize(color || severity)), \"\".concat(variant).concat(capitalize(color || severity)), \"\".concat(variant)],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nvar AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.root, styles[ownerState.variant], styles[\"\".concat(ownerState.variant).concat(capitalize(ownerState.color || ownerState.severity))]];\n  }\n})(function (_ref) {\n  var theme = _ref.theme;\n  var getColor = theme.palette.mode === 'light' ? darken : lighten;\n  var getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px',\n    variants: _toConsumableArray(Object.entries(theme.palette).filter(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          value = _ref3[1];\n\n      return value.main && value.light;\n    }).map(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n          color = _ref5[0];\n\n      return {\n        props: {\n          colorSeverity: color,\n          variant: 'standard'\n        },\n        style: _defineProperty({\n          color: theme.vars ? theme.vars.palette.Alert[\"\".concat(color, \"Color\")] : getColor(theme.palette[color].light, 0.6),\n          backgroundColor: theme.vars ? theme.vars.palette.Alert[\"\".concat(color, \"StandardBg\")] : getBackgroundColor(theme.palette[color].light, 0.9)\n        }, \"& .\".concat(alertClasses.icon), theme.vars ? {\n          color: theme.vars.palette.Alert[\"\".concat(color, \"IconColor\")]\n        } : {\n          color: theme.palette[color].main\n        })\n      };\n    })).concat(_toConsumableArray(Object.entries(theme.palette).filter(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          value = _ref7[1];\n\n      return value.main && value.light;\n    }).map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 1),\n          color = _ref9[0];\n\n      return {\n        props: {\n          colorSeverity: color,\n          variant: 'outlined'\n        },\n        style: _defineProperty({\n          color: theme.vars ? theme.vars.palette.Alert[\"\".concat(color, \"Color\")] : getColor(theme.palette[color].light, 0.6),\n          border: \"1px solid \".concat((theme.vars || theme).palette[color].light)\n        }, \"& .\".concat(alertClasses.icon), theme.vars ? {\n          color: theme.vars.palette.Alert[\"\".concat(color, \"IconColor\")]\n        } : {\n          color: theme.palette[color].main\n        })\n      };\n    })), _toConsumableArray(Object.entries(theme.palette).filter(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 2),\n          value = _ref11[1];\n\n      return value.main && value.dark;\n    }).map(function (_ref12) {\n      var _ref13 = _slicedToArray(_ref12, 1),\n          color = _ref13[0];\n\n      return {\n        props: {\n          colorSeverity: color,\n          variant: 'filled'\n        },\n        style: _extends({\n          fontWeight: theme.typography.fontWeightMedium\n        }, theme.vars ? {\n          color: theme.vars.palette.Alert[\"\".concat(color, \"FilledColor\")],\n          backgroundColor: theme.vars.palette.Alert[\"\".concat(color, \"FilledBg\")]\n        } : {\n          backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,\n          color: theme.palette.getContrastText(theme.palette[color].main)\n        })\n      };\n    })))\n  });\n});\nvar AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.icon;\n  }\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nvar AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.message;\n  }\n})({\n  padding: '8px 0',\n  minWidth: 0,\n  overflow: 'auto'\n});\nvar AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.action;\n  }\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nvar defaultIconMapping = {\n  success:\n  /*#__PURE__*/\n  _jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning:\n  /*#__PURE__*/\n  _jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error:\n  /*#__PURE__*/\n  _jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info:\n  /*#__PURE__*/\n  _jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nvar Alert =\n/*#__PURE__*/\nReact.forwardRef(function Alert(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  var action = props.action,\n      children = props.children,\n      className = props.className,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      color = props.color,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      icon = props.icon,\n      _props$iconMapping = props.iconMapping,\n      iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,\n      onClose = props.onClose,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      _props$severity = props.severity,\n      severity = _props$severity === void 0 ? 'success' : _props$severity,\n      _props$slotProps = props.slotProps,\n      slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n      _props$slots = props.slots,\n      slots = _props$slots === void 0 ? {} : _props$slots,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    color: color,\n    severity: severity,\n    variant: variant,\n    colorSeverity: color || severity\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var externalForwardedProps = {\n    slots: _extends({\n      closeButton: components.CloseButton,\n      closeIcon: components.CloseIcon\n    }, slots),\n    slotProps: _extends({}, componentsProps, slotProps)\n  };\n\n  var _useSlot = useSlot('closeButton', {\n    elementType: IconButton,\n    externalForwardedProps: externalForwardedProps,\n    ownerState: ownerState\n  }),\n      _useSlot2 = _slicedToArray(_useSlot, 2),\n      CloseButtonSlot = _useSlot2[0],\n      closeButtonProps = _useSlot2[1];\n\n  var _useSlot3 = useSlot('closeIcon', {\n    elementType: CloseIcon,\n    externalForwardedProps: externalForwardedProps,\n    ownerState: ownerState\n  }),\n      _useSlot4 = _slicedToArray(_useSlot3, 2),\n      CloseIconSlot = _useSlot4[0],\n      closeIconProps = _useSlot4[1];\n\n  return (\n    /*#__PURE__*/\n    _jsxs(AlertRoot, _extends({\n      role: role,\n      elevation: 0,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: [icon !== false ?\n      /*#__PURE__*/\n      _jsx(AlertIcon, {\n        ownerState: ownerState,\n        className: classes.icon,\n        children: icon || iconMapping[severity] || defaultIconMapping[severity]\n      }) : null,\n      /*#__PURE__*/\n      _jsx(AlertMessage, {\n        ownerState: ownerState,\n        className: classes.message,\n        children: children\n      }), action != null ?\n      /*#__PURE__*/\n      _jsx(AlertAction, {\n        ownerState: ownerState,\n        className: classes.action,\n        children: action\n      }) : null, action == null && onClose ?\n      /*#__PURE__*/\n      _jsx(AlertAction, {\n        ownerState: ownerState,\n        className: classes.action,\n        children:\n        /*#__PURE__*/\n        _jsx(CloseButtonSlot, _extends({\n          size: \"small\",\n          \"aria-label\": closeText,\n          title: closeText,\n          color: \"inherit\",\n          onClick: onClose\n        }, closeButtonProps, {\n          children:\n          /*#__PURE__*/\n          _jsx(CloseIconSlot, _extends({\n            fontSize: \"small\"\n          }, closeIconProps))\n        }))\n      }) : null]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The components used for each slot inside.\n   *\n   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  components: PropTypes.shape({\n    CloseButton: PropTypes.elementType,\n    CloseIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    closeButton: PropTypes.object,\n    closeIcon: PropTypes.object\n  }),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    closeButton: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    closeIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    closeButton: PropTypes.elementType,\n    closeIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}