{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { NumberInputActionTypes } from './numberInputAction.types';\nimport { clampStepwise, isNumber } from './utils';\n\nfunction getClampedValues(rawValue, context) {\n  var min = context.min,\n      max = context.max,\n      step = context.step;\n  var clampedValue = rawValue === null ? null : clampStepwise(rawValue, min, max, step);\n  var newInputValue = clampedValue === null ? '' : String(clampedValue);\n  return {\n    value: clampedValue,\n    inputValue: newInputValue\n  };\n}\n\nfunction stepValue(state, context, direction, multiplier) {\n  var value = state.value;\n  var _context$step = context.step,\n      step = _context$step === void 0 ? 1 : _context$step,\n      min = context.min,\n      max = context.max;\n\n  if (isNumber(value)) {\n    return {\n      up: value + (step != null ? step : 1) * multiplier,\n      down: value - (step != null ? step : 1) * multiplier\n    }[direction];\n  }\n\n  return {\n    up: min != null ? min : 1,\n    down: max != null ? max : -1\n  }[direction];\n}\n\nfunction handleClamp(state, context, inputValue) {\n  var getInputValueAsString = context.getInputValueAsString;\n  var numberValueAsString = getInputValueAsString(inputValue);\n  var intermediateValue = numberValueAsString === '' || numberValueAsString === '-' ? null : parseInt(numberValueAsString, 10);\n  var clampedValues = getClampedValues(intermediateValue, context);\n  return _extends({}, state, clampedValues);\n}\n\nfunction handleInputChange(state, context, inputValue) {\n  var getInputValueAsString = context.getInputValueAsString;\n  var numberValueAsString = getInputValueAsString(inputValue);\n\n  if (numberValueAsString.match(/^-?\\d+?$/) || numberValueAsString === '' || numberValueAsString === '-') {\n    return _extends({}, state, {\n      inputValue: numberValueAsString\n    });\n  }\n\n  return state;\n} // use this for ArrowUp, ArrowDown, button clicks\n// use this with applyMultiplier: true for PageUp, PageDown, button shift-clicks\n\n\nfunction handleStep(state, context, applyMultiplier, direction) {\n  var multiplier = applyMultiplier ? context.shiftMultiplier : 1;\n  var newValue = stepValue(state, context, direction, multiplier);\n  var clampedValues = getClampedValues(newValue, context);\n  return _extends({}, state, clampedValues);\n}\n\nfunction handleToMinOrMax(state, context, to) {\n  var newValue = context[to];\n\n  if (!isNumber(newValue)) {\n    return state;\n  }\n\n  return _extends({}, state, {\n    value: newValue,\n    inputValue: String(newValue)\n  });\n}\n\nexport function numberInputReducer(state, action) {\n  var type = action.type,\n      context = action.context;\n\n  switch (type) {\n    case NumberInputActionTypes.clamp:\n      return handleClamp(state, context, action.inputValue);\n\n    case NumberInputActionTypes.inputChange:\n      return handleInputChange(state, context, action.inputValue);\n\n    case NumberInputActionTypes.increment:\n      return handleStep(state, context, action.applyMultiplier, 'up');\n\n    case NumberInputActionTypes.decrement:\n      return handleStep(state, context, action.applyMultiplier, 'down');\n\n    case NumberInputActionTypes.incrementToMax:\n      return handleToMinOrMax(state, context, 'max');\n\n    case NumberInputActionTypes.decrementToMin:\n      return handleToMinOrMax(state, context, 'min');\n\n    case NumberInputActionTypes.resetInputValue:\n      return _extends({}, state, {\n        inputValue: String(state.value)\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}