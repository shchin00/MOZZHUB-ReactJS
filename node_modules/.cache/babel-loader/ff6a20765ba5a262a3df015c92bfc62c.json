{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { useFormControlContext } from '../FormControl';\nimport { NumberInputActionTypes } from './numberInputAction.types';\nimport { numberInputReducer } from './numberInputReducer';\nimport { isNumber } from './utils';\nvar STEP_KEYS = ['ArrowUp', 'ArrowDown', 'PageUp', 'PageDown'];\nvar SUPPORTED_KEYS = STEP_KEYS.concat(['Home', 'End']);\nexport function getInputValueAsString(v) {\n  return v ? String(v.trim()) : String(v);\n}\n/**\n *\n * Demos:\n *\n * - [Number Input](https://mui.com/base-ui/react-number-input/#hook)\n *\n * API:\n *\n * - [useNumberInput API](https://mui.com/base-ui/react-number-input/hooks-api/#use-number-input)\n */\n\nexport function useNumberInput(parameters) {\n  var _ref;\n\n  var min = parameters.min,\n      max = parameters.max,\n      step = parameters.step,\n      _parameters$shiftMult = parameters.shiftMultiplier,\n      shiftMultiplier = _parameters$shiftMult === void 0 ? 10 : _parameters$shiftMult,\n      defaultValueProp = parameters.defaultValue,\n      _parameters$disabled = parameters.disabled,\n      disabledProp = _parameters$disabled === void 0 ? false : _parameters$disabled,\n      _parameters$error = parameters.error,\n      errorProp = _parameters$error === void 0 ? false : _parameters$error,\n      onBlur = parameters.onBlur,\n      onInputChange = parameters.onInputChange,\n      onFocus = parameters.onFocus,\n      onChange = parameters.onChange,\n      _parameters$required = parameters.required,\n      requiredProp = _parameters$required === void 0 ? false : _parameters$required,\n      _parameters$readOnly = parameters.readOnly,\n      readOnlyProp = _parameters$readOnly === void 0 ? false : _parameters$readOnly,\n      valueProp = parameters.value,\n      inputRefProp = parameters.inputRef,\n      inputIdProp = parameters.inputId,\n      _parameters$component = parameters.componentName,\n      componentName = _parameters$component === void 0 ? 'useNumberInput' : _parameters$component; // TODO: make it work with FormControl\n\n  var formControlContext = useFormControlContext();\n\n  var _React$useRef = React.useRef(valueProp != null),\n      isControlled = _React$useRef.current;\n\n  var handleInputRefWarning = React.useCallback(function (instance) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {\n        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  var inputRef = React.useRef(null);\n  var handleInputRef = useForkRef(inputRef, inputRefProp, handleInputRefWarning);\n  var inputId = useId(inputIdProp);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var handleStateChange = React.useCallback(function (event, field, fieldValue, reason) {\n    if (field === 'value' && typeof fieldValue !== 'string') {\n      switch (reason) {\n        // only a blur event will dispatch `numberInput:clamp`\n        case 'numberInput:clamp':\n          onChange == null || onChange(event, fieldValue);\n          break;\n\n        case 'numberInput:increment':\n        case 'numberInput:decrement':\n        case 'numberInput:incrementToMax':\n        case 'numberInput:decrementToMin':\n          onChange == null || onChange(event, fieldValue);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [onChange]);\n  var numberInputActionContext = React.useMemo(function () {\n    return {\n      min: min,\n      max: max,\n      step: step,\n      shiftMultiplier: shiftMultiplier,\n      getInputValueAsString: getInputValueAsString\n    };\n  }, [min, max, step, shiftMultiplier]);\n  var initialValue = (_ref = valueProp != null ? valueProp : defaultValueProp) != null ? _ref : null;\n  var initialState = {\n    value: initialValue,\n    inputValue: initialValue ? String(initialValue) : ''\n  };\n  var controlledState = React.useMemo(function () {\n    return {\n      value: valueProp\n    };\n  }, [valueProp]);\n\n  var _useControllableReduc = useControllableReducer({\n    reducer: numberInputReducer,\n    controlledProps: controlledState,\n    initialState: initialState,\n    onStateChange: handleStateChange,\n    actionContext: React.useMemo(function () {\n      return numberInputActionContext;\n    }, [numberInputActionContext]),\n    componentName: componentName\n  }),\n      _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n      state = _useControllableReduc2[0],\n      dispatch = _useControllableReduc2[1];\n\n  var value = state.value,\n      inputValue = state.inputValue;\n  React.useEffect(function () {\n    if (!formControlContext && disabledProp && focused) {\n      setFocused(false);\n      onBlur == null || onBlur();\n    }\n  }, [formControlContext, disabledProp, focused, onBlur]);\n  React.useEffect(function () {\n    if (isControlled && isNumber(value)) {\n      dispatch({\n        type: NumberInputActionTypes.resetInputValue\n      });\n    }\n  }, [value, dispatch, isControlled]);\n\n  var createHandleFocus = function createHandleFocus(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onFocu;\n\n      (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented || event.defaultPrevented) {\n        return;\n      }\n\n      if (formControlContext && formControlContext.onFocus) {\n        var _formControlContext$o;\n\n        formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);\n      }\n\n      setFocused(true);\n    };\n  };\n\n  var createHandleInputChange = function createHandleInputChange(otherHandlers) {\n    return function (event) {\n      var _formControlContext$o2, _otherHandlers$onInpu;\n\n      if (!isControlled && event.target === null) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: Expected valid input target. Did you use a custom `slots.input` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.\" : _formatMuiErrorMessage(17));\n      }\n\n      formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);\n      (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented || event.defaultPrevented) {\n        return;\n      }\n\n      dispatch({\n        type: NumberInputActionTypes.inputChange,\n        event: event,\n        inputValue: event.currentTarget.value\n      });\n    };\n  };\n\n  var createHandleBlur = function createHandleBlur(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onBlur;\n\n      formControlContext == null || formControlContext.onBlur();\n      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented || event.defaultPrevented) {\n        return;\n      }\n\n      dispatch({\n        type: NumberInputActionTypes.clamp,\n        event: event,\n        inputValue: event.currentTarget.value\n      });\n      setFocused(false);\n    };\n  };\n\n  var createHandleClick = function createHandleClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n\n      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented || event.defaultPrevented) {\n        return;\n      }\n\n      if (inputRef.current && event.currentTarget === event.target) {\n        inputRef.current.focus();\n      }\n    };\n  };\n\n  var handleStep = function handleStep(direction) {\n    return function (event) {\n      var applyMultiplier = Boolean(event.shiftKey);\n      var actionType = {\n        up: NumberInputActionTypes.increment,\n        down: NumberInputActionTypes.decrement\n      }[direction];\n      dispatch({\n        type: actionType,\n        event: event,\n        applyMultiplier: applyMultiplier\n      });\n    };\n  };\n\n  var createHandleKeyDown = function createHandleKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented || event.defaultPrevented) {\n        return;\n      } // this prevents unintended page scrolling\n\n\n      if (SUPPORTED_KEYS.includes(event.key)) {\n        event.preventDefault();\n      }\n\n      switch (event.key) {\n        case 'ArrowUp':\n          dispatch({\n            type: NumberInputActionTypes.increment,\n            event: event,\n            applyMultiplier: !!event.shiftKey\n          });\n          break;\n\n        case 'ArrowDown':\n          dispatch({\n            type: NumberInputActionTypes.decrement,\n            event: event,\n            applyMultiplier: !!event.shiftKey\n          });\n          break;\n\n        case 'PageUp':\n          dispatch({\n            type: NumberInputActionTypes.increment,\n            event: event,\n            applyMultiplier: true\n          });\n          break;\n\n        case 'PageDown':\n          dispatch({\n            type: NumberInputActionTypes.decrement,\n            event: event,\n            applyMultiplier: true\n          });\n          break;\n\n        case 'Home':\n          dispatch({\n            type: NumberInputActionTypes.incrementToMax,\n            event: event\n          });\n          break;\n\n        case 'End':\n          dispatch({\n            type: NumberInputActionTypes.decrementToMin,\n            event: event\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n  };\n\n  var getRootProps = function getRootProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var propsEventHandlers = extractEventHandlers(parameters, [// these are handled by the input slot\n    'onBlur', 'onInputChange', 'onFocus', 'onChange']);\n\n    var externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));\n\n    return _extends({}, externalProps, externalEventHandlers, {\n      onClick: createHandleClick(externalEventHandlers)\n    });\n  };\n\n  var getInputProps = function getInputProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _ref2;\n\n    var propsEventHandlers = {\n      onBlur: onBlur,\n      onFocus: onFocus,\n      // onChange from normal props is the custom onChange so we ignore it here\n      onChange: onInputChange\n    };\n\n    var externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps, [// onClick is handled by the root slot\n    'onClick' // do not ignore 'onInputChange', we want slotProps.input.onInputChange to enter the DOM and throw\n    ]));\n\n    var mergedEventHandlers = _extends({}, externalEventHandlers, {\n      onFocus: createHandleFocus(externalEventHandlers),\n      // slotProps.onChange is renamed to onInputChange and passed to createHandleInputChange\n      onChange: createHandleInputChange(_extends({}, externalEventHandlers, {\n        onInputChange: externalEventHandlers.onChange\n      })),\n      onBlur: createHandleBlur(externalEventHandlers),\n      onKeyDown: createHandleKeyDown(externalEventHandlers)\n    });\n\n    var displayValue = (_ref2 = focused ? inputValue : value) != null ? _ref2 : ''; // get rid of slotProps.input.onInputChange before returning to prevent it from entering the DOM\n    // if it was passed, it will be in mergedEventHandlers and throw\n\n    delete externalProps.onInputChange;\n    return _extends({\n      type: 'text',\n      id: inputId,\n      'aria-invalid': errorProp || undefined,\n      defaultValue: undefined,\n      value: displayValue,\n      'aria-valuenow': displayValue,\n      'aria-valuetext': String(displayValue),\n      'aria-valuemin': min,\n      'aria-valuemax': max,\n      autoComplete: 'off',\n      autoCorrect: 'off',\n      spellCheck: 'false',\n      required: requiredProp,\n      readOnly: readOnlyProp,\n      'aria-disabled': disabledProp,\n      disabled: disabledProp\n    }, externalProps, {\n      ref: handleInputRef\n    }, mergedEventHandlers);\n  };\n\n  var handleStepperButtonMouseDown = function handleStepperButtonMouseDown(event) {\n    event.preventDefault();\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  var stepperButtonCommonProps = {\n    'aria-controls': inputId,\n    tabIndex: -1\n  };\n  var isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max != null ? max : Number.MAX_SAFE_INTEGER) : false);\n\n  var getIncrementButtonProps = function getIncrementButtonProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isIncrementDisabled,\n      'aria-disabled': isIncrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep('up')\n    });\n  };\n\n  var isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min != null ? min : Number.MIN_SAFE_INTEGER) : false);\n\n  var getDecrementButtonProps = function getDecrementButtonProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, externalProps, stepperButtonCommonProps, {\n      disabled: isDecrementDisabled,\n      'aria-disabled': isDecrementDisabled,\n      onMouseDown: handleStepperButtonMouseDown,\n      onClick: handleStep('down')\n    });\n  };\n\n  return {\n    disabled: disabledProp,\n    error: errorProp,\n    focused: focused,\n    formControlContext: formControlContext,\n    getInputProps: getInputProps,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getRootProps: getRootProps,\n    required: requiredProp,\n    value: value,\n    inputValue: inputValue,\n    isIncrementDisabled: isIncrementDisabled,\n    isDecrementDisabled: isDecrementDisabled\n  };\n}","map":null,"metadata":{},"sourceType":"module"}