{"ast":null,"code":"import _classCallCheck from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\PrimeClinicForm.js\";\nimport React from 'react';\nimport { Button, Grid, Form, Divider, Segment, Progress, Header, Popup, Icon } from 'semantic-ui-react';\nimport { DateInput } from 'semantic-ui-calendar-react';\n\nvar PrimeClinicForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PrimeClinicForm, _React$Component);\n\n  function PrimeClinicForm(props) {\n    var _this;\n\n    _classCallCheck(this, PrimeClinicForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrimeClinicForm).call(this, props));\n    /* values={\r\n        clinicP_name:'Klinik UNIMAS',\r\n        clinicP_sym:'Fever',\r\n        clinicP_creat:'No', \r\n        clinicP_RPPD:'Yes',\r\n        visit_date:'2020-02-04',\r\n        dig_note:'DF',\r\n        dig_note:'DF',\r\n    };\r\n    this.handleDate = this.handleDate.bind(this)\r\n    this.handleInput = this.handleInput.bind(this)\r\n    this.handleClick1 = this.handleClick1.bind(this) */\n\n    /* this.handleSave = this.handleSave.bind(this)\r\n    this.handleNext = this.handleNext.bind(this) */\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(PrimeClinicForm, [{\n    key: \"render\",\n\n    /* componentWillMount(){\r\n        let url = 'http://localhost:8080/primecData'\r\n        fetch(url)\r\n        .then(res =>res.json()\r\n        )\r\n        .then(data =>\r\n            this.setState({\r\n                clinicP_name:data.primecData.clinicP_name,\r\n                clinicP_sym:data.primecData.clinicP_sym,\r\n                clinicP_creat:data.primecData.clinicP_creat, \r\n                clinicP_RPPD:data.primecData.clinicP_RPPD,\r\n                visit_date:data.primecData.visit_date,\r\n                dig_note:data.primecData.dig_note,\r\n                dig_note:data.primecData.dig_note\r\n            })\r\n            )\r\n        .catch(error =>console.error(error))    \r\n    } */\n\n    /* handleClick1(e){\r\n        let value = e.target.value;\r\n        let name = e.target.name;\r\n        this.setState(prevState =>{\r\n            return{\r\n                    ...prevState, [name]:value,\r\n                                  dig_note:value\r\n            }})\r\n    }\r\n    handleDate = (event, {name, value}) => {\r\n        if (values.hasOwnProperty(name)) {\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n    handleInput(e){\r\n        let value = e.target.value;\r\n        let name = e.target.name;\r\n        this.setState(prevState =>{\r\n            return{\r\n                ...prevState, [name]:value,}},)\r\n                \r\n    } */\n\n    /* handleSave(e){\r\n        this.setState({\r\n            clinicP:{\r\n                clinicP_name:values.clinicP_name,\r\n                clinicP_sym:values.clinicP_sym,\r\n                clinicP_creat:values.clinicP_creat, \r\n                clinicP_RPPD:values.clinicP_RPPD,\r\n                visit_date:values.visit_date,\r\n                dig_note:values.dig_note,    \r\n            }\r\n        })\r\n    }\r\n      handleNext(){\r\n        let primecData=values.clinicP\r\n        let url = 'http://localhost:8080/primecData'\r\n        console.log(primecData)\r\n            fetch(url,{\r\n                method:\"POST\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify({primecData}),\r\n            })\r\n        this.props.history.push(\"/new/ref\");\r\n    } */\n    value: function render() {\n      if (this.props.currentStep !== 4) {\n        return null;\n      }\n\n      var values = this.props.values;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h2\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Primary Clinic Information\"), React.createElement(Segment, {\n        basic: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        value: \"3\",\n        total: \"6\",\n        progress: \"ratio\",\n        color: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        centered: true,\n        columns: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        textAlign: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        trigger: React.createElement(Icon, {\n          circular: true,\n          color: \"teal\",\n          name: \"help\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }),\n        position: \"bottom right\",\n        wide: \"very\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require('../img/prInfo1.PNG'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: require('../img/prInfo2.PNG'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })))), React.createElement(Grid.Row, {\n        centered: true,\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Form, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Form.Input, {\n        name: 'clinicP_name',\n        label: \"Primary clinic patient been visited before this notification:\",\n        value: values.clinicP_name,\n        placeholder: \"If Yes\",\n        onChange: this.props.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(DateInput, {\n        label: \"Visit Date:\",\n        name: \"visit_date\",\n        placeholder: \"Date\",\n        value: values.visit_date,\n        iconPosition: \"left\",\n        closable: true,\n        popupPosition: \"bottom right\",\n        closeOnMouseLeave: false,\n        onChange: this.props.handleDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Diagnosa oleh Klink Primer yang dilawati oleh pesakit\")), React.createElement(Button.Group, {\n        compact: true,\n        size: \"tiny\",\n        inverted: true,\n        color: \"orange\",\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Button, {\n        active: values.dig_note === 'DF' ? true : false,\n        name: 'dig_note',\n        value: 'DF',\n        content: \"DF\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(Button, {\n        active: values.dig_note === 'DHF' ? true : false,\n        name: 'dig_note',\n        value: 'DHF',\n        content: \"DHF\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(Button, {\n        active: values.dig_note === 'DSS' ? true : false,\n        name: 'dig_note',\n        value: 'DSS',\n        content: \"DSS\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(Button, {\n        active: values.dig_note === 'SEVERE DENGUE' ? true : false,\n        name: 'dig_note',\n        value: 'SEVERE DENGUE',\n        content: \"SEVERE DENGUE\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Button, {\n        active: values.dig_note === 'TRO DENGUE' ? true : false,\n        name: 'dig_note',\n        value: 'TRO DENGUE',\n        content: \"TRO DENGUE\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(Button, {\n        active: values.dig_note === 'OTHER' ? true : false,\n        name: 'dig_note',\n        value: 'OTHER',\n        content: \"OTHER\",\n        onClick: this.props.handleClick1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(Form.Input, {\n        name: 'clinicP_sym',\n        label: \"Clinical Symtomps during patiet visit primary clinic:\",\n        value: values.clinicP_sym,\n        placeholder: \"If Yes\",\n        onChange: this.props.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(Form.Input, {\n        name: 'clinicP_RPPD',\n        label: \"If the dignosis is Dengue, REKOD PEMANTUAN PESAKIT DENGGI been delivered?\",\n        value: values.clinicP_RPPD,\n        placeholder: \"If Yes\",\n        onChange: this.props.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(Form.Input, {\n        name: 'clinicP_creat',\n        label: \"This is the notification been created from primary clinical of patient visited?\",\n        value: values.clinicP_creat,\n        placeholder: \"If Yes\",\n        onChange: this.props.handleInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return PrimeClinicForm;\n}(React.Component);\n\nexport default PrimeClinicForm;","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\PrimeClinicForm.js"],"names":["React","Button","Grid","Form","Divider","Segment","Progress","Header","Popup","Icon","DateInput","PrimeClinicForm","props","state","currentStep","values","require","clinicP_name","handleInput","visit_date","handleDate","dig_note","handleClick1","clinicP_sym","clinicP_RPPD","clinicP_creat","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,IAAf,EAAoBC,IAApB,EAAyBC,OAAzB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoDC,MAApD,EAA4DC,KAA5D,EAAkEC,IAAlE,QAA6E,mBAA7E;AACA,SAAQC,SAAR,QAAwB,4BAAxB;;IACMC,e;;;;;AACF,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,yFAAMA,KAAN;AACA;;;;;;;;;;;;;AAYA;;;AAdc,UAkBlBC,KAlBkB,GAkBZ,EAlBY;AAAA;AAiBjB;;;;;AAID;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;6BA4BQ;AACJ,UAAG,KAAKD,KAAL,CAAWE,WAAX,KAA0B,CAA7B,EAA+B;AAC3B,eAAO,IAAP;AACH;;AAHG,UAIIC,MAJJ,GAIe,KAAKH,KAJpB,CAIIG,MAJJ;AAMJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAe,QAAA,SAAS,EAAC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,EAEI,oBAAC,OAAD;AAAS,QAAA,KAAK,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,GAAhB;AAAoB,QAAA,KAAK,EAAC,GAA1B;AAA8B,QAAA,QAAQ,EAAC,OAAvC;AAA+C,QAAA,KAAK,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,EAKQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD,CAAM,GAAN;AAAU,QAAA,QAAQ,MAAlB;AAAmB,QAAA,OAAO,EAAE,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,OAAO,EAAE,oBAAC,IAAD;AAAM,UAAA,QAAQ,MAAd;AAAe,UAAA,KAAK,EAAC,MAArB;AAA4B,UAAA,IAAI,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADb;AAEI,QAAA,QAAQ,EAAC,cAFb;AAGI,QAAA,IAAI,EAAC,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII;AAAK,QAAA,GAAG,EAAGC,OAAO,CAAC,oBAAD,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAK,QAAA,GAAG,EAAGA,OAAO,CAAC,oBAAD,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ,CADJ,CADA,EAYI,oBAAC,IAAD,CAAM,GAAN;AAAU,QAAA,QAAQ,MAAlB;AAAmB,QAAA,OAAO,EAAE,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,KAAN;AACI,QAAA,IAAI,EAAE,cADV;AAEI,QAAA,KAAK,EAAC,+DAFV;AAGI,QAAA,KAAK,EAAED,MAAM,CAACE,YAHlB;AAII,QAAA,WAAW,EAAC,QAJhB;AAKI,QAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWM,WALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAWI,oBAAC,SAAD;AACQ,QAAA,KAAK,EAAC,aADd;AAEQ,QAAA,IAAI,EAAC,YAFb;AAGQ,QAAA,WAAW,EAAC,MAHpB;AAIQ,QAAA,KAAK,EAAEH,MAAM,CAACI,UAJtB;AAKQ,QAAA,YAAY,EAAC,MALrB;AAMQ,QAAA,QAAQ,EAAE,IANlB;AAOQ,QAAA,aAAa,EAAC,cAPtB;AAQQ,QAAA,iBAAiB,EAAE,KAR3B;AASQ,QAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,UAT7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,EAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAAP,CAtBJ,EAuBI,oBAAC,MAAD,CAAQ,KAAR;AAAc,QAAA,OAAO,MAArB;AAAsB,QAAA,IAAI,EAAE,MAA5B;AAAoC,QAAA,QAAQ,MAA5C;AAA6C,QAAA,KAAK,EAAC,QAAnD;AAA4D,QAAA,KAAK,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEL,MAAM,CAACM,QAAP,KAAkB,IAAlB,GAAuB,IAAvB,GAA4B,KAA5C;AAAmD,QAAA,IAAI,EAAE,UAAzD;AAAqE,QAAA,KAAK,EAAE,IAA5E;AAAkF,QAAA,OAAO,EAAC,IAA1F;AAA+F,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEP,MAAM,CAACM,QAAP,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B,KAA7C;AAAqD,QAAA,IAAI,EAAE,UAA3D;AAAuE,QAAA,KAAK,EAAE,KAA9E;AAAqF,QAAA,OAAO,EAAC,KAA7F;AAAmG,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEP,MAAM,CAACM,QAAP,KAAkB,KAAlB,GAAwB,IAAxB,GAA6B,KAA7C;AAAqD,QAAA,IAAI,EAAE,UAA3D;AAAuE,QAAA,KAAK,EAAE,KAA9E;AAAqF,QAAA,OAAO,EAAC,KAA7F;AAAmG,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEP,MAAM,CAACM,QAAP,KAAkB,eAAlB,GAAkC,IAAlC,GAAuC,KAAvD;AAA+D,QAAA,IAAI,EAAE,UAArE;AAAiF,QAAA,KAAK,EAAE,eAAxF;AAAyG,QAAA,OAAO,EAAC,eAAjH;AAAiI,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAArJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEP,MAAM,CAACM,QAAP,KAAkB,YAAlB,GAA+B,IAA/B,GAAoC,KAApD;AAA4D,QAAA,IAAI,EAAE,UAAlE;AAA8E,QAAA,KAAK,EAAE,YAArF;AAAmG,QAAA,OAAO,EAAC,YAA3G;AAAwH,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI,oBAAC,MAAD;AAAQ,QAAA,MAAM,EAAEP,MAAM,CAACM,QAAP,KAAkB,OAAlB,GAA0B,IAA1B,GAA+B,KAA/C;AAAuD,QAAA,IAAI,EAAE,UAA7D;AAAyE,QAAA,KAAK,EAAE,OAAhF;AAAyF,QAAA,OAAO,EAAC,OAAjG;AAAyG,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,YAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CAvBJ,EA+BI,oBAAC,IAAD,CAAM,KAAN;AACQ,QAAA,IAAI,EAAE,aADd;AAEQ,QAAA,KAAK,EAAC,uDAFd;AAGQ,QAAA,KAAK,EAAEP,MAAM,CAACQ,WAHtB;AAIQ,QAAA,WAAW,EAAC,QAJpB;AAKQ,QAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWM,WAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/BJ,EAsCI,oBAAC,IAAD,CAAM,KAAN;AACQ,QAAA,IAAI,EAAE,cADd;AAEQ,QAAA,KAAK,EAAC,2EAFd;AAGQ,QAAA,KAAK,EAAEH,MAAM,CAACS,YAHtB;AAIQ,QAAA,WAAW,EAAC,QAJpB;AAKQ,QAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWM,WAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtCJ,EA6CI,oBAAC,IAAD,CAAM,KAAN;AACQ,QAAA,IAAI,EAAE,eADd;AAEQ,QAAA,KAAK,EAAC,iFAFd;AAGQ,QAAA,KAAK,EAAEH,MAAM,CAACU,aAHtB;AAIQ,QAAA,WAAW,EAAC,QAJpB;AAKQ,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWM,WAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7CJ,CADJ,CADJ,CAZJ,CALR,CADJ;AA8EH;;;;EA/KyBlB,KAAK,CAAC0B,S;;AAiLpC,eAAef,eAAf","sourcesContent":["import React from 'react'\r\nimport {Button,Grid,Form,Divider,Segment, Progress, Header, Popup,Icon} from 'semantic-ui-react'\r\nimport {DateInput} from 'semantic-ui-calendar-react';\r\nclass PrimeClinicForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        /* values={\r\n            clinicP_name:'Klinik UNIMAS',\r\n            clinicP_sym:'Fever',\r\n            clinicP_creat:'No', \r\n            clinicP_RPPD:'Yes',\r\n            visit_date:'2020-02-04',\r\n            dig_note:'DF',\r\n            dig_note:'DF',\r\n        };\r\n        this.handleDate = this.handleDate.bind(this)\r\n        this.handleInput = this.handleInput.bind(this)\r\n        this.handleClick1 = this.handleClick1.bind(this) */\r\n        /* this.handleSave = this.handleSave.bind(this)\r\n        this.handleNext = this.handleNext.bind(this) */\r\n\r\n    }\r\n    state={}\r\n\r\n\r\n    /* componentWillMount(){\r\n        let url = 'http://localhost:8080/primecData'\r\n        fetch(url)\r\n        .then(res =>res.json()\r\n        )\r\n        .then(data =>\r\n            this.setState({\r\n                clinicP_name:data.primecData.clinicP_name,\r\n                clinicP_sym:data.primecData.clinicP_sym,\r\n                clinicP_creat:data.primecData.clinicP_creat, \r\n                clinicP_RPPD:data.primecData.clinicP_RPPD,\r\n                visit_date:data.primecData.visit_date,\r\n                dig_note:data.primecData.dig_note,\r\n                dig_note:data.primecData.dig_note\r\n            })\r\n            )\r\n        .catch(error =>console.error(error))    \r\n    } */\r\n\r\n    /* handleClick1(e){\r\n        let value = e.target.value;\r\n        let name = e.target.name;\r\n        this.setState(prevState =>{\r\n            return{\r\n                    ...prevState, [name]:value,\r\n                                  dig_note:value\r\n            }})\r\n    }\r\n    handleDate = (event, {name, value}) => {\r\n        if (values.hasOwnProperty(name)) {\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n    handleInput(e){\r\n        let value = e.target.value;\r\n        let name = e.target.name;\r\n        this.setState(prevState =>{\r\n            return{\r\n                ...prevState, [name]:value,}},)\r\n                \r\n    } */\r\n    /* handleSave(e){\r\n        this.setState({\r\n            clinicP:{\r\n                clinicP_name:values.clinicP_name,\r\n                clinicP_sym:values.clinicP_sym,\r\n                clinicP_creat:values.clinicP_creat, \r\n                clinicP_RPPD:values.clinicP_RPPD,\r\n                visit_date:values.visit_date,\r\n                dig_note:values.dig_note,    \r\n            }\r\n        })\r\n    }\r\n\r\n    handleNext(){\r\n        let primecData=values.clinicP\r\n        let url = 'http://localhost:8080/primecData'\r\n        console.log(primecData)\r\n            fetch(url,{\r\n                method:\"POST\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify({primecData}),\r\n            })\r\n        this.props.history.push(\"/new/ref\");\r\n    } */\r\n\r\n    render(){\r\n        if(this.props.currentStep !==4){\r\n            return null\r\n        }\r\n        const { values } = this.props;\r\n\r\n        return(\r\n            <div>\r\n                <Header as='h2'textAlign='center'>Primary Clinic Information</Header>\r\n                <Segment basic>\r\n                    <Progress value='3' total='6' progress='ratio' color='orange'/>\r\n                </Segment>\r\n                    <Grid>\r\n                    <Grid.Row centered columns={1}>\r\n                        <Grid.Column textAlign='right'>\r\n                            <Popup \r\n                                trigger={<Icon circular color='teal' name='help' />} \r\n                                position='bottom right'\r\n                                wide='very'>\r\n                                <img src={ require('../img/prInfo1.PNG')}/>\r\n                                <img src={ require('../img/prInfo2.PNG')}/>\r\n                            </Popup>\r\n                        </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row centered columns={2}>\r\n                            <Grid.Column>\r\n                                <Form widths='equal'>\r\n                                    <Form.Group>\r\n                                        <Form.Input\r\n                                            name={'clinicP_name'}\r\n                                            label='Primary clinic patient been visited before this notification:'\r\n                                            value={values.clinicP_name}\r\n                                            placeholder='If Yes'\r\n                                            onChange={this.props.handleInput}\r\n                                        />\r\n                                        \r\n                                    </Form.Group>\r\n                                    <DateInput\r\n                                            label='Visit Date:'\r\n                                            name=\"visit_date\"\r\n                                            placeholder=\"Date\"\r\n                                            value={values.visit_date}\r\n                                            iconPosition=\"left\"\r\n                                            closable={true}\r\n                                            popupPosition='bottom right'\r\n                                            closeOnMouseLeave={false}\r\n                                            onChange={this.props.handleDate}\r\n                                             />\r\n                                    <label><strong>Diagnosa oleh Klink Primer yang dilawati oleh pesakit</strong></label>\r\n                                    <Button.Group compact size={\"tiny\"} inverted color='orange' fluid>\r\n                                        <Button active={values.dig_note==='DF'?true:false} name={'dig_note'} value={'DF'} content='DF' onClick={this.props.handleClick1}/>\r\n                                        <Button active={values.dig_note==='DHF'?true:false}  name={'dig_note'} value={'DHF'} content='DHF' onClick={this.props.handleClick1}/>\r\n                                        <Button active={values.dig_note==='DSS'?true:false}  name={'dig_note'} value={'DSS'} content='DSS' onClick={this.props.handleClick1}/>\r\n                                        <Button active={values.dig_note==='SEVERE DENGUE'?true:false}  name={'dig_note'} value={'SEVERE DENGUE'} content='SEVERE DENGUE' onClick={this.props.handleClick1}/>\r\n                                        <Button active={values.dig_note==='TRO DENGUE'?true:false}  name={'dig_note'} value={'TRO DENGUE'} content='TRO DENGUE' onClick={this.props.handleClick1}/>\r\n                                        <Button active={values.dig_note==='OTHER'?true:false}  name={'dig_note'} value={'OTHER'} content='OTHER' onClick={this.props.handleClick1}/>\r\n                                    </Button.Group>\r\n                                    <Form.Input\r\n                                            name={'clinicP_sym'}\r\n                                            label='Clinical Symtomps during patiet visit primary clinic:'\r\n                                            value={values.clinicP_sym}\r\n                                            placeholder='If Yes'\r\n                                            onChange={this.props.handleInput}\r\n                                    />\r\n                                    <Form.Input\r\n                                            name={'clinicP_RPPD'}\r\n                                            label='If the dignosis is Dengue, REKOD PEMANTUAN PESAKIT DENGGI been delivered?'\r\n                                            value={values.clinicP_RPPD}\r\n                                            placeholder='If Yes'\r\n                                            onChange={this.props.handleInput}\r\n                                    />\r\n                                    <Form.Input\r\n                                            name={'clinicP_creat'}\r\n                                            label='This is the notification been created from primary clinical of patient visited?'\r\n                                            value={values.clinicP_creat}\r\n                                            placeholder='If Yes'\r\n                                            onChange={this.props.handleInput}\r\n                                    />  \r\n                                </Form>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PrimeClinicForm "]},"metadata":{},"sourceType":"module"}