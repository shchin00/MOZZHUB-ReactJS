{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\n// import L from 'leaflet';\n// import 'leaflet/dist/leaflet.css';\n// // Fix for default marker icon issue\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//     iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//     iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n// // Haversine distance function to calculate distance between two coordinates\n// const haversineDistance = (coords1, coords2) => {\n//     const toRad = (x) => x * Math.PI / 180;\n//     const R = 6371e3; // Earth radius in meters\n//     const lat1 = coords1[0];\n//     const lon1 = coords1[1];\n//     const lat2 = coords2[0];\n//     const lon2 = coords2[1];\n//     const dLat = toRad(lat2 - lat1);\n//     const dLon = toRad(lon2 - lon1);\n//     const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//         Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n//         Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     return R * c;\n// };\n// // Function to check if a patient's location is within a cluster's radius\n// const isWithinCluster = (patientCoords, clusterCenter, clusterRadius) => {\n//     const distance = haversineDistance(patientCoords, clusterCenter);\n//     const withinCluster = distance <= clusterRadius;\n//     console.log(`Patient at ${patientCoords} is ${withinCluster ? \"within\" : \"not within\"} the cluster (distance: ${distance.toFixed(2)} meters)`);\n//     return withinCluster;\n// };\n// // Custom icons for patient locations (black circles)\n// const patientIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #000000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// // Custom icon for visited locations (blue circles)\n// const visitIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #0000FF; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// // Custom icon for visited locations within hotspot (red circles)\n// const hotspotVisitIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #FF0000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// const TestFunc = () => {\n//     const [selectedDot, setSelectedDot] = useState(null);\n//     const [selectedHotspot, setSelectedHotspot] = useState(null);\n//     const lat = 1.3521;\n//     const lng = 103.8198;\n//     // Updated patient data structure with more locations\n//     const patientData = [\n//         { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\n//         // { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] },\n//         // { id: 3, position: [1.3721, 103.8398], visits: [[1.3621, 103.8298], [1.3521, 103.8198]] },\n//         // { id: 4, position: [1.3821, 103.8498], visits: [[1.3721, 103.8398], [1.3621, 103.8298]] },\n//         // { id: 5, position: [1.3921, 103.8598], visits: [[1.3821, 103.8498], [1.3721, 103.8398]] }\n//     ];\n//     const hotspots = [\n//         { id: 1, center: [1.3521, 103.8198], radius: 400 },\n//         { id: 2, center: [1.3621, 103.8298], radius: 400 },\n//         { id: 3, center: [1.3721, 103.8398], radius: 400 }\n//     ];\n//     // Function to handle marker click\n//     const handleMarkerClick = (id) => {\n//         setSelectedDot(id);\n//     };\n//     // Function to handle hotspot click\n//     const handleHotspotClick = (id) => {\n//         setSelectedDot(null);\n//         setSelectedHotspot(id);\n//         const hotspotData = hotspots.find(hotspot => hotspot.id === id);\n//         if (hotspotData) {\n//             console.log(`Hotspot ${id} selected`);\n//             patientData.forEach(patient => {\n//                 const isPatientWithinCluster = isWithinCluster(patient.position, hotspotData.center, hotspotData.radius);\n//                 if (isPatientWithinCluster) {\n//                     console.log(`Patient ${patient.id} is within the cluster at ${hotspotData.center}`);\n//                 }\n//                 patient.visits.forEach((visit, index) => {\n//                     const isVisitWithinCluster = isWithinCluster(visit, hotspotData.center, hotspotData.radius);\n//                     if (isVisitWithinCluster) {\n//                         console.log(`Patient ${patient.id}'s visit ${index + 1} at ${visit} is within the cluster at ${hotspotData.center}`);\n//                     }\n//                 });\n//             });\n//         }\n//     };\n//     const selectedHotspotData = hotspots.find(hotspot => hotspot.id === selectedHotspot);\n//     return (\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\n//             <TileLayer\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//             />\n//             {patientData.map(patient => (\n//                 <Marker key={patient.id} position={patient.position} icon={patientIcon} eventHandlers={{ click: () => handleMarkerClick(patient.id) }}>\n//                     {selectedDot === patient.id && patient.visits.map((visit, index) => (\n//                         <Polyline key={index} positions={[patient.position, visit]} color='black' />\n//                     ))}\n//                 </Marker>\n//             ))}\n//             {hotspots.map(hotspot => (\n//                 <Circle\n//                     key={hotspot.id}\n//                     center={hotspot.center}\n//                     radius={hotspot.radius}\n//                     color=\"red\"\n//                     fillColor=\"red\"\n//                     fillOpacity={0.3}\n//                     eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\n//                 />\n//             ))}\n//             {selectedHotspotData && (\n//                 <>\n//                     {patientData.map(patient => (\n//                         isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && \n//                         <Marker key={`patient-${patient.id}`} position={patient.position} icon={patientIcon} />\n//                     ))}\n//                     {patientData.map(patient => (\n//                         patient.visits.map((visit, index) => (\n//                             isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && \n//                             <Marker key={`visit-${patient.id}-${index}`} position={visit} icon={visitIcon} />\n//                         ))\n//                     ))}\n//                 </>\n//             )}\n//             {hotspots.map(hotspot => (\n//                 patientData.map(patient => (\n//                     isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \n//                     <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\n//                 ))\n//             ))}\n//         </Map>\n//     );\n// };\n// export default TestFunc;","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\test.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState } from 'react';\r\n// import { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\r\n// import L from 'leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n\r\n// // Fix for default marker icon issue\r\n// delete L.Icon.Default.prototype._getIconUrl;\r\n// L.Icon.Default.mergeOptions({\r\n//     iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n//     iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n//     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n// });\r\n\r\n// // Haversine distance function to calculate distance between two coordinates\r\n// const haversineDistance = (coords1, coords2) => {\r\n//     const toRad = (x) => x * Math.PI / 180;\r\n//     const R = 6371e3; // Earth radius in meters\r\n\r\n//     const lat1 = coords1[0];\r\n//     const lon1 = coords1[1];\r\n//     const lat2 = coords2[0];\r\n//     const lon2 = coords2[1];\r\n\r\n//     const dLat = toRad(lat2 - lat1);\r\n//     const dLon = toRad(lon2 - lon1);\r\n//     const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n//         Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n//         Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n//     return R * c;\r\n// };\r\n\r\n// // Function to check if a patient's location is within a cluster's radius\r\n// const isWithinCluster = (patientCoords, clusterCenter, clusterRadius) => {\r\n//     const distance = haversineDistance(patientCoords, clusterCenter);\r\n//     const withinCluster = distance <= clusterRadius;\r\n//     console.log(`Patient at ${patientCoords} is ${withinCluster ? \"within\" : \"not within\"} the cluster (distance: ${distance.toFixed(2)} meters)`);\r\n//     return withinCluster;\r\n// };\r\n\r\n// // Custom icons for patient locations (black circles)\r\n// const patientIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #000000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// // Custom icon for visited locations (blue circles)\r\n// const visitIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #0000FF; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// // Custom icon for visited locations within hotspot (red circles)\r\n// const hotspotVisitIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #FF0000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// const TestFunc = () => {\r\n//     const [selectedDot, setSelectedDot] = useState(null);\r\n//     const [selectedHotspot, setSelectedHotspot] = useState(null);\r\n//     const lat = 1.3521;\r\n//     const lng = 103.8198;\r\n\r\n//     // Updated patient data structure with more locations\r\n//     const patientData = [\r\n//         { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\r\n//         // { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] },\r\n//         // { id: 3, position: [1.3721, 103.8398], visits: [[1.3621, 103.8298], [1.3521, 103.8198]] },\r\n//         // { id: 4, position: [1.3821, 103.8498], visits: [[1.3721, 103.8398], [1.3621, 103.8298]] },\r\n//         // { id: 5, position: [1.3921, 103.8598], visits: [[1.3821, 103.8498], [1.3721, 103.8398]] }\r\n//     ];\r\n\r\n//     const hotspots = [\r\n//         { id: 1, center: [1.3521, 103.8198], radius: 400 },\r\n//         { id: 2, center: [1.3621, 103.8298], radius: 400 },\r\n//         { id: 3, center: [1.3721, 103.8398], radius: 400 }\r\n//     ];\r\n\r\n//     // Function to handle marker click\r\n//     const handleMarkerClick = (id) => {\r\n//         setSelectedDot(id);\r\n//     };\r\n\r\n//     // Function to handle hotspot click\r\n//     const handleHotspotClick = (id) => {\r\n//         setSelectedDot(null);\r\n//         setSelectedHotspot(id);\r\n\r\n//         const hotspotData = hotspots.find(hotspot => hotspot.id === id);\r\n//         if (hotspotData) {\r\n//             console.log(`Hotspot ${id} selected`);\r\n//             patientData.forEach(patient => {\r\n//                 const isPatientWithinCluster = isWithinCluster(patient.position, hotspotData.center, hotspotData.radius);\r\n//                 if (isPatientWithinCluster) {\r\n//                     console.log(`Patient ${patient.id} is within the cluster at ${hotspotData.center}`);\r\n//                 }\r\n//                 patient.visits.forEach((visit, index) => {\r\n//                     const isVisitWithinCluster = isWithinCluster(visit, hotspotData.center, hotspotData.radius);\r\n//                     if (isVisitWithinCluster) {\r\n//                         console.log(`Patient ${patient.id}'s visit ${index + 1} at ${visit} is within the cluster at ${hotspotData.center}`);\r\n//                     }\r\n//                 });\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const selectedHotspotData = hotspots.find(hotspot => hotspot.id === selectedHotspot);\r\n\r\n//     return (\r\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\r\n//             <TileLayer\r\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//             />\r\n\r\n//             {patientData.map(patient => (\r\n//                 <Marker key={patient.id} position={patient.position} icon={patientIcon} eventHandlers={{ click: () => handleMarkerClick(patient.id) }}>\r\n//                     {selectedDot === patient.id && patient.visits.map((visit, index) => (\r\n//                         <Polyline key={index} positions={[patient.position, visit]} color='black' />\r\n//                     ))}\r\n//                 </Marker>\r\n//             ))}\r\n\r\n//             {hotspots.map(hotspot => (\r\n//                 <Circle\r\n//                     key={hotspot.id}\r\n//                     center={hotspot.center}\r\n//                     radius={hotspot.radius}\r\n//                     color=\"red\"\r\n//                     fillColor=\"red\"\r\n//                     fillOpacity={0.3}\r\n//                     eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\r\n//                 />\r\n//             ))}\r\n\r\n//             {selectedHotspotData && (\r\n//                 <>\r\n//                     {patientData.map(patient => (\r\n//                         isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && \r\n//                         <Marker key={`patient-${patient.id}`} position={patient.position} icon={patientIcon} />\r\n//                     ))}\r\n\r\n//                     {patientData.map(patient => (\r\n//                         patient.visits.map((visit, index) => (\r\n//                             isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && \r\n//                             <Marker key={`visit-${patient.id}-${index}`} position={visit} icon={visitIcon} />\r\n//                         ))\r\n//                     ))}\r\n//                 </>\r\n//             )}\r\n\r\n//             {hotspots.map(hotspot => (\r\n//                 patientData.map(patient => (\r\n//                     isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \r\n//                     <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\r\n//                 ))\r\n//             ))}\r\n//         </Map>\r\n//     );\r\n// };\r\n\r\n// export default TestFunc;\r\n"]},"metadata":{},"sourceType":"module"}