{"ast":null,"code":"import _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\Dashboard.js\";\n// import React from 'react'\n// import MenuBar from './MenuBar'\n// import Heatmap from './Heatmap'\n// import BarChart from './BarChart'\n// import Footer from './Footer'\n// import { push } from 'react-router-redux'\n// import { connect } from 'react-redux'\n// import config from '../config'\n// import {Table,Grid,Divider, Segment,Statistic,List,Loader,Dimmer} from 'semantic-ui-react'\n// class Dashboard extends React.Component{\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             wait:false,\n//             dateGen:'',\n//             ranking2:[],\n//             center:'',\n//             monthData:[],\n//             barLabel:[],\n//             barData:[],\n//             sub_loc:'',\n//             total_case:'',\n//             update_date:'',\n//             user:''\n//         };\n//         this.handleDate = this.handleDate.bind(this)\n//     }\n//     componentWillMount(){\n//         const {user} = this.props\n//         //console.log(user.area)\n//     }\n//     componentDidMount() {\n//         const { dispatch, ranking } = this.props\n//         //console.log(ranking)\n//         const auth_token = sessionStorage.getItem('token');\n//         const user = sessionStorage.getItem('user');\n//         const area = sessionStorage.getItem('area');\n//         const level = sessionStorage.getItem('level');\n//         if (auth_token) {\n//             if(level==1){\n//                 let url2 = `${config.url}/monthData`\n//                 let url3 = `${config.url}/ranking/`+area\n//                 try{\n//                     fetch(url3)\n//                     .then(res=>res.json())\n//                     //.then(data => console.log(data))\n//                     .then(result => this.setState({\n//                         wait:false,\n//                         ranking2:JSON.parse(result.data[0].ranking),\n//                         update_date:(result.data[0].gen_Date).split(' ')[0],\n//                         sub_loc:result.sub_loc,\n//                         total_case:result.num_case,\n//                         })\n//                     )\n//                 }\n//                 catch(err){\n//                     console.log(err)\n//                     this.setState({\n//                         wait:false\n//                     })\n//                 }\n//                 try{\n//                     fetch(url2)\n//                     .then(res => res.json())\n//                     .then(data => this.setState({barLabel:data[0],barData:data[1]}))\n//                 }\n//                 catch(err){\n//                     console.log(err)\n//                 }\n//             }\n//         } \n//         else {\n//             sessionStorage.setItem('lat',3.14056039883967)\n//             sessionStorage.setItem('lng',101.59909644810003)\n//             dispatch(push('/login'))\n//         }\n//     }\n//     handleDate = (event, {name, value}) => {\n//         if (this.state.hasOwnProperty(name)) {\n//             this.setState({ [name]: value });\n//         }\n//     }\n//     createList(){\n//         var ranking =this.state.ranking2\n//         var sub_loc = this.state.sub_loc\n//         return ranking.map((el,i) => (\n//             <Table inverted>\n//                 <Table.Body>\n//                     <Table.Row key={i}>\n//                     <Table.Cell>\n//                         <h3>#{i+1}</h3>\n//                         <List bulleted>\n//                                 { sub_loc[i].sub_loc_name.map((el,j)=>\n//                                     <List.Item key ={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\n//                         </List>\n//                     </Table.Cell>\n//                     </Table.Row>\n//                 </Table.Body>\n//             </Table>\n//         ))}\n//     render(){\n//         const divStyle ={\n//             backgroundColor : 'black'\n//         }\n//         const area = sessionStorage.getItem('area');\n//         var lat = sessionStorage.getItem('lat');\n//         var lng = sessionStorage.getItem('lng');\n//         if(lat==null&&lng==null){\n//             lat = 3.14056039883967\n//             lng = 101.59909644810003\n//         }\n//         return(\n//             <div style={divStyle}>\n//                 <MenuBar activeItem='dashboard' name={this.props.user.name}/>\n//                 <Grid stackable>\n//                 <Dimmer active={this.state.wait}>\n//                                 <Loader active={this.state.wait}>Preparing Data</Loader>\n//                             </Dimmer>\n//                     <Grid.Row columns={2}>\n//                         <Grid.Column textAlign='left' width={3}>\n//                             <Segment style={{height: 60,textAlign:'center' }} inverted><h1>{area}</h1></Segment>\n//                             <Segment inverted style={{overflow: 'auto', maxHeight: 530 }}>\n//                                 <h2 style={{textAlign:'center' }}> Source of Infection </h2>\n//                                 {this.createList()}\n//                             </Segment>\n//                             <Segment style={{height: 100,textAlign:'center' }} inverted>\n//                                 <Statistic color='orange'>\n//                                     <Statistic.Value>{this.state.total_case}</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Total Cases</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment>\n//                             {/* <Segment style={{height: 100,textAlign:'center' }} inverted>\n//                                 <Statistic color='orange'>\n//                                     <Statistic.Value>10</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Total Locations</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment> */}\n//                             <Segment style={{height: 90,textAlign:'center' }} inverted>\n//                                 <Statistic color='green' size='small'>\n//                                     <Statistic.Value>{this.state.update_date}</Statistic.Value>\n//                                     <Statistic.Label style={{color:'white'}}>Last Updated On</Statistic.Label>\n//                                 </Statistic>\n//                             </Segment>\n//                             <Divider hidden/>\n//                             <Grid.Row >\n//                             </Grid.Row>\n//                         </Grid.Column>\n//                         <Grid.Column width={12}>\n//                             <Grid.Row>\n//                                 {/* <h1>Dengue Source of Infection Heatmap</h1>\n//                                 <br/>\n//                                     {<img\n//                                     src={require('../img/indicator.png')}\n//                                     alt='indicator of the heatmap color'\n//                                     width={400}\n//                                     />\n//                                     } */}\n//                                     <Heatmap lat = {lat} lng={lng} ranking={this.state.ranking2}/>\n//                             </Grid.Row>\n//                             <Divider hidden/>\n//                             <Grid.Row>\n//                             {/* <Grid>\n//                                 <Grid.Row centered columns={2}>\n//                                     <Grid.Column>\n//                                         <Segment inverted color='black'>\n//                                             <BarChart\n//                                                 data={this.state.barData}\n//                                                 labels={this.state.barLabel}\n//                                                 label='Case Number'\n//                                             />\n//                                         </Segment>\n//                                     </Grid.Column>\n//                                 </Grid.Row>\n//                             </Grid> */}\n//                             </Grid.Row>\n//                             <Divider hidden />\n//                         </Grid.Column>\n//                     </Grid.Row>\n//                 </Grid>\n//             <Footer/>\n//             </div>\n//         )\n//     }\n// }\n// const mapState = state => ({\n//     user: state.user\n// })\n// const mapDispatch = dispatch => ({\n//     dispatch,\n//     getNodes: dispatch.nodes.getNodes()\n// })\n// export default connect(mapState,mapDispatch)(Dashboard)\nimport React from 'react';\nimport MenuBar from './MenuBar';\nimport Heatmap from './Heatmap';\nimport BarChart from './BarChart';\nimport Footer from './Footer';\nimport { push } from 'react-router-redux';\nimport { connect } from 'react-redux';\nimport config from '../config';\nimport { Table, Grid, Divider, Segment, Statistic, List, Loader, Dimmer } from 'semantic-ui-react';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.handleDate = function (event, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n\n      if (_this.state.hasOwnProperty(name)) {\n        _this.setState(_defineProperty({}, name, value));\n      }\n    };\n\n    _this.state = {\n      wait: false,\n      dateGen: '',\n      ranking2: [],\n      center: '',\n      monthData: [],\n      barLabel: [],\n      barData: [],\n      sub_loc: '',\n      total_case: '',\n      update_date: '',\n      user: ''\n    };\n    _this.handleDate = _this.handleDate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var user = this.props.user; //console.log(user.area)\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          ranking = _this$props.ranking; //console.log(ranking)\n\n      var auth_token = sessionStorage.getItem('token');\n      var user = sessionStorage.getItem('user');\n      var area = sessionStorage.getItem('area');\n      var level = sessionStorage.getItem('level');\n\n      if (auth_token) {\n        if (level == 1) {\n          var url2 = \"\".concat(config.url, \"/monthData\");\n          var url3 = \"\".concat(config.url, \"/ranking/\") + area;\n\n          try {\n            fetch(url3).then(function (res) {\n              return res.json();\n            }) //.then(data => console.log(data))\n            .then(function (result) {\n              return _this2.setState({\n                wait: false,\n                ranking2: JSON.parse(result.data[0].ranking),\n                update_date: result.data[0].gen_Date.split(' ')[0],\n                sub_loc: result.sub_loc,\n                total_case: result.num_case\n              });\n            });\n          } catch (err) {\n            console.log(err);\n            this.setState({\n              wait: false\n            });\n          }\n\n          try {\n            fetch(url2).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return _this2.setState({\n                barLabel: data[0],\n                barData: data[1]\n              });\n            });\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      } else {\n        sessionStorage.setItem('lat', 3.14056039883967);\n        sessionStorage.setItem('lng', 101.59909644810003);\n        dispatch(push('/login'));\n      }\n    }\n  }, {\n    key: \"createList\",\n    value: function createList() {\n      var ranking = this.state.ranking2;\n      var sub_loc = this.state.sub_loc;\n      return ranking.map(function (el, i) {\n        return React.createElement(Table, {\n          inverted: true,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, React.createElement(Table.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        }, \"#\", i + 1), React.createElement(List, {\n          bulleted: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }, sub_loc[i].sub_loc_name.map(function (el, j) {\n          return React.createElement(List.Item, {\n            key: j,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }, sub_loc[i].sub_loc_name[j]);\n        }))))));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var divStyle = {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: 'black'\n      };\n      var area = sessionStorage.getItem('area');\n      var lat = sessionStorage.getItem('lat');\n      var lng = sessionStorage.getItem('lng');\n\n      if (lat == null && lng == null) {\n        lat = 3.14056039883967;\n        lng = 101.59909644810003;\n      }\n\n      return React.createElement(\"div\", {\n        style: divStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(MenuBar, {\n        activeItem: \"dashboard\",\n        name: this.props.user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        stackable: true,\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: this.state.wait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        active: this.state.wait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Preparing Data\")), React.createElement(Grid.Row, {\n        columns: 2,\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        textAlign: \"left\",\n        width: 3,\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        style: {\n          flex: '0 0 auto',\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, area)), React.createElement(Segment, {\n        inverted: true,\n        style: {\n          flex: '1 1 auto',\n          overflow: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \" Source of Infection \"), this.createList()), React.createElement(Segment, {\n        style: {\n          flex: '0 0 auto',\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, React.createElement(Statistic, {\n        color: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, this.state.total_case), React.createElement(Statistic.Label, {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"Total Cases\"))), React.createElement(Segment, {\n        style: {\n          flex: '0 0 auto',\n          textAlign: 'center'\n        },\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(Statistic, {\n        color: \"green\",\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(Statistic.Value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, this.state.update_date), React.createElement(Statistic.Label, {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, \"Last Updated On\"))), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 13,\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        style: {\n          flex: '1 1 auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Heatmap, {\n        lat: lat,\n        lng: lng,\n        ranking: this.state.ranking2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        style: {\n          flex: '0 0 auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      })))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nvar mapState = function mapState(state) {\n  return {\n    user: state.user\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    dispatch: dispatch,\n    getNodes: dispatch.nodes.getNodes()\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Dashboard);","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\Dashboard.js"],"names":["React","MenuBar","Heatmap","BarChart","Footer","push","connect","config","Table","Grid","Divider","Segment","Statistic","List","Loader","Dimmer","Dashboard","props","handleDate","event","name","value","state","hasOwnProperty","setState","wait","dateGen","ranking2","center","monthData","barLabel","barData","sub_loc","total_case","update_date","user","bind","dispatch","ranking","auth_token","sessionStorage","getItem","area","level","url2","url","url3","fetch","then","res","json","result","JSON","parse","data","gen_Date","split","num_case","err","console","log","setItem","map","el","i","sub_loc_name","j","divStyle","height","display","flexDirection","backgroundColor","lat","lng","flex","textAlign","overflow","createList","color","Component","mapState","mapDispatch","getNodes","nodes"],"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","sourcesContent":["// import React from 'react'\r\n// import MenuBar from './MenuBar'\r\n// import Heatmap from './Heatmap'\r\n// import BarChart from './BarChart'\r\n// import Footer from './Footer'\r\n// import { push } from 'react-router-redux'\r\n// import { connect } from 'react-redux'\r\n// import config from '../config'\r\n// import {Table,Grid,Divider, Segment,Statistic,List,Loader,Dimmer} from 'semantic-ui-react'\r\n// class Dashboard extends React.Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state={\r\n//             wait:false,\r\n//             dateGen:'',\r\n//             ranking2:[],\r\n//             center:'',\r\n//             monthData:[],\r\n//             barLabel:[],\r\n//             barData:[],\r\n//             sub_loc:'',\r\n//             total_case:'',\r\n//             update_date:'',\r\n//             user:''\r\n//         };\r\n//         this.handleDate = this.handleDate.bind(this)\r\n//     }\r\n//     componentWillMount(){\r\n//         const {user} = this.props\r\n//         //console.log(user.area)\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         const { dispatch, ranking } = this.props\r\n//         //console.log(ranking)\r\n//         const auth_token = sessionStorage.getItem('token');\r\n//         const user = sessionStorage.getItem('user');\r\n//         const area = sessionStorage.getItem('area');\r\n//         const level = sessionStorage.getItem('level');\r\n//         if (auth_token) {\r\n//             if(level==1){\r\n//                 let url2 = `${config.url}/monthData`\r\n//                 let url3 = `${config.url}/ranking/`+area\r\n//                 try{\r\n//                     fetch(url3)\r\n//                     .then(res=>res.json())\r\n//                     //.then(data => console.log(data))\r\n//                     .then(result => this.setState({\r\n//                         wait:false,\r\n//                         ranking2:JSON.parse(result.data[0].ranking),\r\n//                         update_date:(result.data[0].gen_Date).split(' ')[0],\r\n//                         sub_loc:result.sub_loc,\r\n//                         total_case:result.num_case,\r\n//                         })\r\n//                     )\r\n//                 }\r\n//                 catch(err){\r\n//                     console.log(err)\r\n//                     this.setState({\r\n//                         wait:false\r\n//                     })\r\n//                 }\r\n//                 try{\r\n//                     fetch(url2)\r\n//                     .then(res => res.json())\r\n//                     .then(data => this.setState({barLabel:data[0],barData:data[1]}))\r\n//                 }\r\n//                 catch(err){\r\n//                     console.log(err)\r\n//                 }\r\n//             }\r\n//         } \r\n//         else {\r\n//             sessionStorage.setItem('lat',3.14056039883967)\r\n//             sessionStorage.setItem('lng',101.59909644810003)\r\n//             dispatch(push('/login'))\r\n//         }\r\n\r\n//     }\r\n\r\n//     handleDate = (event, {name, value}) => {\r\n//         if (this.state.hasOwnProperty(name)) {\r\n//             this.setState({ [name]: value });\r\n//         }\r\n//     }\r\n\r\n//     createList(){\r\n//         var ranking =this.state.ranking2\r\n//         var sub_loc = this.state.sub_loc\r\n//         return ranking.map((el,i) => (\r\n//             <Table inverted>\r\n//                 <Table.Body>\r\n//                     <Table.Row key={i}>\r\n//                     <Table.Cell>\r\n//                         <h3>#{i+1}</h3>\r\n//                         <List bulleted>\r\n//                                 { sub_loc[i].sub_loc_name.map((el,j)=>\r\n//                                     <List.Item key ={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\r\n//                         </List>\r\n//                     </Table.Cell>\r\n//                     </Table.Row>\r\n//                 </Table.Body>\r\n//             </Table>\r\n//         ))}\r\n\r\n//     render(){\r\n//         const divStyle ={\r\n//             backgroundColor : 'black'\r\n//         }\r\n//         const area = sessionStorage.getItem('area');\r\n//         var lat = sessionStorage.getItem('lat');\r\n//         var lng = sessionStorage.getItem('lng');\r\n//         if(lat==null&&lng==null){\r\n//             lat = 3.14056039883967\r\n//             lng = 101.59909644810003\r\n            \r\n//         }\r\n//         return(\r\n//             <div style={divStyle}>\r\n//                 <MenuBar activeItem='dashboard' name={this.props.user.name}/>\r\n//                 <Grid stackable>\r\n//                 <Dimmer active={this.state.wait}>\r\n//                                 <Loader active={this.state.wait}>Preparing Data</Loader>\r\n//                             </Dimmer>\r\n//                     <Grid.Row columns={2}>\r\n//                         <Grid.Column textAlign='left' width={3}>\r\n//                             <Segment style={{height: 60,textAlign:'center' }} inverted><h1>{area}</h1></Segment>\r\n//                             <Segment inverted style={{overflow: 'auto', maxHeight: 530 }}>\r\n//                                 <h2 style={{textAlign:'center' }}> Source of Infection </h2>\r\n//                                 {this.createList()}\r\n//                             </Segment>\r\n//                             <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='orange'>\r\n//                                     <Statistic.Value>{this.state.total_case}</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Total Cases</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment>\r\n//                             {/* <Segment style={{height: 100,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='orange'>\r\n//                                     <Statistic.Value>10</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Total Locations</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment> */}\r\n//                             <Segment style={{height: 90,textAlign:'center' }} inverted>\r\n//                                 <Statistic color='green' size='small'>\r\n//                                     <Statistic.Value>{this.state.update_date}</Statistic.Value>\r\n//                                     <Statistic.Label style={{color:'white'}}>Last Updated On</Statistic.Label>\r\n//                                 </Statistic>\r\n//                             </Segment>\r\n//                             <Divider hidden/>\r\n//                             <Grid.Row >\r\n//                             </Grid.Row>\r\n                            \r\n//                         </Grid.Column>\r\n//                         <Grid.Column width={12}>\r\n//                             <Grid.Row>\r\n//                                 {/* <h1>Dengue Source of Infection Heatmap</h1>\r\n//                                 <br/>\r\n//                                     {<img\r\n//                                     src={require('../img/indicator.png')}\r\n//                                     alt='indicator of the heatmap color'\r\n//                                     width={400}\r\n//                                     />\r\n//                                     } */}\r\n//                                     <Heatmap lat = {lat} lng={lng} ranking={this.state.ranking2}/>\r\n//                             </Grid.Row>\r\n//                             <Divider hidden/>\r\n//                             <Grid.Row>\r\n//                             {/* <Grid>\r\n//                                 <Grid.Row centered columns={2}>\r\n//                                     <Grid.Column>\r\n//                                         <Segment inverted color='black'>\r\n//                                             <BarChart\r\n//                                                 data={this.state.barData}\r\n//                                                 labels={this.state.barLabel}\r\n//                                                 label='Case Number'\r\n//                                             />\r\n//                                         </Segment>\r\n//                                     </Grid.Column>\r\n//                                 </Grid.Row>\r\n//                             </Grid> */}\r\n//                             </Grid.Row>\r\n//                             <Divider hidden />\r\n//                         </Grid.Column>\r\n//                     </Grid.Row>\r\n//                 </Grid>\r\n//             <Footer/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// const mapState = state => ({\r\n//     user: state.user\r\n// })\r\n\r\n// const mapDispatch = dispatch => ({\r\n//     dispatch,\r\n//     getNodes: dispatch.nodes.getNodes()\r\n\r\n// })\r\n// export default connect(mapState,mapDispatch)(Dashboard)\r\n\r\nimport React from 'react';\r\nimport MenuBar from './MenuBar';\r\nimport Heatmap from './Heatmap';\r\nimport BarChart from './BarChart';\r\nimport Footer from './Footer';\r\nimport { push } from 'react-router-redux';\r\nimport { connect } from 'react-redux';\r\nimport config from '../config';\r\nimport { Table, Grid, Divider, Segment, Statistic, List, Loader, Dimmer } from 'semantic-ui-react';\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            wait: false,\r\n            dateGen: '',\r\n            ranking2: [],\r\n            center: '',\r\n            monthData: [],\r\n            barLabel: [],\r\n            barData: [],\r\n            sub_loc: '',\r\n            total_case: '',\r\n            update_date: '',\r\n            user: ''\r\n        };\r\n        this.handleDate = this.handleDate.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { user } = this.props;\r\n        //console.log(user.area)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { dispatch, ranking } = this.props;\r\n        //console.log(ranking)\r\n        const auth_token = sessionStorage.getItem('token');\r\n        const user = sessionStorage.getItem('user');\r\n        const area = sessionStorage.getItem('area');\r\n        const level = sessionStorage.getItem('level');\r\n        if (auth_token) {\r\n            if (level == 1) {\r\n                let url2 = `${config.url}/monthData`;\r\n                let url3 = `${config.url}/ranking/` + area;\r\n                try {\r\n                    fetch(url3)\r\n                        .then(res => res.json())\r\n                        //.then(data => console.log(data))\r\n                        .then(result => this.setState({\r\n                            wait: false,\r\n                            ranking2: JSON.parse(result.data[0].ranking),\r\n                            update_date: (result.data[0].gen_Date).split(' ')[0],\r\n                            sub_loc: result.sub_loc,\r\n                            total_case: result.num_case,\r\n                        })\r\n                        );\r\n                }\r\n                catch (err) {\r\n                    console.log(err);\r\n                    this.setState({\r\n                        wait: false\r\n                    });\r\n                }\r\n                try {\r\n                    fetch(url2)\r\n                        .then(res => res.json())\r\n                        .then(data => this.setState({ barLabel: data[0], barData: data[1] }));\r\n                }\r\n                catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } else {\r\n            sessionStorage.setItem('lat', 3.14056039883967);\r\n            sessionStorage.setItem('lng', 101.59909644810003);\r\n            dispatch(push('/login'));\r\n        }\r\n    }\r\n\r\n    handleDate = (event, { name, value }) => {\r\n        if (this.state.hasOwnProperty(name)) {\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n\r\n    createList() {\r\n        var ranking = this.state.ranking2;\r\n        var sub_loc = this.state.sub_loc;\r\n        return ranking.map((el, i) => (\r\n            <Table inverted key={i}>\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell>\r\n                            <h3>#{i + 1}</h3>\r\n                            <List bulleted>\r\n                                {sub_loc[i].sub_loc_name.map((el, j) =>\r\n                                    <List.Item key={j}>{sub_loc[i].sub_loc_name[j]}</List.Item>)}\r\n                            </List>\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        const divStyle = {\r\n            height: '100vh',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            backgroundColor: 'black'\r\n        };\r\n        const area = sessionStorage.getItem('area');\r\n        var lat = sessionStorage.getItem('lat');\r\n        var lng = sessionStorage.getItem('lng');\r\n        if (lat == null && lng == null) {\r\n            lat = 3.14056039883967;\r\n            lng = 101.59909644810003;\r\n        }\r\n        return (\r\n            <div style={divStyle}>\r\n                <MenuBar activeItem='dashboard' name={this.props.user.name} />\r\n                <Grid stackable style={{ flex: 1 }}>\r\n                    <Dimmer active={this.state.wait}>\r\n                        <Loader active={this.state.wait}>Preparing Data</Loader>\r\n                    </Dimmer>\r\n                    <Grid.Row columns={2} style={{ flex: 1 }}>\r\n                        <Grid.Column textAlign='left' width={3} style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Segment style={{ flex: '0 0 auto', textAlign: 'center' }} inverted>\r\n                                <h1>{area}</h1>\r\n                            </Segment>\r\n                            <Segment inverted style={{ flex: '1 1 auto', overflow: 'auto' }}>\r\n                                <h2 style={{ textAlign: 'center' }}> Source of Infection </h2>\r\n                                {this.createList()}\r\n                            </Segment>\r\n                            <Segment style={{ flex: '0 0 auto', textAlign: 'center' }} inverted>\r\n                                <Statistic color='orange'>\r\n                                    <Statistic.Value>{this.state.total_case}</Statistic.Value>\r\n                                    <Statistic.Label style={{ color: 'white' }}>Total Cases</Statistic.Label>\r\n                                </Statistic>\r\n                            </Segment>\r\n                            <Segment style={{ flex: '0 0 auto', textAlign: 'center' }} inverted>\r\n                                <Statistic color='green' size='small'>\r\n                                    <Statistic.Value>{this.state.update_date}</Statistic.Value>\r\n                                    <Statistic.Label style={{ color: 'white' }}>Last Updated On</Statistic.Label>\r\n                                </Statistic>\r\n                            </Segment>\r\n                            <Divider hidden />\r\n                        </Grid.Column>\r\n                        <Grid.Column width={13} style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Grid.Row style={{ flex: '1 1 auto' }}>\r\n                                <Heatmap lat={lat} lng={lng} ranking={this.state.ranking2} />\r\n                            </Grid.Row>\r\n                            <Divider hidden />\r\n                            <Grid.Row style={{ flex: '0 0 auto' }}>\r\n                                {/* Your additional content here */}\r\n                            </Grid.Row>\r\n                            <Divider hidden />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = state => ({\r\n    user: state.user\r\n});\r\n\r\nconst mapDispatch = dispatch => ({\r\n    dispatch,\r\n    getNodes: dispatch.nodes.getNodes()\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(Dashboard);\r\n"]},"metadata":{},"sourceType":"module"}