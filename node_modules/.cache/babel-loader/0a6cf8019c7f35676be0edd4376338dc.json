{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"className\", \"lastTransitionedPropertyOnExit\", \"enterClassName\", \"exitClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTransitionStateManager } from '../useTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\n\nvar CssTransition =\n/*#__PURE__*/\nReact.forwardRef(function CssTransition(props, forwardedRef) {\n  var children = props.children,\n      className = props.className,\n      lastTransitionedPropertyOnExit = props.lastTransitionedPropertyOnExit,\n      enterClassName = props.enterClassName,\n      exitClassName = props.exitClassName,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useTransitionStateMa = useTransitionStateManager(),\n      requestedEnter = _useTransitionStateMa.requestedEnter,\n      onExited = _useTransitionStateMa.onExited;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isEntering = _React$useState2[0],\n      setIsEntering = _React$useState2[1]; // The `isEntering` state (which is used to determine the right CSS class to apply)\n  // is updated slightly (one animation frame) after the `requestedEnter` state is updated.\n  // Thanks to this, elements that are mounted will have their enter transition applied\n  // (if the `enterClassName` was applied when the element was mounted, the transition would not be fired).\n\n\n  React.useEffect(function () {\n    if (requestedEnter) {\n      requestAnimationFrame(function () {\n        setIsEntering(true);\n      });\n    } else {\n      setIsEntering(false);\n    }\n  }, [requestedEnter]);\n  var handleTransitionEnd = React.useCallback(function (event) {\n    if (!requestedEnter && (lastTransitionedPropertyOnExit == null || event.propertyName === lastTransitionedPropertyOnExit)) {\n      onExited();\n    }\n  }, [onExited, requestedEnter, lastTransitionedPropertyOnExit]);\n  return (\n    /*#__PURE__*/\n    _jsx(\"div\", _extends({\n      onTransitionEnd: handleTransitionEnd,\n      className: clsx(className, isEntering ? enterClassName : exitClassName)\n    }, other, {\n      ref: forwardedRef,\n      children: children\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? CssTransition.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  enterClassName: PropTypes.string,\n  exitClassName: PropTypes.string,\n  lastTransitionedPropertyOnEnter: PropTypes.string,\n  lastTransitionedPropertyOnExit: PropTypes.string\n} : void 0;\nexport { CssTransition };","map":null,"metadata":{},"sourceType":"module"}