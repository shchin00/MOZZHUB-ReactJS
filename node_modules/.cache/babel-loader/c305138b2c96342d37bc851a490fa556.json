{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useThemeProps from '../styles/useThemeProps';\nimport GlobalStyles from '../GlobalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var html = function html(theme, enableColorScheme) {\n  return _extends({\n    WebkitFontSmoothing: 'antialiased',\n    // Antialiasing.\n    MozOsxFontSmoothing: 'grayscale',\n    // Antialiasing.\n    // Change from `box-sizing: content-box` so that `width`\n    // is not affected by `padding` or `border`.\n    boxSizing: 'border-box',\n    // Fix font resize problem in iOS\n    WebkitTextSizeAdjust: '100%'\n  }, enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  });\n};\nexport var body = function body(theme) {\n  return _extends({\n    color: (theme.vars || theme).palette.text.primary\n  }, theme.typography.body1, {\n    backgroundColor: (theme.vars || theme).palette.background.default,\n    '@media print': {\n      // Save printer ink.\n      backgroundColor: (theme.vars || theme).palette.common.white\n    }\n  });\n};\n\nvar _styles = function styles(theme) {\n  var enableColorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _theme$components;\n\n  var colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          scheme = _ref2[1];\n\n      var _scheme$palette;\n\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\n      };\n    });\n  }\n\n  var defaultStyles = _extends({\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _extends({\n      margin: 0\n    }, body(theme), {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    })\n  }, colorSchemeStyles);\n\n  var themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n};\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\n\nexport { _styles as styles };\n\nfunction CssBaseline(inProps) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  var children = props.children,\n      _props$enableColorSch = props.enableColorScheme,\n      enableColorScheme = _props$enableColorSch === void 0 ? false : _props$enableColorSch;\n  return (\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      _jsx(GlobalStyles, {\n        styles: function styles(theme) {\n          return _styles(theme, enableColorScheme);\n        }\n      }), children]\n    })\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","map":null,"metadata":{},"sourceType":"module"}