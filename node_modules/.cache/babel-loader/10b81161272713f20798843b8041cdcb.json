{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _defineProperty from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  var reference = _ref.reference,\n      floating = _ref.floating;\n  var sideAxis = getSideAxis(placement);\n  var alignmentAxis = getAlignmentAxis(placement);\n  var alignLength = getAxisLength(alignmentAxis);\n  var side = getSide(placement);\n  var isVertical = sideAxis === 'y';\n  var commonX = reference.x + reference.width / 2 - floating.width / 2;\n  var commonY = reference.y + reference.height / 2 - floating.height / 2;\n  var commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  var coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nvar computePosition =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(reference, floating, config) {\n    var _config$placement, placement, _config$strategy, strategy, _config$middleware, middleware, platform, validMiddleware, rtl, rects, _computeCoordsFromPla, x, y, statefulPlacement, middlewareData, resetCount, i, _validMiddleware$i, name, fn, _ref3, nextX, nextY, data, reset, _computeCoordsFromPla2;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _config$placement = config.placement, placement = _config$placement === void 0 ? 'bottom' : _config$placement, _config$strategy = config.strategy, strategy = _config$strategy === void 0 ? 'absolute' : _config$strategy, _config$middleware = config.middleware, middleware = _config$middleware === void 0 ? [] : _config$middleware, platform = config.platform;\n            validMiddleware = middleware.filter(Boolean);\n            _context.next = 4;\n            return platform.isRTL == null ? void 0 : platform.isRTL(floating);\n\n          case 4:\n            rtl = _context.sent;\n            _context.next = 7;\n            return platform.getElementRects({\n              reference: reference,\n              floating: floating,\n              strategy: strategy\n            });\n\n          case 7:\n            rects = _context.sent;\n            _computeCoordsFromPla = computeCoordsFromPlacement(rects, placement, rtl), x = _computeCoordsFromPla.x, y = _computeCoordsFromPla.y;\n            statefulPlacement = placement;\n            middlewareData = {};\n            resetCount = 0;\n            i = 0;\n\n          case 13:\n            if (!(i < validMiddleware.length)) {\n              _context.next = 45;\n              break;\n            }\n\n            _validMiddleware$i = validMiddleware[i], name = _validMiddleware$i.name, fn = _validMiddleware$i.fn;\n            _context.next = 17;\n            return fn({\n              x: x,\n              y: y,\n              initialPlacement: placement,\n              placement: statefulPlacement,\n              strategy: strategy,\n              middlewareData: middlewareData,\n              rects: rects,\n              platform: platform,\n              elements: {\n                reference: reference,\n                floating: floating\n              }\n            });\n\n          case 17:\n            _ref3 = _context.sent;\n            nextX = _ref3.x;\n            nextY = _ref3.y;\n            data = _ref3.data;\n            reset = _ref3.reset;\n            x = nextX != null ? nextX : x;\n            y = nextY != null ? nextY : y;\n            middlewareData = _objectSpread({}, middlewareData, _defineProperty({}, name, _objectSpread({}, middlewareData[name], data)));\n\n            if (!(reset && resetCount <= 50)) {\n              _context.next = 42;\n              break;\n            }\n\n            resetCount++;\n\n            if (!(typeof reset === 'object')) {\n              _context.next = 41;\n              break;\n            }\n\n            if (reset.placement) {\n              statefulPlacement = reset.placement;\n            }\n\n            if (!reset.rects) {\n              _context.next = 38;\n              break;\n            }\n\n            if (!(reset.rects === true)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 33;\n            return platform.getElementRects({\n              reference: reference,\n              floating: floating,\n              strategy: strategy\n            });\n\n          case 33:\n            _context.t0 = _context.sent;\n            _context.next = 37;\n            break;\n\n          case 36:\n            _context.t0 = reset.rects;\n\n          case 37:\n            rects = _context.t0;\n\n          case 38:\n            _computeCoordsFromPla2 = computeCoordsFromPlacement(rects, statefulPlacement, rtl);\n            x = _computeCoordsFromPla2.x;\n            y = _computeCoordsFromPla2.y;\n\n          case 41:\n            i = -1;\n\n          case 42:\n            i++;\n            _context.next = 13;\n            break;\n\n          case 45:\n            return _context.abrupt(\"return\", {\n              x: x,\n              y: y,\n              placement: statefulPlacement,\n              strategy: strategy,\n              middlewareData: middlewareData\n            });\n\n          case 46:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function computePosition(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nfunction detectOverflow(_x4, _x5) {\n  return _detectOverflow.apply(this, arguments);\n}\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nfunction _detectOverflow() {\n  _detectOverflow = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(state, options) {\n    var _await$platform$isEle, x, y, platform, rects, elements, strategy, _evaluate8, _evaluate8$boundary, boundary, _evaluate8$rootBounda, rootBoundary, _evaluate8$elementCon, elementContext, _evaluate8$altBoundar, altBoundary, _evaluate8$padding, padding, paddingObject, altContext, element, clippingClientRect, rect, offsetParent, offsetScale, elementClientRect;\n\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (options === void 0) {\n              options = {};\n            }\n\n            x = state.x, y = state.y, platform = state.platform, rects = state.rects, elements = state.elements, strategy = state.strategy;\n            _evaluate8 = evaluate(options, state), _evaluate8$boundary = _evaluate8.boundary, boundary = _evaluate8$boundary === void 0 ? 'clippingAncestors' : _evaluate8$boundary, _evaluate8$rootBounda = _evaluate8.rootBoundary, rootBoundary = _evaluate8$rootBounda === void 0 ? 'viewport' : _evaluate8$rootBounda, _evaluate8$elementCon = _evaluate8.elementContext, elementContext = _evaluate8$elementCon === void 0 ? 'floating' : _evaluate8$elementCon, _evaluate8$altBoundar = _evaluate8.altBoundary, altBoundary = _evaluate8$altBoundar === void 0 ? false : _evaluate8$altBoundar, _evaluate8$padding = _evaluate8.padding, padding = _evaluate8$padding === void 0 ? 0 : _evaluate8$padding;\n            paddingObject = getPaddingObject(padding);\n            altContext = elementContext === 'floating' ? 'reference' : 'floating';\n            element = elements[altBoundary ? altContext : elementContext];\n            _context10.t0 = rectToClientRect;\n            _context10.t1 = platform;\n            _context10.next = 10;\n            return platform.isElement == null ? void 0 : platform.isElement(element);\n\n          case 10:\n            _context10.t2 = _await$platform$isEle = _context10.sent;\n\n            if (!(_context10.t2 != null)) {\n              _context10.next = 15;\n              break;\n            }\n\n            _context10.t3 = _await$platform$isEle;\n            _context10.next = 16;\n            break;\n\n          case 15:\n            _context10.t3 = true;\n\n          case 16:\n            if (!_context10.t3) {\n              _context10.next = 20;\n              break;\n            }\n\n            _context10.t4 = element;\n            _context10.next = 26;\n            break;\n\n          case 20:\n            _context10.t5 = element.contextElement;\n\n            if (_context10.t5) {\n              _context10.next = 25;\n              break;\n            }\n\n            _context10.next = 24;\n            return platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating);\n\n          case 24:\n            _context10.t5 = _context10.sent;\n\n          case 25:\n            _context10.t4 = _context10.t5;\n\n          case 26:\n            _context10.t6 = _context10.t4;\n            _context10.t7 = boundary;\n            _context10.t8 = rootBoundary;\n            _context10.t9 = strategy;\n            _context10.t10 = {\n              element: _context10.t6,\n              boundary: _context10.t7,\n              rootBoundary: _context10.t8,\n              strategy: _context10.t9\n            };\n            _context10.next = 33;\n            return _context10.t1.getClippingRect.call(_context10.t1, _context10.t10);\n\n          case 33:\n            _context10.t11 = _context10.sent;\n            clippingClientRect = (0, _context10.t0)(_context10.t11);\n            rect = elementContext === 'floating' ? {\n              x: x,\n              y: y,\n              width: rects.floating.width,\n              height: rects.floating.height\n            } : rects.reference;\n            _context10.next = 38;\n            return platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating);\n\n          case 38:\n            offsetParent = _context10.sent;\n            _context10.next = 41;\n            return platform.isElement == null ? void 0 : platform.isElement(offsetParent);\n\n          case 41:\n            if (!_context10.sent) {\n              _context10.next = 50;\n              break;\n            }\n\n            _context10.next = 44;\n            return platform.getScale == null ? void 0 : platform.getScale(offsetParent);\n\n          case 44:\n            _context10.t13 = _context10.sent;\n\n            if (_context10.t13) {\n              _context10.next = 47;\n              break;\n            }\n\n            _context10.t13 = {\n              x: 1,\n              y: 1\n            };\n\n          case 47:\n            _context10.t12 = _context10.t13;\n            _context10.next = 51;\n            break;\n\n          case 50:\n            _context10.t12 = {\n              x: 1,\n              y: 1\n            };\n\n          case 51:\n            offsetScale = _context10.t12;\n            _context10.t14 = rectToClientRect;\n\n            if (!platform.convertOffsetParentRelativeRectToViewportRelativeRect) {\n              _context10.next = 59;\n              break;\n            }\n\n            _context10.next = 56;\n            return platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n              elements: elements,\n              rect: rect,\n              offsetParent: offsetParent,\n              strategy: strategy\n            });\n\n          case 56:\n            _context10.t15 = _context10.sent;\n            _context10.next = 60;\n            break;\n\n          case 59:\n            _context10.t15 = rect;\n\n          case 60:\n            _context10.t16 = _context10.t15;\n            elementClientRect = (0, _context10.t14)(_context10.t16);\n            return _context10.abrupt(\"return\", {\n              top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n              bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n              left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n              right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n            });\n\n          case 63:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, this);\n  }));\n  return _detectOverflow.apply(this, arguments);\n}\n\nvar arrow = function arrow(options) {\n  return {\n    name: 'arrow',\n    options: options,\n    fn: function () {\n      var _fn = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(state) {\n        var _objectSpread3, _ref5;\n\n        var x, y, placement, rects, platform, elements, middlewareData, _ref4, element, _ref4$padding, padding, paddingObject, coords, axis, length, arrowDimensions, isYAxis, minProp, maxProp, clientProp, endDiff, startDiff, arrowOffsetParent, clientSize, centerToReference, largestPossiblePadding, minPadding, maxPadding, min$1, max, center, offset, shouldAddOffset, alignmentOffset;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                x = state.x, y = state.y, placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements, middlewareData = state.middlewareData; // Since `element` is required, we don't Partial<> the type.\n\n                _ref4 = evaluate(options, state) || {}, element = _ref4.element, _ref4$padding = _ref4.padding, padding = _ref4$padding === void 0 ? 0 : _ref4$padding;\n\n                if (!(element == null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {});\n\n              case 4:\n                paddingObject = getPaddingObject(padding);\n                coords = {\n                  x: x,\n                  y: y\n                };\n                axis = getAlignmentAxis(placement);\n                length = getAxisLength(axis);\n                _context2.next = 10;\n                return platform.getDimensions(element);\n\n              case 10:\n                arrowDimensions = _context2.sent;\n                isYAxis = axis === 'y';\n                minProp = isYAxis ? 'top' : 'left';\n                maxProp = isYAxis ? 'bottom' : 'right';\n                clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n                endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n                startDiff = coords[axis] - rects.reference[axis];\n                _context2.next = 19;\n                return platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element);\n\n              case 19:\n                arrowOffsetParent = _context2.sent;\n                clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0; // DOM platform can return `window` as the `offsetParent`.\n\n                _context2.t0 = !clientSize;\n\n                if (_context2.t0) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                _context2.next = 25;\n                return platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent);\n\n              case 25:\n                _context2.t0 = !_context2.sent;\n\n              case 26:\n                if (!_context2.t0) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                clientSize = elements.floating[clientProp] || rects.floating[length];\n\n              case 28:\n                centerToReference = endDiff / 2 - startDiff / 2; // If the padding is large enough that it causes the arrow to no longer be\n                // centered, modify the padding so that it is centered.\n\n                largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n                minPadding = min(paddingObject[minProp], largestPossiblePadding);\n                maxPadding = min(paddingObject[maxProp], largestPossiblePadding); // Make sure the arrow doesn't overflow the floating element if the center\n                // point is outside the floating element's bounds.\n\n                min$1 = minPadding;\n                max = clientSize - arrowDimensions[length] - maxPadding;\n                center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n                offset = clamp(min$1, center, max); // If the reference is small enough that the arrow's padding causes it to\n                // to point to nothing for an aligned placement, adjust the offset of the\n                // floating element itself. To ensure `shift()` continues to take action,\n                // a single reset is performed when this is true.\n\n                shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n                alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n                return _context2.abrupt(\"return\", (_ref5 = {}, _defineProperty(_ref5, axis, coords[axis] + alignmentOffset), _defineProperty(_ref5, \"data\", _objectSpread((_objectSpread3 = {}, _defineProperty(_objectSpread3, axis, offset), _defineProperty(_objectSpread3, \"centerOffset\", center - offset - alignmentOffset), _objectSpread3), shouldAddOffset && {\n                  alignmentOffset: alignmentOffset\n                })), _defineProperty(_ref5, \"reset\", shouldAddOffset), _ref5));\n\n              case 39:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function fn(_x6) {\n        return _fn.apply(this, arguments);\n      };\n    }()\n  };\n};\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  var allowedPlacementsSortedByAlignment = alignment ? _toConsumableArray(allowedPlacements.filter(function (placement) {\n    return getAlignment(placement) === alignment;\n  })).concat(_toConsumableArray(allowedPlacements.filter(function (placement) {\n    return getAlignment(placement) !== alignment;\n  }))) : allowedPlacements.filter(function (placement) {\n    return getSide(placement) === placement;\n  });\n  return allowedPlacementsSortedByAlignment.filter(function (placement) {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nvar autoPlacement = function autoPlacement(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options: options,\n    fn: function () {\n      var _fn2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(state) {\n        var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE, rects, middlewareData, placement, platform, elements, _evaluate, _evaluate$crossAxis, crossAxis, alignment, _evaluate$allowedPlac, allowedPlacements, _evaluate$autoAlignme, autoAlignment, detectOverflowOptions, placements$1, overflow, currentIndex, currentPlacement, alignmentSides, currentOverflows, allOverflows, nextPlacement, placementsSortedByMostSpace, placementsThatFitOnEachSide, resetPlacement;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                rects = state.rects, middlewareData = state.middlewareData, placement = state.placement, platform = state.platform, elements = state.elements;\n                _evaluate = evaluate(options, state), _evaluate$crossAxis = _evaluate.crossAxis, crossAxis = _evaluate$crossAxis === void 0 ? false : _evaluate$crossAxis, alignment = _evaluate.alignment, _evaluate$allowedPlac = _evaluate.allowedPlacements, allowedPlacements = _evaluate$allowedPlac === void 0 ? placements : _evaluate$allowedPlac, _evaluate$autoAlignme = _evaluate.autoAlignment, autoAlignment = _evaluate$autoAlignme === void 0 ? true : _evaluate$autoAlignme, detectOverflowOptions = _objectWithoutProperties(_evaluate, [\"crossAxis\", \"alignment\", \"allowedPlacements\", \"autoAlignment\"]);\n                placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n                _context3.next = 5;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 5:\n                overflow = _context3.sent;\n                currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n                currentPlacement = placements$1[currentIndex];\n\n                if (!(currentPlacement == null)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {});\n\n              case 10:\n                _context3.t0 = getAlignmentSides;\n                _context3.t1 = currentPlacement;\n                _context3.t2 = rects;\n                _context3.next = 15;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 15:\n                _context3.t3 = _context3.sent;\n                alignmentSides = (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3);\n\n                if (!(placement !== currentPlacement)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  reset: {\n                    placement: placements$1[0]\n                  }\n                });\n\n              case 19:\n                currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n                allOverflows = _toConsumableArray(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []).concat([{\n                  placement: currentPlacement,\n                  overflows: currentOverflows\n                }]);\n                nextPlacement = placements$1[currentIndex + 1]; // There are more placements to check.\n\n                if (!nextPlacement) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    index: currentIndex + 1,\n                    overflows: allOverflows\n                  },\n                  reset: {\n                    placement: nextPlacement\n                  }\n                });\n\n              case 24:\n                placementsSortedByMostSpace = allOverflows.map(function (d) {\n                  var alignment = getAlignment(d.placement);\n                  return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n                  d.overflows.slice(0, 2).reduce(function (acc, v) {\n                    return acc + v;\n                  }, 0) : // Check only the mainAxis.\n                  d.overflows[0], d.overflows];\n                }).sort(function (a, b) {\n                  return a[1] - b[1];\n                });\n                placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(function (d) {\n                  return d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n                  // side.\n                  getAlignment(d[0]) ? 2 : 3).every(function (v) {\n                    return v <= 0;\n                  });\n                });\n                resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n                if (!(resetPlacement !== placement)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    index: currentIndex + 1,\n                    overflows: allOverflows\n                  },\n                  reset: {\n                    placement: resetPlacement\n                  }\n                });\n\n              case 29:\n                return _context3.abrupt(\"return\", {});\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function fn(_x7) {\n        return _fn2.apply(this, arguments);\n      };\n    }()\n  };\n};\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nvar flip = function flip(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options: options,\n    fn: function () {\n      var _fn3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(state) {\n        var _middlewareData$arrow, _middlewareData$flip, placement, middlewareData, rects, initialPlacement, platform, elements, _evaluate2, _evaluate2$mainAxis, checkMainAxis, _evaluate2$crossAxis, checkCrossAxis, specifiedFallbackPlacements, _evaluate2$fallbackSt, fallbackStrategy, _evaluate2$fallbackAx, fallbackAxisSideDirection, _evaluate2$flipAlignm, flipAlignment, detectOverflowOptions, side, isBasePlacement, rtl, fallbackPlacements, placements, overflow, overflows, overflowsData, _sides, _middlewareData$flip2, _overflowsData$filter, nextIndex, nextPlacement, resetPlacement, _overflowsData$map$so, _placement;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                placement = state.placement, middlewareData = state.middlewareData, rects = state.rects, initialPlacement = state.initialPlacement, platform = state.platform, elements = state.elements;\n                _evaluate2 = evaluate(options, state), _evaluate2$mainAxis = _evaluate2.mainAxis, checkMainAxis = _evaluate2$mainAxis === void 0 ? true : _evaluate2$mainAxis, _evaluate2$crossAxis = _evaluate2.crossAxis, checkCrossAxis = _evaluate2$crossAxis === void 0 ? true : _evaluate2$crossAxis, specifiedFallbackPlacements = _evaluate2.fallbackPlacements, _evaluate2$fallbackSt = _evaluate2.fallbackStrategy, fallbackStrategy = _evaluate2$fallbackSt === void 0 ? 'bestFit' : _evaluate2$fallbackSt, _evaluate2$fallbackAx = _evaluate2.fallbackAxisSideDirection, fallbackAxisSideDirection = _evaluate2$fallbackAx === void 0 ? 'none' : _evaluate2$fallbackAx, _evaluate2$flipAlignm = _evaluate2.flipAlignment, flipAlignment = _evaluate2$flipAlignm === void 0 ? true : _evaluate2$flipAlignm, detectOverflowOptions = _objectWithoutProperties(_evaluate2, [\"mainAxis\", \"crossAxis\", \"fallbackPlacements\", \"fallbackStrategy\", \"fallbackAxisSideDirection\", \"flipAlignment\"]); // If a reset by the arrow was caused due to an alignment offset being\n                // added, we should skip any logic now since `flip()` has already done its\n                // work.\n                // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n\n                if (!((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {});\n\n              case 4:\n                side = getSide(placement);\n                isBasePlacement = getSide(initialPlacement) === initialPlacement;\n                _context4.next = 8;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 8:\n                rtl = _context4.sent;\n                fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n                if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n                  fallbackPlacements.push.apply(fallbackPlacements, _toConsumableArray(getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl)));\n                }\n\n                placements = [initialPlacement].concat(_toConsumableArray(fallbackPlacements));\n                _context4.next = 14;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 14:\n                overflow = _context4.sent;\n                overflows = [];\n                overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n                if (checkMainAxis) {\n                  overflows.push(overflow[side]);\n                }\n\n                if (checkCrossAxis) {\n                  _sides = getAlignmentSides(placement, rects, rtl);\n                  overflows.push(overflow[_sides[0]], overflow[_sides[1]]);\n                }\n\n                overflowsData = _toConsumableArray(overflowsData).concat([{\n                  placement: placement,\n                  overflows: overflows\n                }]); // One or more sides is overflowing.\n\n                if (overflows.every(function (side) {\n                  return side <= 0;\n                })) {\n                  _context4.next = 37;\n                  break;\n                }\n\n                nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n                nextPlacement = placements[nextIndex];\n\n                if (!nextPlacement) {\n                  _context4.next = 25;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: {\n                    index: nextIndex,\n                    overflows: overflowsData\n                  },\n                  reset: {\n                    placement: nextPlacement\n                  }\n                });\n\n              case 25:\n                // First, find the candidates that fit on the mainAxis side of overflow,\n                // then find the placement that fits the best on the main crossAxis side.\n                resetPlacement = (_overflowsData$filter = overflowsData.filter(function (d) {\n                  return d.overflows[0] <= 0;\n                }).sort(function (a, b) {\n                  return a.overflows[1] - b.overflows[1];\n                })[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n                if (resetPlacement) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                _context4.t0 = fallbackStrategy;\n                _context4.next = _context4.t0 === 'bestFit' ? 30 : _context4.t0 === 'initialPlacement' ? 33 : 35;\n                break;\n\n              case 30:\n                _placement = (_overflowsData$map$so = overflowsData.map(function (d) {\n                  return [d.placement, d.overflows.filter(function (overflow) {\n                    return overflow > 0;\n                  }).reduce(function (acc, overflow) {\n                    return acc + overflow;\n                  }, 0)];\n                }).sort(function (a, b) {\n                  return a[1] - b[1];\n                })[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (_placement) {\n                  resetPlacement = _placement;\n                }\n\n                return _context4.abrupt(\"break\", 35);\n\n              case 33:\n                resetPlacement = initialPlacement;\n                return _context4.abrupt(\"break\", 35);\n\n              case 35:\n                if (!(placement !== resetPlacement)) {\n                  _context4.next = 37;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  reset: {\n                    placement: resetPlacement\n                  }\n                });\n\n              case 37:\n                return _context4.abrupt(\"return\", {});\n\n              case 38:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function fn(_x8) {\n        return _fn3.apply(this, arguments);\n      };\n    }()\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nvar hide = function hide(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options: options,\n    fn: function () {\n      var _fn4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(state) {\n        var rects, _evaluate3, _evaluate3$strategy, strategy, detectOverflowOptions, overflow, offsets, _overflow, _offsets;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                rects = state.rects;\n                _evaluate3 = evaluate(options, state), _evaluate3$strategy = _evaluate3.strategy, strategy = _evaluate3$strategy === void 0 ? 'referenceHidden' : _evaluate3$strategy, detectOverflowOptions = _objectWithoutProperties(_evaluate3, [\"strategy\"]);\n                _context5.t0 = strategy;\n                _context5.next = _context5.t0 === 'referenceHidden' ? 5 : _context5.t0 === 'escaped' ? 10 : 15;\n                break;\n\n              case 5:\n                _context5.next = 7;\n                return detectOverflow(state, _objectSpread({}, detectOverflowOptions, {\n                  elementContext: 'reference'\n                }));\n\n              case 7:\n                overflow = _context5.sent;\n                offsets = getSideOffsets(overflow, rects.reference);\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    referenceHiddenOffsets: offsets,\n                    referenceHidden: isAnySideFullyClipped(offsets)\n                  }\n                });\n\n              case 10:\n                _context5.next = 12;\n                return detectOverflow(state, _objectSpread({}, detectOverflowOptions, {\n                  altBoundary: true\n                }));\n\n              case 12:\n                _overflow = _context5.sent;\n                _offsets = getSideOffsets(_overflow, rects.floating);\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    escapedOffsets: _offsets,\n                    escaped: isAnySideFullyClipped(_offsets)\n                  }\n                });\n\n              case 15:\n                return _context5.abrupt(\"return\", {});\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function fn(_x9) {\n        return _fn4.apply(this, arguments);\n      };\n    }()\n  };\n};\n\nfunction getBoundingRect(rects) {\n  var minX = min.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.left;\n  })));\n  var minY = min.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.top;\n  })));\n  var maxX = max.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.right;\n  })));\n  var maxY = max.apply(void 0, _toConsumableArray(rects.map(function (rect) {\n    return rect.bottom;\n  })));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\nfunction getRectsByLine(rects) {\n  var sortedRects = rects.slice().sort(function (a, b) {\n    return a.y - b.y;\n  });\n  var groups = [];\n  var prevRect = null;\n\n  for (var i = 0; i < sortedRects.length; i++) {\n    var rect = sortedRects[i];\n\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n\n    prevRect = rect;\n  }\n\n  return groups.map(function (rect) {\n    return rectToClientRect(getBoundingRect(rect));\n  });\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nvar inline = function inline(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options: options,\n    fn: function () {\n      var _fn5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(state) {\n        var placement, elements, rects, platform, strategy, _evaluate4, _evaluate4$padding, padding, x, y, nativeClientRects, clientRects, fallback, paddingObject, getBoundingClientRect, resetRects;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                getBoundingClientRect = function _ref6() {\n                  // There are two rects and they are disjoined.\n                  if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n                    // Find the first rect in which the point is fully inside.\n                    return clientRects.find(function (rect) {\n                      return x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom;\n                    }) || fallback;\n                  } // There are 2 or more connected rects.\n\n\n                  if (clientRects.length >= 2) {\n                    if (getSideAxis(placement) === 'y') {\n                      var firstRect = clientRects[0];\n                      var lastRect = clientRects[clientRects.length - 1];\n                      var isTop = getSide(placement) === 'top';\n                      var _top = firstRect.top;\n                      var _bottom = lastRect.bottom;\n\n                      var _left = isTop ? firstRect.left : lastRect.left;\n\n                      var _right = isTop ? firstRect.right : lastRect.right;\n\n                      var _width = _right - _left;\n\n                      var _height = _bottom - _top;\n\n                      return {\n                        top: _top,\n                        bottom: _bottom,\n                        left: _left,\n                        right: _right,\n                        width: _width,\n                        height: _height,\n                        x: _left,\n                        y: _top\n                      };\n                    }\n\n                    var isLeftSide = getSide(placement) === 'left';\n                    var maxRight = max.apply(void 0, _toConsumableArray(clientRects.map(function (rect) {\n                      return rect.right;\n                    })));\n                    var minLeft = min.apply(void 0, _toConsumableArray(clientRects.map(function (rect) {\n                      return rect.left;\n                    })));\n                    var measureRects = clientRects.filter(function (rect) {\n                      return isLeftSide ? rect.left === minLeft : rect.right === maxRight;\n                    });\n                    var top = measureRects[0].top;\n                    var bottom = measureRects[measureRects.length - 1].bottom;\n                    var left = minLeft;\n                    var right = maxRight;\n                    var width = right - left;\n                    var height = bottom - top;\n                    return {\n                      top: top,\n                      bottom: bottom,\n                      left: left,\n                      right: right,\n                      width: width,\n                      height: height,\n                      x: left,\n                      y: top\n                    };\n                  }\n\n                  return fallback;\n                };\n\n                placement = state.placement, elements = state.elements, rects = state.rects, platform = state.platform, strategy = state.strategy; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n                // ClientRect's bounds, despite the event listener being triggered. A\n                // padding of 2 seems to handle this issue.\n\n                _evaluate4 = evaluate(options, state), _evaluate4$padding = _evaluate4.padding, padding = _evaluate4$padding === void 0 ? 2 : _evaluate4$padding, x = _evaluate4.x, y = _evaluate4.y;\n                _context6.t0 = Array;\n                _context6.next = 6;\n                return platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference);\n\n              case 6:\n                _context6.t1 = _context6.sent;\n\n                if (_context6.t1) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                _context6.t1 = [];\n\n              case 9:\n                _context6.t2 = _context6.t1;\n                nativeClientRects = _context6.t0.from.call(_context6.t0, _context6.t2);\n                clientRects = getRectsByLine(nativeClientRects);\n                fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n                paddingObject = getPaddingObject(padding);\n                _context6.next = 16;\n                return platform.getElementRects({\n                  reference: {\n                    getBoundingClientRect: getBoundingClientRect\n                  },\n                  floating: elements.floating,\n                  strategy: strategy\n                });\n\n              case 16:\n                resetRects = _context6.sent;\n\n                if (!(rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  reset: {\n                    rects: resetRects\n                  }\n                });\n\n              case 19:\n                return _context6.abrupt(\"return\", {});\n\n              case 20:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function fn(_x10) {\n        return _fn5.apply(this, arguments);\n      };\n    }()\n  };\n}; // For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\n\nfunction convertValueToCoords(_x11, _x12) {\n  return _convertValueToCoords.apply(this, arguments);\n}\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nfunction _convertValueToCoords() {\n  _convertValueToCoords = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee11(state, options) {\n    var placement, platform, elements, rtl, side, alignment, isVertical, mainAxisMulti, crossAxisMulti, rawValue, _ref8, mainAxis, crossAxis, alignmentAxis;\n\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            placement = state.placement, platform = state.platform, elements = state.elements;\n            _context11.next = 3;\n            return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n          case 3:\n            rtl = _context11.sent;\n            side = getSide(placement);\n            alignment = getAlignment(placement);\n            isVertical = getSideAxis(placement) === 'y';\n            mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n            crossAxisMulti = rtl && isVertical ? -1 : 1;\n            rawValue = evaluate(options, state); // eslint-disable-next-line prefer-const\n\n            _ref8 = typeof rawValue === 'number' ? {\n              mainAxis: rawValue,\n              crossAxis: 0,\n              alignmentAxis: null\n            } : _objectSpread({\n              mainAxis: 0,\n              crossAxis: 0,\n              alignmentAxis: null\n            }, rawValue), mainAxis = _ref8.mainAxis, crossAxis = _ref8.crossAxis, alignmentAxis = _ref8.alignmentAxis;\n\n            if (alignment && typeof alignmentAxis === 'number') {\n              crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n            }\n\n            return _context11.abrupt(\"return\", isVertical ? {\n              x: crossAxis * crossAxisMulti,\n              y: mainAxis * mainAxisMulti\n            } : {\n              x: mainAxis * mainAxisMulti,\n              y: crossAxis * crossAxisMulti\n            });\n\n          case 13:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, this);\n  }));\n  return _convertValueToCoords.apply(this, arguments);\n}\n\nvar offset = function offset(options) {\n  if (options === void 0) {\n    options = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: options,\n    fn: function () {\n      var _fn6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(state) {\n        var _middlewareData$offse, _middlewareData$arrow, x, y, placement, middlewareData, diffCoords;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                x = state.x, y = state.y, placement = state.placement, middlewareData = state.middlewareData;\n                _context7.next = 3;\n                return convertValueToCoords(state, options);\n\n              case 3:\n                diffCoords = _context7.sent;\n\n                if (!(placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset)) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {});\n\n              case 6:\n                return _context7.abrupt(\"return\", {\n                  x: x + diffCoords.x,\n                  y: y + diffCoords.y,\n                  data: _objectSpread({}, diffCoords, {\n                    placement: placement\n                  })\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function fn(_x13) {\n        return _fn6.apply(this, arguments);\n      };\n    }()\n  };\n};\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nvar shift = function shift(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options: options,\n    fn: function () {\n      var _fn7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(state) {\n        var _objectSpread4;\n\n        var x, y, placement, _evaluate5, _evaluate5$mainAxis, checkMainAxis, _evaluate5$crossAxis, checkCrossAxis, _evaluate5$limiter, limiter, detectOverflowOptions, coords, overflow, crossAxis, mainAxis, mainAxisCoord, crossAxisCoord, minSide, maxSide, _min, _max, _minSide, _maxSide, _min2, _max2, limitedCoords;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                x = state.x, y = state.y, placement = state.placement;\n                _evaluate5 = evaluate(options, state), _evaluate5$mainAxis = _evaluate5.mainAxis, checkMainAxis = _evaluate5$mainAxis === void 0 ? true : _evaluate5$mainAxis, _evaluate5$crossAxis = _evaluate5.crossAxis, checkCrossAxis = _evaluate5$crossAxis === void 0 ? false : _evaluate5$crossAxis, _evaluate5$limiter = _evaluate5.limiter, limiter = _evaluate5$limiter === void 0 ? {\n                  fn: function fn(_ref) {\n                    var x = _ref.x,\n                        y = _ref.y;\n                    return {\n                      x: x,\n                      y: y\n                    };\n                  }\n                } : _evaluate5$limiter, detectOverflowOptions = _objectWithoutProperties(_evaluate5, [\"mainAxis\", \"crossAxis\", \"limiter\"]);\n                coords = {\n                  x: x,\n                  y: y\n                };\n                _context8.next = 5;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 5:\n                overflow = _context8.sent;\n                crossAxis = getSideAxis(getSide(placement));\n                mainAxis = getOppositeAxis(crossAxis);\n                mainAxisCoord = coords[mainAxis];\n                crossAxisCoord = coords[crossAxis];\n\n                if (checkMainAxis) {\n                  minSide = mainAxis === 'y' ? 'top' : 'left';\n                  maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n                  _min = mainAxisCoord + overflow[minSide];\n                  _max = mainAxisCoord - overflow[maxSide];\n                  mainAxisCoord = clamp(_min, mainAxisCoord, _max);\n                }\n\n                if (checkCrossAxis) {\n                  _minSide = crossAxis === 'y' ? 'top' : 'left';\n                  _maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n                  _min2 = crossAxisCoord + overflow[_minSide];\n                  _max2 = crossAxisCoord - overflow[_maxSide];\n                  crossAxisCoord = clamp(_min2, crossAxisCoord, _max2);\n                }\n\n                limitedCoords = limiter.fn(_objectSpread({}, state, (_objectSpread4 = {}, _defineProperty(_objectSpread4, mainAxis, mainAxisCoord), _defineProperty(_objectSpread4, crossAxis, crossAxisCoord), _objectSpread4)));\n                return _context8.abrupt(\"return\", _objectSpread({}, limitedCoords, {\n                  data: {\n                    x: limitedCoords.x - x,\n                    y: limitedCoords.y - y\n                  }\n                }));\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function fn(_x14) {\n        return _fn7.apply(this, arguments);\n      };\n    }()\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nvar limitShift = function limitShift(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options: options,\n    fn: function fn(state) {\n      var _ref7;\n\n      var x = state.x,\n          y = state.y,\n          placement = state.placement,\n          rects = state.rects,\n          middlewareData = state.middlewareData;\n\n      var _evaluate6 = evaluate(options, state),\n          _evaluate6$offset = _evaluate6.offset,\n          offset = _evaluate6$offset === void 0 ? 0 : _evaluate6$offset,\n          _evaluate6$mainAxis = _evaluate6.mainAxis,\n          checkMainAxis = _evaluate6$mainAxis === void 0 ? true : _evaluate6$mainAxis,\n          _evaluate6$crossAxis = _evaluate6.crossAxis,\n          checkCrossAxis = _evaluate6$crossAxis === void 0 ? true : _evaluate6$crossAxis;\n\n      var coords = {\n        x: x,\n        y: y\n      };\n      var crossAxis = getSideAxis(placement);\n      var mainAxis = getOppositeAxis(crossAxis);\n      var mainAxisCoord = coords[mainAxis];\n      var crossAxisCoord = coords[crossAxis];\n      var rawOffset = evaluate(offset, state);\n      var computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : _objectSpread({\n        mainAxis: 0,\n        crossAxis: 0\n      }, rawOffset);\n\n      if (checkMainAxis) {\n        var len = mainAxis === 'y' ? 'height' : 'width';\n        var limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        var limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        var _len = mainAxis === 'y' ? 'width' : 'height';\n\n        var isOriginSide = ['top', 'left'].includes(getSide(placement));\n\n        var _limitMin = rects.reference[crossAxis] - rects.floating[_len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n\n        var _limitMax = rects.reference[crossAxis] + rects.reference[_len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < _limitMin) {\n          crossAxisCoord = _limitMin;\n        } else if (crossAxisCoord > _limitMax) {\n          crossAxisCoord = _limitMax;\n        }\n      }\n\n      return _ref7 = {}, _defineProperty(_ref7, mainAxis, mainAxisCoord), _defineProperty(_ref7, crossAxis, crossAxisCoord), _ref7;\n    }\n  };\n};\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nvar size = function size(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options: options,\n    fn: function () {\n      var _fn8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(state) {\n        var placement, rects, platform, elements, _evaluate7, _evaluate7$apply, apply, detectOverflowOptions, overflow, side, alignment, isYAxis, _rects$floating, width, height, heightSide, widthSide, maximumClippingHeight, maximumClippingWidth, overflowAvailableHeight, overflowAvailableWidth, noShift, availableHeight, availableWidth, xMin, xMax, yMin, yMax, nextDimensions;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                placement = state.placement, rects = state.rects, platform = state.platform, elements = state.elements;\n                _evaluate7 = evaluate(options, state), _evaluate7$apply = _evaluate7.apply, apply = _evaluate7$apply === void 0 ? function () {} : _evaluate7$apply, detectOverflowOptions = _objectWithoutProperties(_evaluate7, [\"apply\"]);\n                _context9.next = 4;\n                return detectOverflow(state, detectOverflowOptions);\n\n              case 4:\n                overflow = _context9.sent;\n                side = getSide(placement);\n                alignment = getAlignment(placement);\n                isYAxis = getSideAxis(placement) === 'y';\n                _rects$floating = rects.floating, width = _rects$floating.width, height = _rects$floating.height;\n\n                if (!(side === 'top' || side === 'bottom')) {\n                  _context9.next = 28;\n                  break;\n                }\n\n                heightSide = side;\n                _context9.t0 = alignment;\n                _context9.next = 14;\n                return platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n\n              case 14:\n                if (!_context9.sent) {\n                  _context9.next = 18;\n                  break;\n                }\n\n                _context9.t1 = 'start';\n                _context9.next = 19;\n                break;\n\n              case 18:\n                _context9.t1 = 'end';\n\n              case 19:\n                _context9.t2 = _context9.t1;\n\n                if (!(_context9.t0 === _context9.t2)) {\n                  _context9.next = 24;\n                  break;\n                }\n\n                _context9.t3 = 'left';\n                _context9.next = 25;\n                break;\n\n              case 24:\n                _context9.t3 = 'right';\n\n              case 25:\n                widthSide = _context9.t3;\n                _context9.next = 30;\n                break;\n\n              case 28:\n                widthSide = side;\n                heightSide = alignment === 'end' ? 'top' : 'bottom';\n\n              case 30:\n                maximumClippingHeight = height - overflow.top - overflow.bottom;\n                maximumClippingWidth = width - overflow.left - overflow.right;\n                overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n                overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n                noShift = !state.middlewareData.shift;\n                availableHeight = overflowAvailableHeight;\n                availableWidth = overflowAvailableWidth;\n\n                if (isYAxis) {\n                  availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n                } else {\n                  availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n                }\n\n                if (noShift && !alignment) {\n                  xMin = max(overflow.left, 0);\n                  xMax = max(overflow.right, 0);\n                  yMin = max(overflow.top, 0);\n                  yMax = max(overflow.bottom, 0);\n\n                  if (isYAxis) {\n                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n                  } else {\n                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n                  }\n                }\n\n                _context9.next = 41;\n                return apply(_objectSpread({}, state, {\n                  availableWidth: availableWidth,\n                  availableHeight: availableHeight\n                }));\n\n              case 41:\n                _context9.next = 43;\n                return platform.getDimensions(elements.floating);\n\n              case 43:\n                nextDimensions = _context9.sent;\n\n                if (!(width !== nextDimensions.width || height !== nextDimensions.height)) {\n                  _context9.next = 46;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", {\n                  reset: {\n                    rects: true\n                  }\n                });\n\n              case 46:\n                return _context9.abrupt(\"return\", {});\n\n              case 47:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function fn(_x15) {\n        return _fn8.apply(this, arguments);\n      };\n    }()\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };","map":null,"metadata":{},"sourceType":"module"}