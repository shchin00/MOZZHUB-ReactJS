{"ast":null,"code":"import _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n// import React, {useState} from 'react';\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\n// import { Button } from 'semantic-ui-react';\n// const dummyRanking = [\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\n// ];\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\n// // async function fetchData() {\n// //     try {\n// //         const response = await fetch(url);\n// //         if (!response.ok) {\n// //             throw new Error('Network response was not ok ' + response.statusText);\n// //         }\n// //         const data = await response.json();\n// //         data.forEach(item => {\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\n// //         });\n// //     } catch (error) {\n// //         console.error('There was a problem with the fetch operation:', error);\n// //     }\n// // }\n// // fetchData();\n// const interactiveMap = () => {\n//     const lat = 1.462251; // Initial map center latitude\n//     const lng = 110.413307; // Initial map center longitude\n//     const[hideLine, setHideLine] = useState(false)\n//     const handleClick = ()=>{\n//         setHideLine(!hideLine);\n//     }\n//     const controlPoints = []; // Array to store control points for curves\n//     // Calculate control points\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\n//         const controlPoint = [\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\n//         ];\n//         controlPoints.push(controlPoint);\n//     }\n//     return (\n//         <div>\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\n//             <TileLayer\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 maxZoom={16}\n//                 minZoom={2}\n//             />\n//             {dummyRanking.map((elem, i) => {\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\n//                 var a = dummyRanking[i].ranking * 0.9;\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\n//                 return (\n//                     <Circle\n//                         key={i}\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\n//                         color='red' \n//                         fillColor={rgb}\n//                         fillOpacity={a}\n//                         radius={50}\n//                         onClick={handleClick}\n//                         >\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\n//                     </Circle>\n//                 )\n//             })}\n//             {/* Render curved lines between circles */}\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\n//                 <Polyline\n//                     key={i}\n//                     positions={[\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\n//                         controlPoint, // Control point\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\n//                     ]}\n//                     color=\"blue\"\n//                 />\n//             ))}\n//         </Map>\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\n//             </div>\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\n//         </div>\n//             </div>\n//         </div>\n//     )\n// }\n// export default interactiveMap;\nimport React, { useState, useEffect } from 'react';\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\nimport { Button } from 'semantic-ui-react';\n\nvar _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\interactiveMap.js"],"names":["React","useState","useEffect","Map","TileLayer","Tooltip","Circle","Polyline","Button","data","setData"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,OAAzB,EAAkCC,MAAlC,EAA0CC,QAA1C,QAA0D,eAA1D;AACA,SAASC,MAAT,QAAuB,mBAAvB;;gBAEwBP,QAAQ,CAAC,EAAD,C;;IAAzBQ,I;IAAMC,O","sourcesContent":["// import React, {useState} from 'react';\r\n// import { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\n// import { Button } from 'semantic-ui-react';\r\n\r\n// const dummyRanking = [\r\n//     { lat: 1.462251, lng:  110.413307, ranking: 0.8 }, // London\r\n//     { lat: 1.468643, lng: 110.428541, ranking: 0.6 }, // New York\r\n//     { lat:  1.472410, lng: 110.420440, ranking: 0.4 }, // Los Angeles\r\n//     // { lat: 41.8781, lng: -87.6298, ranking: 0.5 }, // Chicago\r\n//     // { lat: 37.7749, lng: -122.4194, ranking: 0.7 } // San Francisco\r\n// ];\r\n\r\n// // const url = \"http://mozzhub.fcsit.unimas.my/mozzhubAPI/mobMapData/T1369\";\r\n\r\n// // async function fetchData() {\r\n// //     try {\r\n// //         const response = await fetch(url);\r\n// //         if (!response.ok) {\r\n// //             throw new Error('Network response was not ok ' + response.statusText);\r\n// //         }\r\n// //         const data = await response.json();\r\n\r\n// //         data.forEach(item => {\r\n// //             console.log(`Case ID: ${item.Case_id}, Latitude: ${item.lat}, Longitude: ${item.lng}`);\r\n// //         });\r\n// //     } catch (error) {\r\n// //         console.error('There was a problem with the fetch operation:', error);\r\n// //     }\r\n// // }\r\n\r\n// // fetchData();\r\n\r\n\r\n// const interactiveMap = () => {\r\n//     const lat = 1.462251; // Initial map center latitude\r\n//     const lng = 110.413307; // Initial map center longitude\r\n\r\n//     const[hideLine, setHideLine] = useState(false)\r\n\r\n//     const handleClick = ()=>{\r\n//         setHideLine(!hideLine);\r\n//     }\r\n\r\n//     const controlPoints = []; // Array to store control points for curves\r\n\r\n//     // Calculate control points\r\n//     for (let i = 0; i < dummyRanking.length - 1; i++) {\r\n//         const p1 = [dummyRanking[i].lat, dummyRanking[i].lng];\r\n//         const p2 = [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng];\r\n\r\n//         const controlPoint = [\r\n//             (p1[0] + p2[0]) / 2, // Midpoint of latitudes\r\n//             (p1[1] + p2[1]) / 2, // Midpoint of longitudes\r\n//         ];\r\n\r\n//         controlPoints.push(controlPoint);\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '620px', margin: 'auto' }}>\r\n//             <TileLayer\r\n//                 attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 maxZoom={16}\r\n//                 minZoom={2}\r\n//             />\r\n//             {dummyRanking.map((elem, i) => {\r\n//                 var l = (0.9 - dummyRanking[i].ranking * 0.9) * 255;\r\n//                 var h = (0.9 - dummyRanking[i].ranking * 0.9) * 240;\r\n//                 var a = dummyRanking[i].ranking * 0.9;\r\n//                 var rgb = \"rgb(255,\" + l + \",\" + l + \")\";\r\n//                 return (\r\n//                     <Circle\r\n//                         key={i}\r\n//                         center={{ lat: dummyRanking[i].lat, lng: dummyRanking[i].lng }}\r\n//                         color='red' \r\n//                         fillColor={rgb}\r\n//                         fillOpacity={a}\r\n//                         radius={50}\r\n//                         onClick={handleClick}\r\n//                         >\r\n//                         <Tooltip><h3>Ranking:#{i + 1}</h3></Tooltip>\r\n//                     </Circle>\r\n//                 )\r\n//             })}\r\n//             {/* Render curved lines between circles */}\r\n//             {!hideLine && dummyRanking.length > 1 && controlPoints.map((controlPoint, i) => (\r\n//                 <Polyline\r\n//                     key={i}\r\n//                     positions={[\r\n//                         [dummyRanking[i].lat, dummyRanking[i].lng], // Start point\r\n//                         controlPoint, // Control point\r\n//                         [dummyRanking[i + 1].lat, dummyRanking[i + 1].lng], // End point\r\n//                     ]}\r\n//                     color=\"blue\"\r\n//                 />\r\n//             ))}\r\n//         </Map>\r\n//         <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px' }}>\r\n//         <div style={{margin: \"2px\", border: \"2px solid black\"}}>\r\n//                 <p style={{margin: \"2px\"}}>Map Legend:</p>\r\n//                 <p style={{margin: \"2px\"}}>Circle: Data points</p>\r\n//                 <p style={{margin: \"2px\"}}>Polyline: Connections</p>\r\n//             </div>\r\n//             <div style={{position: \"absolute\", right: \"10px\"}}>\r\n//         <Button style={{marginTop: \"10px\"}}>Close</Button>\r\n//         </div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default interactiveMap;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Map, TileLayer, Tooltip, Circle, Polyline } from 'react-leaflet';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst [data, setData] = useState([]);\r\n\r\n"]},"metadata":{},"sourceType":"module"}