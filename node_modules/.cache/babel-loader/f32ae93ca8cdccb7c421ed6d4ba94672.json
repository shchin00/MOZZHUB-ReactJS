{"ast":null,"code":"import _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  var _theme$colorSchemes = theme.colorSchemes,\n      colorSchemes = _theme$colorSchemes === void 0 ? {} : _theme$colorSchemes,\n      _theme$defaultColorSc = theme.defaultColorScheme,\n      defaultColorScheme = _theme$defaultColorSc === void 0 ? 'light' : _theme$defaultColorSc,\n      otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  var _cssVarsParser = cssVarsParser(otherTheme, parserConfig),\n      rootVars = _cssVarsParser.vars,\n      rootCss = _cssVarsParser.css,\n      rootVarsWithDefaults = _cssVarsParser.varsWithDefaults;\n\n  var themeVars = rootVarsWithDefaults;\n  var colorSchemesMap = {};\n\n  var light = colorSchemes[defaultColorScheme],\n      otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n\n  Object.entries(otherColorSchemes || {}).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        scheme = _ref2[1];\n\n    var _cssVarsParser2 = cssVarsParser(scheme, parserConfig),\n        vars = _cssVarsParser2.vars,\n        css = _cssVarsParser2.css,\n        varsWithDefaults = _cssVarsParser2.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css: css,\n      vars: vars\n    };\n  });\n\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    var _cssVarsParser3 = cssVarsParser(light, parserConfig),\n        css = _cssVarsParser3.css,\n        vars = _cssVarsParser3.vars,\n        varsWithDefaults = _cssVarsParser3.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css: css,\n      vars: vars\n    };\n  }\n\n  var generateCssVars = function generateCssVars(colorScheme) {\n    var _parserConfig$getSele2;\n\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n\n      var _css = _extends({}, rootCss);\n\n      return {\n        css: _css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, _css)) || ':root'\n      };\n    }\n\n    var css = _extends({}, colorSchemesMap[colorScheme].css);\n\n    return {\n      css: css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars: generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":null,"metadata":{},"sourceType":"module"}