{"ast":null,"code":"import _slicedToArray from \"D:\\\\MOZZHUB-ReactJS\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MOZZHUB-ReactJS\\\\src\\\\component\\\\test.js\";\n// import React, { useState } from 'react';\n// import { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\n// import L from 'leaflet';\n// import 'leaflet/dist/leaflet.css';\n// // Fix for default marker icon issue\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//     iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//     iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n// // Haversine distance function to calculate distance between two coordinates\n// const haversineDistance = (coords1, coords2) => {\n//     const toRad = (x) => x * Math.PI / 180;\n//     const R = 6371e3; // Earth radius in meters\n//     const lat1 = coords1[0];\n//     const lon1 = coords1[1];\n//     const lat2 = coords2[0];\n//     const lon2 = coords2[1];\n//     const dLat = toRad(lat2 - lat1);\n//     const dLon = toRad(lon2 - lon1);\n//     const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//         Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n//         Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     return R * c;\n// };\n// // Function to check if a patient's location is within a cluster's radius\n// const isWithinCluster = (patientCoords, clusterCenter, clusterRadius) => {\n//     const distance = haversineDistance(patientCoords, clusterCenter);\n//     const withinCluster = distance <= clusterRadius;\n//     console.log(`Patient at ${patientCoords} is ${withinCluster ? \"within\" : \"not within\"} the cluster (distance: ${distance.toFixed(2)} meters)`);\n//     return withinCluster;\n// };\n// // Custom icons for patient locations (black circles)\n// const patientIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #000000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// // Custom icon for visited locations (blue circles)\n// const visitIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #0000FF; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// // Custom icon for visited locations within hotspot (red circles)\n// const hotspotVisitIcon = new L.DivIcon({\n//     html: `<div style=\"background-color: #FF0000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\n//     className: '',\n//     iconSize: [10, 10]\n// });\n// const TestFunc = () => {\n//     const [selectedDot, setSelectedDot] = useState(null);\n//     const [selectedHotspot, setSelectedHotspot] = useState(null);\n//     const lat = 1.3521;\n//     const lng = 103.8198;\n//     // Updated patient data structure with more locations\n//     const patientData = [\n//         { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\n//         // { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] },\n//         // { id: 3, position: [1.3721, 103.8398], visits: [[1.3621, 103.8298], [1.3521, 103.8198]] },\n//         // { id: 4, position: [1.3821, 103.8498], visits: [[1.3721, 103.8398], [1.3621, 103.8298]] },\n//         // { id: 5, position: [1.3921, 103.8598], visits: [[1.3821, 103.8498], [1.3721, 103.8398]] }\n//     ];\n//     const hotspots = [\n//         { id: 1, center: [1.3521, 103.8198], radius: 400 },\n//         { id: 2, center: [1.3621, 103.8298], radius: 400 },\n//         { id: 3, center: [1.3721, 103.8398], radius: 400 }\n//     ];\n//     // Function to handle marker click\n//     const handleMarkerClick = (id) => {\n//         setSelectedDot(id);\n//     };\n//     // Function to handle hotspot click\n//     const handleHotspotClick = (id) => {\n//         setSelectedDot(null);\n//         setSelectedHotspot(id);\n//         const hotspotData = hotspots.find(hotspot => hotspot.id === id);\n//         if (hotspotData) {\n//             console.log(`Hotspot ${id} selected`);\n//             patientData.forEach(patient => {\n//                 const isPatientWithinCluster = isWithinCluster(patient.position, hotspotData.center, hotspotData.radius);\n//                 if (isPatientWithinCluster) {\n//                     console.log(`Patient ${patient.id} is within the cluster at ${hotspotData.center}`);\n//                 }\n//                 patient.visits.forEach((visit, index) => {\n//                     const isVisitWithinCluster = isWithinCluster(visit, hotspotData.center, hotspotData.radius);\n//                     if (isVisitWithinCluster) {\n//                         console.log(`Patient ${patient.id}'s visit ${index + 1} at ${visit} is within the cluster at ${hotspotData.center}`);\n//                     }\n//                 });\n//             });\n//         }\n//     };\n//     const selectedHotspotData = hotspots.find(hotspot => hotspot.id === selectedHotspot);\n//     return (\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\n//             <TileLayer\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//             />\n//             {patientData.map(patient => (\n//                 <Marker key={patient.id} position={patient.position} icon={patientIcon} eventHandlers={{ click: () => handleMarkerClick(patient.id) }}>\n//                     {selectedDot === patient.id && patient.visits.map((visit, index) => (\n//                         <Polyline key={index} positions={[patient.position, visit]} color='black' />\n//                     ))}\n//                 </Marker>\n//             ))}\n//             {hotspots.map(hotspot => (\n//                 <Circle\n//                     key={hotspot.id}\n//                     center={hotspot.center}\n//                     radius={hotspot.radius}\n//                     color=\"red\"\n//                     fillColor=\"red\"\n//                     fillOpacity={0.3}\n//                     eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\n//                 />\n//             ))}\n//             {selectedHotspotData && (\n//                 <>\n//                     {patientData.map(patient => (\n//                         isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && \n//                         <Marker key={`patient-${patient.id}`} position={patient.position} icon={patientIcon} />\n//                     ))}\n//                     {patientData.map(patient => (\n//                         patient.visits.map((visit, index) => (\n//                             isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && \n//                             <Marker key={`visit-${patient.id}-${index}`} position={visit} icon={visitIcon} />\n//                         ))\n//                     ))}\n//                 </>\n//             )}\n//             {hotspots.map(hotspot => (\n//                 patientData.map(patient => (\n//                     isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \n//                     <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\n//                 ))\n//             ))}\n//         </Map>\n//     );\n// };\n// export default TestFunc;\nimport React, { useState } from 'react';\nimport { Map, TileLayer, Circle, Polyline, CircleMarker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet'; // Fix for default marker icon issue\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n}); // Haversine distance function to calculate distance between two coordinates\n\nvar haversineDistance = function haversineDistance(coords1, coords2) {\n  var toRad = function toRad(x) {\n    return x * Math.PI / 180;\n  };\n\n  var R = 6371e3; // Earth radius in meters\n\n  var lat1 = coords1[0];\n  var lon1 = coords1[1];\n  var lat2 = coords2[0];\n  var lon2 = coords2[1];\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}; // Function to check if a patient's location is within a cluster's radius\n\n\nvar isWithinCluster = function isWithinCluster(coords1, coords2, radius) {\n  var distance = haversineDistance(coords1, coords2);\n  console.log(\"Distance between \".concat(coords1, \" and \").concat(coords2, \": \").concat(distance, \" meters\"));\n  return distance <= radius;\n};\n\nvar TestFunc = function TestFunc() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDot = _useState2[0],\n      setSelectedDot = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedHotspot = _useState4[0],\n      setSelectedHotspot = _useState4[1];\n\n  var lat = 1.3521;\n  var lng = 103.8198; // Updated patient data structure with one patient location inside a cluster and their visits outside the cluster\n\n  var patientData = [{\n    id: 1,\n    position: [1.3521, 103.8198],\n    visits: [[1.3621, 103.8198], [1.3721, 103.8198]]\n  }, {\n    id: 2,\n    position: [1.3621, 103.8298],\n    visits: [[1.3521, 103.8198], [1.3821, 103.8198]]\n  }, {\n    id: 3,\n    position: [1.3521, 103.8198],\n    visits: [[1.3421, 103.8098], [1.3321, 103.7998]]\n  }];\n  var hotspots = [{\n    id: 1,\n    center: [1.3521, 103.8198],\n    radius: 400\n  }, {\n    id: 2,\n    center: [1.3621, 103.8298],\n    radius: 400\n  }, {\n    id: 3,\n    center: [1.3721, 103.8398],\n    radius: 400\n  }]; // Function to handle marker click\n\n  var handleMarkerClick = function handleMarkerClick(id) {\n    setSelectedDot(id);\n  }; // Function to handle hotspot click\n\n\n  var handleHotspotClick = function handleHotspotClick(id) {\n    setSelectedDot(null);\n    setSelectedHotspot(id);\n  };\n\n  var selectedHotspotData = hotspots.find(function (hotspot) {\n    return hotspot.id === selectedHotspot;\n  });\n  return React.createElement(Map, {\n    center: [lat, lng],\n    zoom: 13,\n    style: {\n      width: '100%',\n      height: '600px',\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }), patientData.map(function (patient) {\n    return React.createElement(CircleMarker, {\n      key: patient.id,\n      center: patient.position,\n      radius: 5,\n      color: \"black\",\n      fillColor: \"black\",\n      fillOpacity: 1,\n      eventHandlers: {\n        click: function click() {\n          return handleMarkerClick(patient.id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, selectedDot === patient.id && patient.visits.map(function (visit, index) {\n      return React.createElement(Polyline, {\n        key: index,\n        positions: [patient.position, visit],\n        color: \"black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      });\n    }));\n  }), hotspots.map(function (hotspot) {\n    return React.createElement(Circle, {\n      key: hotspot.id,\n      center: hotspot.center,\n      radius: hotspot.radius,\n      color: \"red\",\n      fillColor: \"red\",\n      fillOpacity: 0.3,\n      eventHandlers: {\n        click: function click() {\n          return handleHotspotClick(hotspot.id);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    });\n  }), selectedHotspotData && React.createElement(React.Fragment, null, patientData.map(function (patient) {\n    return isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && React.createElement(CircleMarker, {\n      key: \"patient-\".concat(patient.id),\n      center: patient.position,\n      radius: 5,\n      color: \"black\",\n      fillColor: \"black\",\n      fillOpacity: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    });\n  }), patientData.map(function (patient) {\n    return patient.visits.map(function (visit, index) {\n      return isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && React.createElement(CircleMarker, {\n        key: \"visit-\".concat(patient.id, \"-\").concat(index),\n        center: visit,\n        radius: 5,\n        color: \"#0000FF\",\n        fillColor: \"#0000FF\",\n        fillOpacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      });\n    });\n  })), hotspots.map(function (hotspot) {\n    return patientData.map(function (patient) {\n      return isWithinCluster(patient.position, hotspot.center, hotspot.radius) && React.createElement(Polyline, {\n        key: \"connection-\".concat(patient.id, \"-\").concat(hotspot.id),\n        positions: [patient.position, hotspot.center],\n        color: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      });\n    });\n  }));\n};\n\nexport default TestFunc;","map":{"version":3,"sources":["D:\\MOZZHUB-ReactJS\\src\\component\\test.js"],"names":["React","useState","Map","TileLayer","Circle","Polyline","CircleMarker","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","haversineDistance","coords1","coords2","toRad","x","Math","PI","R","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","c","atan2","sqrt","isWithinCluster","radius","distance","console","log","TestFunc","selectedDot","setSelectedDot","selectedHotspot","setSelectedHotspot","lat","lng","patientData","id","position","visits","hotspots","center","handleMarkerClick","handleHotspotClick","selectedHotspotData","find","hotspot","width","height","margin","map","patient","click","visit","index"],"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","sourcesContent":["// import React, { useState } from 'react';\r\n// import { Map, TileLayer, Marker, Circle, Polyline } from 'react-leaflet';\r\n// import L from 'leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n\r\n// // Fix for default marker icon issue\r\n// delete L.Icon.Default.prototype._getIconUrl;\r\n// L.Icon.Default.mergeOptions({\r\n//     iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n//     iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n//     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n// });\r\n\r\n// // Haversine distance function to calculate distance between two coordinates\r\n// const haversineDistance = (coords1, coords2) => {\r\n//     const toRad = (x) => x * Math.PI / 180;\r\n//     const R = 6371e3; // Earth radius in meters\r\n\r\n//     const lat1 = coords1[0];\r\n//     const lon1 = coords1[1];\r\n//     const lat2 = coords2[0];\r\n//     const lon2 = coords2[1];\r\n\r\n//     const dLat = toRad(lat2 - lat1);\r\n//     const dLon = toRad(lon2 - lon1);\r\n//     const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n//         Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n//         Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n//     return R * c;\r\n// };\r\n\r\n// // Function to check if a patient's location is within a cluster's radius\r\n// const isWithinCluster = (patientCoords, clusterCenter, clusterRadius) => {\r\n//     const distance = haversineDistance(patientCoords, clusterCenter);\r\n//     const withinCluster = distance <= clusterRadius;\r\n//     console.log(`Patient at ${patientCoords} is ${withinCluster ? \"within\" : \"not within\"} the cluster (distance: ${distance.toFixed(2)} meters)`);\r\n//     return withinCluster;\r\n// };\r\n\r\n// // Custom icons for patient locations (black circles)\r\n// const patientIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #000000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// // Custom icon for visited locations (blue circles)\r\n// const visitIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #0000FF; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// // Custom icon for visited locations within hotspot (red circles)\r\n// const hotspotVisitIcon = new L.DivIcon({\r\n//     html: `<div style=\"background-color: #FF0000; width: 10px; height: 10px; border-radius: 50%;\"></div>`,\r\n//     className: '',\r\n//     iconSize: [10, 10]\r\n// });\r\n\r\n// const TestFunc = () => {\r\n//     const [selectedDot, setSelectedDot] = useState(null);\r\n//     const [selectedHotspot, setSelectedHotspot] = useState(null);\r\n//     const lat = 1.3521;\r\n//     const lng = 103.8198;\r\n\r\n//     // Updated patient data structure with more locations\r\n//     const patientData = [\r\n//         { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\r\n//         // { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] },\r\n//         // { id: 3, position: [1.3721, 103.8398], visits: [[1.3621, 103.8298], [1.3521, 103.8198]] },\r\n//         // { id: 4, position: [1.3821, 103.8498], visits: [[1.3721, 103.8398], [1.3621, 103.8298]] },\r\n//         // { id: 5, position: [1.3921, 103.8598], visits: [[1.3821, 103.8498], [1.3721, 103.8398]] }\r\n//     ];\r\n\r\n//     const hotspots = [\r\n//         { id: 1, center: [1.3521, 103.8198], radius: 400 },\r\n//         { id: 2, center: [1.3621, 103.8298], radius: 400 },\r\n//         { id: 3, center: [1.3721, 103.8398], radius: 400 }\r\n//     ];\r\n\r\n//     // Function to handle marker click\r\n//     const handleMarkerClick = (id) => {\r\n//         setSelectedDot(id);\r\n//     };\r\n\r\n//     // Function to handle hotspot click\r\n//     const handleHotspotClick = (id) => {\r\n//         setSelectedDot(null);\r\n//         setSelectedHotspot(id);\r\n\r\n//         const hotspotData = hotspots.find(hotspot => hotspot.id === id);\r\n//         if (hotspotData) {\r\n//             console.log(`Hotspot ${id} selected`);\r\n//             patientData.forEach(patient => {\r\n//                 const isPatientWithinCluster = isWithinCluster(patient.position, hotspotData.center, hotspotData.radius);\r\n//                 if (isPatientWithinCluster) {\r\n//                     console.log(`Patient ${patient.id} is within the cluster at ${hotspotData.center}`);\r\n//                 }\r\n//                 patient.visits.forEach((visit, index) => {\r\n//                     const isVisitWithinCluster = isWithinCluster(visit, hotspotData.center, hotspotData.radius);\r\n//                     if (isVisitWithinCluster) {\r\n//                         console.log(`Patient ${patient.id}'s visit ${index + 1} at ${visit} is within the cluster at ${hotspotData.center}`);\r\n//                     }\r\n//                 });\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const selectedHotspotData = hotspots.find(hotspot => hotspot.id === selectedHotspot);\r\n\r\n//     return (\r\n//         <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\r\n//             <TileLayer\r\n//                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//             />\r\n\r\n//             {patientData.map(patient => (\r\n//                 <Marker key={patient.id} position={patient.position} icon={patientIcon} eventHandlers={{ click: () => handleMarkerClick(patient.id) }}>\r\n//                     {selectedDot === patient.id && patient.visits.map((visit, index) => (\r\n//                         <Polyline key={index} positions={[patient.position, visit]} color='black' />\r\n//                     ))}\r\n//                 </Marker>\r\n//             ))}\r\n\r\n//             {hotspots.map(hotspot => (\r\n//                 <Circle\r\n//                     key={hotspot.id}\r\n//                     center={hotspot.center}\r\n//                     radius={hotspot.radius}\r\n//                     color=\"red\"\r\n//                     fillColor=\"red\"\r\n//                     fillOpacity={0.3}\r\n//                     eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\r\n//                 />\r\n//             ))}\r\n\r\n//             {selectedHotspotData && (\r\n//                 <>\r\n//                     {patientData.map(patient => (\r\n//                         isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && \r\n//                         <Marker key={`patient-${patient.id}`} position={patient.position} icon={patientIcon} />\r\n//                     ))}\r\n\r\n//                     {patientData.map(patient => (\r\n//                         patient.visits.map((visit, index) => (\r\n//                             isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && \r\n//                             <Marker key={`visit-${patient.id}-${index}`} position={visit} icon={visitIcon} />\r\n//                         ))\r\n//                     ))}\r\n//                 </>\r\n//             )}\r\n\r\n//             {hotspots.map(hotspot => (\r\n//                 patientData.map(patient => (\r\n//                     isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \r\n//                     <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\r\n//                 ))\r\n//             ))}\r\n//         </Map>\r\n//     );\r\n// };\r\n\r\n// export default TestFunc;\r\nimport React, { useState } from 'react';\r\nimport { Map, TileLayer, Circle, Polyline, CircleMarker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n\r\n// Fix for default marker icon issue\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Haversine distance function to calculate distance between two coordinates\r\nconst haversineDistance = (coords1, coords2) => {\r\n    const toRad = (x) => x * Math.PI / 180;\r\n    const R = 6371e3; // Earth radius in meters\r\n\r\n    const lat1 = coords1[0];\r\n    const lon1 = coords1[1];\r\n    const lat2 = coords2[0];\r\n    const lon2 = coords2[1];\r\n\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return R * c;\r\n};\r\n\r\n// Function to check if a patient's location is within a cluster's radius\r\nconst isWithinCluster = (coords1, coords2, radius) => {\r\n    const distance = haversineDistance(coords1, coords2);\r\n    console.log(`Distance between ${coords1} and ${coords2}: ${distance} meters`);\r\n    return distance <= radius;\r\n};\r\n\r\nconst TestFunc = () => {\r\n    const [selectedDot, setSelectedDot] = useState(null);\r\n    const [selectedHotspot, setSelectedHotspot] = useState(null);\r\n    const lat = 1.3521;\r\n    const lng = 103.8198;\r\n\r\n    // Updated patient data structure with one patient location inside a cluster and their visits outside the cluster\r\n    const patientData = [\r\n        { id: 1, position: [1.3521, 103.8198], visits: [[1.3621, 103.8198], [1.3721, 103.8198]] },\r\n        { id: 2, position: [1.3621, 103.8298], visits: [[1.3521, 103.8198], [1.3821, 103.8198]] },\r\n        { id: 3, position: [1.3521, 103.8198], visits: [[1.3421, 103.8098], [1.3321, 103.7998]] }, // Patient within the cluster\r\n        // { id: 4, position: [1.3821, 103.8498], visits: [[1.3721, 103.8398], [1.3621, 103.8298]] },\r\n        // { id: 5, position: [1.3921, 103.8598], visits: [[1.3821, 103.8498], [1.3721, 103.8398]] }\r\n    ];\r\n\r\n    const hotspots = [\r\n        { id: 1, center: [1.3521, 103.8198], radius: 400 },\r\n        { id: 2, center: [1.3621, 103.8298], radius: 400 },\r\n        { id: 3, center: [1.3721, 103.8398], radius: 400 }\r\n    ];\r\n\r\n    // Function to handle marker click\r\n    const handleMarkerClick = (id) => {\r\n        setSelectedDot(id);\r\n    };\r\n\r\n    // Function to handle hotspot click\r\n    const handleHotspotClick = (id) => {\r\n        setSelectedDot(null);\r\n        setSelectedHotspot(id);\r\n    };\r\n\r\n    const selectedHotspotData = hotspots.find(hotspot => hotspot.id === selectedHotspot);\r\n\r\n    return (\r\n        <Map center={[lat, lng]} zoom={13} style={{ width: '100%', height: '600px', margin: 'auto' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n\r\n            {patientData.map(patient => (\r\n                <CircleMarker\r\n                    key={patient.id}\r\n                    center={patient.position}\r\n                    radius={5}\r\n                    color=\"black\"\r\n                    fillColor=\"black\"\r\n                    fillOpacity={1}\r\n                    eventHandlers={{ click: () => handleMarkerClick(patient.id) }}\r\n                >\r\n                    {selectedDot === patient.id && patient.visits.map((visit, index) => (\r\n                        <Polyline key={index} positions={[patient.position, visit]} color='black' />\r\n                    ))}\r\n                </CircleMarker>\r\n            ))}\r\n\r\n            {hotspots.map(hotspot => (\r\n                <Circle\r\n                    key={hotspot.id}\r\n                    center={hotspot.center}\r\n                    radius={hotspot.radius}\r\n                    color=\"red\"\r\n                    fillColor=\"red\"\r\n                    fillOpacity={0.3}\r\n                    eventHandlers={{ click: () => handleHotspotClick(hotspot.id) }}\r\n                />\r\n            ))}\r\n\r\n            {selectedHotspotData && (\r\n                <>\r\n                    {patientData.map(patient => (\r\n                        isWithinCluster(patient.position, selectedHotspotData.center, selectedHotspotData.radius) && \r\n                        <CircleMarker\r\n                            key={`patient-${patient.id}`}\r\n                            center={patient.position}\r\n                            radius={5}\r\n                            color=\"black\"\r\n                            fillColor=\"black\"\r\n                            fillOpacity={1}\r\n                        />\r\n                    ))}\r\n\r\n                    {patientData.map(patient => (\r\n                        patient.visits.map((visit, index) => (\r\n                            isWithinCluster(visit, selectedHotspotData.center, selectedHotspotData.radius) && \r\n                            <CircleMarker\r\n                                key={`visit-${patient.id}-${index}`}\r\n                                center={visit}\r\n                                radius={5}\r\n                                color=\"#0000FF\"\r\n                                fillColor=\"#0000FF\"\r\n                                fillOpacity={1}\r\n                            />\r\n                        ))\r\n                    ))}\r\n                </>\r\n            )}\r\n\r\n            {hotspots.map(hotspot => (\r\n                patientData.map(patient => (\r\n                    isWithinCluster(patient.position, hotspot.center, hotspot.radius) && \r\n                    <Polyline key={`connection-${patient.id}-${hotspot.id}`} positions={[patient.position, hotspot.center]} color='blue' />\r\n                ))\r\n            ))}\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default TestFunc;\r\n\r\n"]},"metadata":{},"sourceType":"module"}